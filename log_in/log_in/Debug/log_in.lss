
log_in.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00003a46  00003ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000e6  008000e6  00003b60  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000042b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000252  00000000  00000000  00004451  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003099  00000000  00000000  000046a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001250  00000000  00000000  0000773c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002459  00000000  00000000  0000898c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000ade8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000460  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  0000b468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000644  00000000  00000000  0000c08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  0000c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <main>
      8a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	cd 57       	subi	r28, 0x7D	; 125
      a0:	d0 40       	sbci	r29, 0x00	; 0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	9e 01       	movw	r18, r28
      ae:	24 58       	subi	r18, 0x84	; 132
      b0:	3f 4f       	sbci	r19, 0xFF	; 255
      b2:	f9 01       	movw	r30, r18
      b4:	80 83       	st	Z, r24
      b6:	ce 01       	movw	r24, r28
      b8:	83 58       	subi	r24, 0x83	; 131
      ba:	9f 4f       	sbci	r25, 0xFF	; 255
      bc:	fc 01       	movw	r30, r24
      be:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      c0:	ce 01       	movw	r24, r28
      c2:	84 58       	subi	r24, 0x84	; 132
      c4:	9f 4f       	sbci	r25, 0xFF	; 255
      c6:	fc 01       	movw	r30, r24
      c8:	80 81       	ld	r24, Z
      ca:	82 95       	swap	r24
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	89 83       	std	Y+1, r24	; 0x01
ln=(c & 0x0F);
      d0:	ce 01       	movw	r24, r28
      d2:	84 58       	subi	r24, 0x84	; 132
      d4:	9f 4f       	sbci	r25, 0xFF	; 255
      d6:	fc 01       	movw	r30, r24
      d8:	80 81       	ld	r24, Z
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	8a 83       	std	Y+2, r24	; 0x02

if(isdata==0)
      de:	ce 01       	movw	r24, r28
      e0:	83 58       	subi	r24, 0x83	; 131
      e2:	9f 4f       	sbci	r25, 0xFF	; 255
      e4:	fc 01       	movw	r30, r24
      e6:	80 81       	ld	r24, Z
      e8:	88 23       	and	r24, r24
      ea:	51 f4       	brne	.+20     	; 0x100 <LCDByte+0x6e>
	CLEAR_RS();
      ec:	82 e3       	ldi	r24, 0x32	; 50
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	22 e3       	ldi	r18, 0x32	; 50
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	27 7f       	andi	r18, 0xF7	; 247
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	09 c0       	rjmp	.+18     	; 0x112 <LCDByte+0x80>
else
	SET_RS();
     100:	82 e3       	ldi	r24, 0x32	; 50
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	22 e3       	ldi	r18, 0x32	; 50
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	28 60       	ori	r18, 0x08	; 8
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	bf e3       	ldi	r27, 0x3F	; 63
     11a:	8c 83       	std	Y+4, r24	; 0x04
     11c:	9d 83       	std	Y+5, r25	; 0x05
     11e:	ae 83       	std	Y+6, r26	; 0x06
     120:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     122:	6c 81       	ldd	r22, Y+4	; 0x04
     124:	7d 81       	ldd	r23, Y+5	; 0x05
     126:	8e 81       	ldd	r24, Y+6	; 0x06
     128:	9f 81       	ldd	r25, Y+7	; 0x07
     12a:	2b ea       	ldi	r18, 0xAB	; 171
     12c:	3a ea       	ldi	r19, 0xAA	; 170
     12e:	4a ea       	ldi	r20, 0xAA	; 170
     130:	5e e3       	ldi	r21, 0x3E	; 62
     132:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	88 87       	std	Y+8, r24	; 0x08
     13c:	99 87       	std	Y+9, r25	; 0x09
     13e:	aa 87       	std	Y+10, r26	; 0x0a
     140:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	68 85       	ldd	r22, Y+8	; 0x08
     146:	79 85       	ldd	r23, Y+9	; 0x09
     148:	8a 85       	ldd	r24, Y+10	; 0x0a
     14a:	9b 85       	ldd	r25, Y+11	; 0x0b
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e8       	ldi	r20, 0x80	; 128
     152:	5f e3       	ldi	r21, 0x3F	; 63
     154:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     158:	88 23       	and	r24, r24
     15a:	0c f0       	brlt	.+2      	; 0x15e <LCDByte+0xcc>
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	11 23       	and	r17, r17
     160:	19 f0       	breq	.+6      	; 0x168 <LCDByte+0xd6>
		__ticks = 1;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	8c 87       	std	Y+12, r24	; 0x0c
     166:	a3 c0       	rjmp	.+326    	; 0x2ae <LCDByte+0x21c>
	else if (__tmp > 255)
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	68 85       	ldd	r22, Y+8	; 0x08
     16c:	79 85       	ldd	r23, Y+9	; 0x09
     16e:	8a 85       	ldd	r24, Y+10	; 0x0a
     170:	9b 85       	ldd	r25, Y+11	; 0x0b
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	4f e7       	ldi	r20, 0x7F	; 127
     178:	53 e4       	ldi	r21, 0x43	; 67
     17a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     17e:	18 16       	cp	r1, r24
     180:	0c f0       	brlt	.+2      	; 0x184 <LCDByte+0xf2>
     182:	10 e0       	ldi	r17, 0x00	; 0
     184:	11 23       	and	r17, r17
     186:	09 f4       	brne	.+2      	; 0x18a <LCDByte+0xf8>
     188:	89 c0       	rjmp	.+274    	; 0x29c <LCDByte+0x20a>
	{
		_delay_ms(__us / 1000.0);
     18a:	6c 81       	ldd	r22, Y+4	; 0x04
     18c:	7d 81       	ldd	r23, Y+5	; 0x05
     18e:	8e 81       	ldd	r24, Y+6	; 0x06
     190:	9f 81       	ldd	r25, Y+7	; 0x07
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	4a e7       	ldi	r20, 0x7A	; 122
     198:	54 e4       	ldi	r21, 0x44	; 68
     19a:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	8d 87       	std	Y+13, r24	; 0x0d
     1a4:	9e 87       	std	Y+14, r25	; 0x0e
     1a6:	af 87       	std	Y+15, r26	; 0x0f
     1a8:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     1aa:	6d 85       	ldd	r22, Y+13	; 0x0d
     1ac:	7e 85       	ldd	r23, Y+14	; 0x0e
     1ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     1b0:	98 89       	ldd	r25, Y+16	; 0x10
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	4a e7       	ldi	r20, 0x7A	; 122
     1b8:	53 e4       	ldi	r21, 0x43	; 67
     1ba:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	89 8b       	std	Y+17, r24	; 0x11
     1c4:	9a 8b       	std	Y+18, r25	; 0x12
     1c6:	ab 8b       	std	Y+19, r26	; 0x13
     1c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	69 89       	ldd	r22, Y+17	; 0x11
     1ce:	7a 89       	ldd	r23, Y+18	; 0x12
     1d0:	8b 89       	ldd	r24, Y+19	; 0x13
     1d2:	9c 89       	ldd	r25, Y+20	; 0x14
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	40 e8       	ldi	r20, 0x80	; 128
     1da:	5f e3       	ldi	r21, 0x3F	; 63
     1dc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     1e0:	88 23       	and	r24, r24
     1e2:	0c f0       	brlt	.+2      	; 0x1e6 <LCDByte+0x154>
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	11 23       	and	r17, r17
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <LCDByte+0x162>
		__ticks = 1;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	9e 8b       	std	Y+22, r25	; 0x16
     1f0:	8d 8b       	std	Y+21, r24	; 0x15
     1f2:	46 c0       	rjmp	.+140    	; 0x280 <LCDByte+0x1ee>
	else if (__tmp > 65535)
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	69 89       	ldd	r22, Y+17	; 0x11
     1f8:	7a 89       	ldd	r23, Y+18	; 0x12
     1fa:	8b 89       	ldd	r24, Y+19	; 0x13
     1fc:	9c 89       	ldd	r25, Y+20	; 0x14
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	3f ef       	ldi	r19, 0xFF	; 255
     202:	4f e7       	ldi	r20, 0x7F	; 127
     204:	57 e4       	ldi	r21, 0x47	; 71
     206:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     20a:	18 16       	cp	r1, r24
     20c:	0c f0       	brlt	.+2      	; 0x210 <LCDByte+0x17e>
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	11 23       	and	r17, r17
     212:	61 f1       	breq	.+88     	; 0x26c <LCDByte+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     214:	6d 85       	ldd	r22, Y+13	; 0x0d
     216:	7e 85       	ldd	r23, Y+14	; 0x0e
     218:	8f 85       	ldd	r24, Y+15	; 0x0f
     21a:	98 89       	ldd	r25, Y+16	; 0x10
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e2       	ldi	r20, 0x20	; 32
     222:	51 e4       	ldi	r21, 0x41	; 65
     224:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	9e 8b       	std	Y+22, r25	; 0x16
     23a:	8d 8b       	std	Y+21, r24	; 0x15
     23c:	12 c0       	rjmp	.+36     	; 0x262 <LCDByte+0x1d0>
     23e:	89 e1       	ldi	r24, 0x19	; 25
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	98 8f       	std	Y+24, r25	; 0x18
     244:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	8f 89       	ldd	r24, Y+23	; 0x17
     248:	98 8d       	ldd	r25, Y+24	; 0x18
     24a:	8c 01       	movw	r16, r24
     24c:	c8 01       	movw	r24, r16
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCDByte+0x1bc>
     252:	8c 01       	movw	r16, r24
     254:	18 8f       	std	Y+24, r17	; 0x18
     256:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     258:	8d 89       	ldd	r24, Y+21	; 0x15
     25a:	9e 89       	ldd	r25, Y+22	; 0x16
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	9e 8b       	std	Y+22, r25	; 0x16
     260:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     262:	8d 89       	ldd	r24, Y+21	; 0x15
     264:	9e 89       	ldd	r25, Y+22	; 0x16
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	51 f7       	brne	.-44     	; 0x23e <LCDByte+0x1ac>
     26a:	28 c0       	rjmp	.+80     	; 0x2bc <LCDByte+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     26c:	69 89       	ldd	r22, Y+17	; 0x11
     26e:	7a 89       	ldd	r23, Y+18	; 0x12
     270:	8b 89       	ldd	r24, Y+19	; 0x13
     272:	9c 89       	ldd	r25, Y+20	; 0x14
     274:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	9e 8b       	std	Y+22, r25	; 0x16
     27e:	8d 8b       	std	Y+21, r24	; 0x15
     280:	8d 89       	ldd	r24, Y+21	; 0x15
     282:	9e 89       	ldd	r25, Y+22	; 0x16
     284:	9a 8f       	std	Y+26, r25	; 0x1a
     286:	89 8f       	std	Y+25, r24	; 0x19
     288:	89 8d       	ldd	r24, Y+25	; 0x19
     28a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     28c:	8c 01       	movw	r16, r24
     28e:	f8 01       	movw	r30, r16
     290:	31 97       	sbiw	r30, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCDByte+0x1fe>
     294:	8f 01       	movw	r16, r30
     296:	1a 8f       	std	Y+26, r17	; 0x1a
     298:	09 8f       	std	Y+25, r16	; 0x19
     29a:	10 c0       	rjmp	.+32     	; 0x2bc <LCDByte+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     29c:	68 85       	ldd	r22, Y+8	; 0x08
     29e:	79 85       	ldd	r23, Y+9	; 0x09
     2a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2a4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8c 87       	std	Y+12, r24	; 0x0c
     2ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     2b0:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2b4:	18 2f       	mov	r17, r24
     2b6:	1a 95       	dec	r17
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCDByte+0x224>
     2ba:	1b 8f       	std	Y+27, r17	; 0x1b

_delay_us(0.500);		//tAS

SET_E();
     2bc:	88 e3       	ldi	r24, 0x38	; 56
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	28 e3       	ldi	r18, 0x38	; 56
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	f9 01       	movw	r30, r18
     2c6:	20 81       	ld	r18, Z
     2c8:	20 61       	ori	r18, 0x10	; 16
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 83       	st	Z, r18

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     2ce:	88 e3       	ldi	r24, 0x38	; 56
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	98 2f       	mov	r25, r24
     2d8:	90 7f       	andi	r25, 0xF0	; 240
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	89 2b       	or	r24, r25
     2de:	8b 83       	std	Y+3, r24	; 0x03
LCD_DATA_PORT=temp;
     2e0:	88 e3       	ldi	r24, 0x38	; 56
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2b 81       	ldd	r18, Y+3	; 0x03
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e8       	ldi	r26, 0x80	; 128
     2f0:	bf e3       	ldi	r27, 0x3F	; 63
     2f2:	8c 8f       	std	Y+28, r24	; 0x1c
     2f4:	9d 8f       	std	Y+29, r25	; 0x1d
     2f6:	ae 8f       	std	Y+30, r26	; 0x1e
     2f8:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     2fa:	6c 8d       	ldd	r22, Y+28	; 0x1c
     2fc:	7d 8d       	ldd	r23, Y+29	; 0x1d
     2fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     300:	9f 8d       	ldd	r25, Y+31	; 0x1f
     302:	2b ea       	ldi	r18, 0xAB	; 171
     304:	3a ea       	ldi	r19, 0xAA	; 170
     306:	4a ea       	ldi	r20, 0xAA	; 170
     308:	5e e3       	ldi	r21, 0x3E	; 62
     30a:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	88 a3       	std	Y+32, r24	; 0x20
     314:	99 a3       	std	Y+33, r25	; 0x21
     316:	aa a3       	std	Y+34, r26	; 0x22
     318:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	68 a1       	ldd	r22, Y+32	; 0x20
     31e:	79 a1       	ldd	r23, Y+33	; 0x21
     320:	8a a1       	ldd	r24, Y+34	; 0x22
     322:	9b a1       	ldd	r25, Y+35	; 0x23
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e8       	ldi	r20, 0x80	; 128
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     330:	88 23       	and	r24, r24
     332:	0c f0       	brlt	.+2      	; 0x336 <LCDByte+0x2a4>
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	11 23       	and	r17, r17
     338:	19 f0       	breq	.+6      	; 0x340 <LCDByte+0x2ae>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	8c a3       	std	Y+36, r24	; 0x24
     33e:	a3 c0       	rjmp	.+326    	; 0x486 <LCDByte+0x3f4>
	else if (__tmp > 255)
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	68 a1       	ldd	r22, Y+32	; 0x20
     344:	79 a1       	ldd	r23, Y+33	; 0x21
     346:	8a a1       	ldd	r24, Y+34	; 0x22
     348:	9b a1       	ldd	r25, Y+35	; 0x23
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	53 e4       	ldi	r21, 0x43	; 67
     352:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     356:	18 16       	cp	r1, r24
     358:	0c f0       	brlt	.+2      	; 0x35c <LCDByte+0x2ca>
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	11 23       	and	r17, r17
     35e:	09 f4       	brne	.+2      	; 0x362 <LCDByte+0x2d0>
     360:	89 c0       	rjmp	.+274    	; 0x474 <LCDByte+0x3e2>
	{
		_delay_ms(__us / 1000.0);
     362:	6c 8d       	ldd	r22, Y+28	; 0x1c
     364:	7d 8d       	ldd	r23, Y+29	; 0x1d
     366:	8e 8d       	ldd	r24, Y+30	; 0x1e
     368:	9f 8d       	ldd	r25, Y+31	; 0x1f
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4a e7       	ldi	r20, 0x7A	; 122
     370:	54 e4       	ldi	r21, 0x44	; 68
     372:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     376:	dc 01       	movw	r26, r24
     378:	cb 01       	movw	r24, r22
     37a:	8d a3       	std	Y+37, r24	; 0x25
     37c:	9e a3       	std	Y+38, r25	; 0x26
     37e:	af a3       	std	Y+39, r26	; 0x27
     380:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     382:	6d a1       	ldd	r22, Y+37	; 0x25
     384:	7e a1       	ldd	r23, Y+38	; 0x26
     386:	8f a1       	ldd	r24, Y+39	; 0x27
     388:	98 a5       	ldd	r25, Y+40	; 0x28
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	4a e7       	ldi	r20, 0x7A	; 122
     390:	53 e4       	ldi	r21, 0x43	; 67
     392:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	89 a7       	std	Y+41, r24	; 0x29
     39c:	9a a7       	std	Y+42, r25	; 0x2a
     39e:	ab a7       	std	Y+43, r26	; 0x2b
     3a0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	69 a5       	ldd	r22, Y+41	; 0x29
     3a6:	7a a5       	ldd	r23, Y+42	; 0x2a
     3a8:	8b a5       	ldd	r24, Y+43	; 0x2b
     3aa:	9c a5       	ldd	r25, Y+44	; 0x2c
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e8       	ldi	r20, 0x80	; 128
     3b2:	5f e3       	ldi	r21, 0x3F	; 63
     3b4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     3b8:	88 23       	and	r24, r24
     3ba:	0c f0       	brlt	.+2      	; 0x3be <LCDByte+0x32c>
     3bc:	10 e0       	ldi	r17, 0x00	; 0
     3be:	11 23       	and	r17, r17
     3c0:	29 f0       	breq	.+10     	; 0x3cc <LCDByte+0x33a>
		__ticks = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	9e a7       	std	Y+46, r25	; 0x2e
     3c8:	8d a7       	std	Y+45, r24	; 0x2d
     3ca:	46 c0       	rjmp	.+140    	; 0x458 <LCDByte+0x3c6>
	else if (__tmp > 65535)
     3cc:	11 e0       	ldi	r17, 0x01	; 1
     3ce:	69 a5       	ldd	r22, Y+41	; 0x29
     3d0:	7a a5       	ldd	r23, Y+42	; 0x2a
     3d2:	8b a5       	ldd	r24, Y+43	; 0x2b
     3d4:	9c a5       	ldd	r25, Y+44	; 0x2c
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	3f ef       	ldi	r19, 0xFF	; 255
     3da:	4f e7       	ldi	r20, 0x7F	; 127
     3dc:	57 e4       	ldi	r21, 0x47	; 71
     3de:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     3e2:	18 16       	cp	r1, r24
     3e4:	0c f0       	brlt	.+2      	; 0x3e8 <LCDByte+0x356>
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	11 23       	and	r17, r17
     3ea:	61 f1       	breq	.+88     	; 0x444 <LCDByte+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ec:	6d a1       	ldd	r22, Y+37	; 0x25
     3ee:	7e a1       	ldd	r23, Y+38	; 0x26
     3f0:	8f a1       	ldd	r24, Y+39	; 0x27
     3f2:	98 a5       	ldd	r25, Y+40	; 0x28
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e2       	ldi	r20, 0x20	; 32
     3fa:	51 e4       	ldi	r21, 0x41	; 65
     3fc:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	bc 01       	movw	r22, r24
     406:	cd 01       	movw	r24, r26
     408:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9e a7       	std	Y+46, r25	; 0x2e
     412:	8d a7       	std	Y+45, r24	; 0x2d
     414:	12 c0       	rjmp	.+36     	; 0x43a <LCDByte+0x3a8>
     416:	89 e1       	ldi	r24, 0x19	; 25
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	98 ab       	std	Y+48, r25	; 0x30
     41c:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     41e:	8f a5       	ldd	r24, Y+47	; 0x2f
     420:	98 a9       	ldd	r25, Y+48	; 0x30
     422:	8c 01       	movw	r16, r24
     424:	c8 01       	movw	r24, r16
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <LCDByte+0x394>
     42a:	8c 01       	movw	r16, r24
     42c:	18 ab       	std	Y+48, r17	; 0x30
     42e:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     430:	8d a5       	ldd	r24, Y+45	; 0x2d
     432:	9e a5       	ldd	r25, Y+46	; 0x2e
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	9e a7       	std	Y+46, r25	; 0x2e
     438:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43a:	8d a5       	ldd	r24, Y+45	; 0x2d
     43c:	9e a5       	ldd	r25, Y+46	; 0x2e
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	51 f7       	brne	.-44     	; 0x416 <LCDByte+0x384>
     442:	28 c0       	rjmp	.+80     	; 0x494 <LCDByte+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     444:	69 a5       	ldd	r22, Y+41	; 0x29
     446:	7a a5       	ldd	r23, Y+42	; 0x2a
     448:	8b a5       	ldd	r24, Y+43	; 0x2b
     44a:	9c a5       	ldd	r25, Y+44	; 0x2c
     44c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	9e a7       	std	Y+46, r25	; 0x2e
     456:	8d a7       	std	Y+45, r24	; 0x2d
     458:	8d a5       	ldd	r24, Y+45	; 0x2d
     45a:	9e a5       	ldd	r25, Y+46	; 0x2e
     45c:	9a ab       	std	Y+50, r25	; 0x32
     45e:	89 ab       	std	Y+49, r24	; 0x31
     460:	89 a9       	ldd	r24, Y+49	; 0x31
     462:	9a a9       	ldd	r25, Y+50	; 0x32
     464:	8c 01       	movw	r16, r24
     466:	f8 01       	movw	r30, r16
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <LCDByte+0x3d6>
     46c:	8f 01       	movw	r16, r30
     46e:	1a ab       	std	Y+50, r17	; 0x32
     470:	09 ab       	std	Y+49, r16	; 0x31
     472:	10 c0       	rjmp	.+32     	; 0x494 <LCDByte+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     474:	68 a1       	ldd	r22, Y+32	; 0x20
     476:	79 a1       	ldd	r23, Y+33	; 0x21
     478:	8a a1       	ldd	r24, Y+34	; 0x22
     47a:	9b a1       	ldd	r25, Y+35	; 0x23
     47c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	8c a3       	std	Y+36, r24	; 0x24
     486:	8c a1       	ldd	r24, Y+36	; 0x24
     488:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     48a:	8b a9       	ldd	r24, Y+51	; 0x33
     48c:	18 2f       	mov	r17, r24
     48e:	1a 95       	dec	r17
     490:	f1 f7       	brne	.-4      	; 0x48e <LCDByte+0x3fc>
     492:	1b ab       	std	Y+51, r17	; 0x33

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     494:	88 e3       	ldi	r24, 0x38	; 56
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	28 e3       	ldi	r18, 0x38	; 56
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	f9 01       	movw	r30, r18
     49e:	20 81       	ld	r18, Z
     4a0:	2f 7e       	andi	r18, 0xEF	; 239
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 83       	st	Z, r18
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 e8       	ldi	r26, 0x80	; 128
     4ac:	bf e3       	ldi	r27, 0x3F	; 63
     4ae:	8c ab       	std	Y+52, r24	; 0x34
     4b0:	9d ab       	std	Y+53, r25	; 0x35
     4b2:	ae ab       	std	Y+54, r26	; 0x36
     4b4:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     4b6:	6c a9       	ldd	r22, Y+52	; 0x34
     4b8:	7d a9       	ldd	r23, Y+53	; 0x35
     4ba:	8e a9       	ldd	r24, Y+54	; 0x36
     4bc:	9f a9       	ldd	r25, Y+55	; 0x37
     4be:	2b ea       	ldi	r18, 0xAB	; 171
     4c0:	3a ea       	ldi	r19, 0xAA	; 170
     4c2:	4a ea       	ldi	r20, 0xAA	; 170
     4c4:	5e e3       	ldi	r21, 0x3E	; 62
     4c6:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	88 af       	std	Y+56, r24	; 0x38
     4d0:	99 af       	std	Y+57, r25	; 0x39
     4d2:	aa af       	std	Y+58, r26	; 0x3a
     4d4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     4d6:	11 e0       	ldi	r17, 0x01	; 1
     4d8:	68 ad       	ldd	r22, Y+56	; 0x38
     4da:	79 ad       	ldd	r23, Y+57	; 0x39
     4dc:	8a ad       	ldd	r24, Y+58	; 0x3a
     4de:	9b ad       	ldd	r25, Y+59	; 0x3b
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e8       	ldi	r20, 0x80	; 128
     4e6:	5f e3       	ldi	r21, 0x3F	; 63
     4e8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     4ec:	88 23       	and	r24, r24
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <LCDByte+0x460>
     4f0:	10 e0       	ldi	r17, 0x00	; 0
     4f2:	11 23       	and	r17, r17
     4f4:	19 f0       	breq	.+6      	; 0x4fc <LCDByte+0x46a>
		__ticks = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8c af       	std	Y+60, r24	; 0x3c
     4fa:	f3 c0       	rjmp	.+486    	; 0x6e2 <LCDByte+0x650>
	else if (__tmp > 255)
     4fc:	11 e0       	ldi	r17, 0x01	; 1
     4fe:	68 ad       	ldd	r22, Y+56	; 0x38
     500:	79 ad       	ldd	r23, Y+57	; 0x39
     502:	8a ad       	ldd	r24, Y+58	; 0x3a
     504:	9b ad       	ldd	r25, Y+59	; 0x3b
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	4f e7       	ldi	r20, 0x7F	; 127
     50c:	53 e4       	ldi	r21, 0x43	; 67
     50e:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     512:	18 16       	cp	r1, r24
     514:	0c f0       	brlt	.+2      	; 0x518 <LCDByte+0x486>
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	11 23       	and	r17, r17
     51a:	09 f4       	brne	.+2      	; 0x51e <LCDByte+0x48c>
     51c:	d9 c0       	rjmp	.+434    	; 0x6d0 <LCDByte+0x63e>
	{
		_delay_ms(__us / 1000.0);
     51e:	6c a9       	ldd	r22, Y+52	; 0x34
     520:	7d a9       	ldd	r23, Y+53	; 0x35
     522:	8e a9       	ldd	r24, Y+54	; 0x36
     524:	9f a9       	ldd	r25, Y+55	; 0x37
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a e7       	ldi	r20, 0x7A	; 122
     52c:	54 e4       	ldi	r21, 0x44	; 68
     52e:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	9e 01       	movw	r18, r28
     538:	23 5c       	subi	r18, 0xC3	; 195
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	f9 01       	movw	r30, r18
     53e:	80 83       	st	Z, r24
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	a2 83       	std	Z+2, r26	; 0x02
     544:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     546:	8e 01       	movw	r16, r28
     548:	0f 5b       	subi	r16, 0xBF	; 191
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	ce 01       	movw	r24, r28
     54e:	cd 96       	adiw	r24, 0x3d	; 61
     550:	fc 01       	movw	r30, r24
     552:	60 81       	ld	r22, Z
     554:	71 81       	ldd	r23, Z+1	; 0x01
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4a e7       	ldi	r20, 0x7A	; 122
     560:	53 e4       	ldi	r21, 0x43	; 67
     562:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	f8 01       	movw	r30, r16
     56c:	80 83       	st	Z, r24
     56e:	91 83       	std	Z+1, r25	; 0x01
     570:	a2 83       	std	Z+2, r26	; 0x02
     572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     574:	ce 01       	movw	r24, r28
     576:	8f 5b       	subi	r24, 0xBF	; 191
     578:	9f 4f       	sbci	r25, 0xFF	; 255
     57a:	11 e0       	ldi	r17, 0x01	; 1
     57c:	fc 01       	movw	r30, r24
     57e:	60 81       	ld	r22, Z
     580:	71 81       	ldd	r23, Z+1	; 0x01
     582:	82 81       	ldd	r24, Z+2	; 0x02
     584:	93 81       	ldd	r25, Z+3	; 0x03
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e8       	ldi	r20, 0x80	; 128
     58c:	5f e3       	ldi	r21, 0x3F	; 63
     58e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     592:	88 23       	and	r24, r24
     594:	0c f0       	brlt	.+2      	; 0x598 <LCDByte+0x506>
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	11 23       	and	r17, r17
     59a:	49 f0       	breq	.+18     	; 0x5ae <LCDByte+0x51c>
		__ticks = 1;
     59c:	ce 01       	movw	r24, r28
     59e:	8b 5b       	subi	r24, 0xBB	; 187
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	21 e0       	ldi	r18, 0x01	; 1
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	31 83       	std	Z+1, r19	; 0x01
     5aa:	20 83       	st	Z, r18
     5ac:	73 c0       	rjmp	.+230    	; 0x694 <LCDByte+0x602>
	else if (__tmp > 65535)
     5ae:	ce 01       	movw	r24, r28
     5b0:	8f 5b       	subi	r24, 0xBF	; 191
     5b2:	9f 4f       	sbci	r25, 0xFF	; 255
     5b4:	11 e0       	ldi	r17, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	60 81       	ld	r22, Z
     5ba:	71 81       	ldd	r23, Z+1	; 0x01
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	93 81       	ldd	r25, Z+3	; 0x03
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	4f e7       	ldi	r20, 0x7F	; 127
     5c6:	57 e4       	ldi	r21, 0x47	; 71
     5c8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <LCDByte+0x540>
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	11 23       	and	r17, r17
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <LCDByte+0x546>
     5d6:	4c c0       	rjmp	.+152    	; 0x670 <LCDByte+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d8:	ce 01       	movw	r24, r28
     5da:	cd 96       	adiw	r24, 0x3d	; 61
     5dc:	fc 01       	movw	r30, r24
     5de:	60 81       	ld	r22, Z
     5e0:	71 81       	ldd	r23, Z+1	; 0x01
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e2       	ldi	r20, 0x20	; 32
     5ec:	51 e4       	ldi	r21, 0x41	; 65
     5ee:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	8e 01       	movw	r16, r28
     5f8:	0b 5b       	subi	r16, 0xBB	; 187
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	bc 01       	movw	r22, r24
     5fe:	cd 01       	movw	r24, r26
     600:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	f8 01       	movw	r30, r16
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	80 83       	st	Z, r24
     60e:	27 c0       	rjmp	.+78     	; 0x65e <LCDByte+0x5cc>
     610:	ce 01       	movw	r24, r28
     612:	89 5b       	subi	r24, 0xB9	; 185
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	29 e1       	ldi	r18, 0x19	; 25
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	31 83       	std	Z+1, r19	; 0x01
     61e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     620:	ce 01       	movw	r24, r28
     622:	89 5b       	subi	r24, 0xB9	; 185
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	8c 01       	movw	r16, r24
     62e:	c8 01       	movw	r24, r16
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <LCDByte+0x59e>
     634:	8c 01       	movw	r16, r24
     636:	ce 01       	movw	r24, r28
     638:	89 5b       	subi	r24, 0xB9	; 185
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	fc 01       	movw	r30, r24
     63e:	11 83       	std	Z+1, r17	; 0x01
     640:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     642:	ce 01       	movw	r24, r28
     644:	8b 5b       	subi	r24, 0xBB	; 187
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	9e 01       	movw	r18, r28
     64a:	2b 5b       	subi	r18, 0xBB	; 187
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
     64e:	f9 01       	movw	r30, r18
     650:	20 81       	ld	r18, Z
     652:	31 81       	ldd	r19, Z+1	; 0x01
     654:	21 50       	subi	r18, 0x01	; 1
     656:	30 40       	sbci	r19, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	31 83       	std	Z+1, r19	; 0x01
     65c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65e:	ce 01       	movw	r24, r28
     660:	8b 5b       	subi	r24, 0xBB	; 187
     662:	9f 4f       	sbci	r25, 0xFF	; 255
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	89 f6       	brne	.-94     	; 0x610 <LCDByte+0x57e>
     66e:	4c c0       	rjmp	.+152    	; 0x708 <LCDByte+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     670:	8e 01       	movw	r16, r28
     672:	0b 5b       	subi	r16, 0xBB	; 187
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	ce 01       	movw	r24, r28
     678:	8f 5b       	subi	r24, 0xBF	; 191
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	fc 01       	movw	r30, r24
     67e:	60 81       	ld	r22, Z
     680:	71 81       	ldd	r23, Z+1	; 0x01
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	93 81       	ldd	r25, Z+3	; 0x03
     686:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	f8 01       	movw	r30, r16
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24
     694:	ce 01       	movw	r24, r28
     696:	87 5b       	subi	r24, 0xB7	; 183
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	9e 01       	movw	r18, r28
     69c:	2b 5b       	subi	r18, 0xBB	; 187
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	31 81       	ldd	r19, Z+1	; 0x01
     6a6:	fc 01       	movw	r30, r24
     6a8:	31 83       	std	Z+1, r19	; 0x01
     6aa:	20 83       	st	Z, r18
     6ac:	ce 01       	movw	r24, r28
     6ae:	87 5b       	subi	r24, 0xB7	; 183
     6b0:	9f 4f       	sbci	r25, 0xFF	; 255
     6b2:	fc 01       	movw	r30, r24
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	8c 01       	movw	r16, r24
     6ba:	c8 01       	movw	r24, r16
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <LCDByte+0x62a>
     6c0:	8c 01       	movw	r16, r24
     6c2:	ce 01       	movw	r24, r28
     6c4:	87 5b       	subi	r24, 0xB7	; 183
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	11 83       	std	Z+1, r17	; 0x01
     6cc:	00 83       	st	Z, r16
     6ce:	1c c0       	rjmp	.+56     	; 0x708 <LCDByte+0x676>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6d0:	68 ad       	ldd	r22, Y+56	; 0x38
     6d2:	79 ad       	ldd	r23, Y+57	; 0x39
     6d4:	8a ad       	ldd	r24, Y+58	; 0x3a
     6d6:	9b ad       	ldd	r25, Y+59	; 0x3b
     6d8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	8c af       	std	Y+60, r24	; 0x3c
     6e2:	ce 01       	movw	r24, r28
     6e4:	85 5b       	subi	r24, 0xB5	; 181
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6ee:	ce 01       	movw	r24, r28
     6f0:	85 5b       	subi	r24, 0xB5	; 181
     6f2:	9f 4f       	sbci	r25, 0xFF	; 255
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	18 2f       	mov	r17, r24
     6fa:	1a 95       	dec	r17
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCDByte+0x668>
     6fe:	ce 01       	movw	r24, r28
     700:	85 5b       	subi	r24, 0xB5	; 181
     702:	9f 4f       	sbci	r25, 0xFF	; 255
     704:	fc 01       	movw	r30, r24
     706:	10 83       	st	Z, r17

_delay_us(1);

//Send the lower nibble
SET_E();
     708:	88 e3       	ldi	r24, 0x38	; 56
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	28 e3       	ldi	r18, 0x38	; 56
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	20 61       	ori	r18, 0x10	; 16
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     71a:	88 e3       	ldi	r24, 0x38	; 56
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	98 2f       	mov	r25, r24
     724:	90 7f       	andi	r25, 0xF0	; 240
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	89 2b       	or	r24, r25
     72a:	8b 83       	std	Y+3, r24	; 0x03

LCD_DATA_PORT=temp;
     72c:	88 e3       	ldi	r24, 0x38	; 56
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2b 81       	ldd	r18, Y+3	; 0x03
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
     736:	9e 01       	movw	r18, r28
     738:	24 5b       	subi	r18, 0xB4	; 180
     73a:	3f 4f       	sbci	r19, 0xFF	; 255
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e8       	ldi	r26, 0x80	; 128
     742:	bf e3       	ldi	r27, 0x3F	; 63
     744:	f9 01       	movw	r30, r18
     746:	80 83       	st	Z, r24
     748:	91 83       	std	Z+1, r25	; 0x01
     74a:	a2 83       	std	Z+2, r26	; 0x02
     74c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     74e:	8e 01       	movw	r16, r28
     750:	00 5b       	subi	r16, 0xB0	; 176
     752:	1f 4f       	sbci	r17, 0xFF	; 255
     754:	ce 01       	movw	r24, r28
     756:	84 5b       	subi	r24, 0xB4	; 180
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	60 81       	ld	r22, Z
     75e:	71 81       	ldd	r23, Z+1	; 0x01
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	93 81       	ldd	r25, Z+3	; 0x03
     764:	2b ea       	ldi	r18, 0xAB	; 171
     766:	3a ea       	ldi	r19, 0xAA	; 170
     768:	4a ea       	ldi	r20, 0xAA	; 170
     76a:	5e e3       	ldi	r21, 0x3E	; 62
     76c:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	f8 01       	movw	r30, r16
     776:	80 83       	st	Z, r24
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	a2 83       	std	Z+2, r26	; 0x02
     77c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     77e:	ce 01       	movw	r24, r28
     780:	80 5b       	subi	r24, 0xB0	; 176
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	11 e0       	ldi	r17, 0x01	; 1
     786:	fc 01       	movw	r30, r24
     788:	60 81       	ld	r22, Z
     78a:	71 81       	ldd	r23, Z+1	; 0x01
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	93 81       	ldd	r25, Z+3	; 0x03
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	5f e3       	ldi	r21, 0x3F	; 63
     798:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     79c:	88 23       	and	r24, r24
     79e:	0c f0       	brlt	.+2      	; 0x7a2 <LCDByte+0x710>
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	11 23       	and	r17, r17
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <LCDByte+0x722>
		__ticks = 1;
     7a6:	ce 01       	movw	r24, r28
     7a8:	8c 5a       	subi	r24, 0xAC	; 172
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
     7b2:	05 c1       	rjmp	.+522    	; 0x9be <__stack+0x15f>
	else if (__tmp > 255)
     7b4:	ce 01       	movw	r24, r28
     7b6:	80 5b       	subi	r24, 0xB0	; 176
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	fc 01       	movw	r30, r24
     7be:	60 81       	ld	r22, Z
     7c0:	71 81       	ldd	r23, Z+1	; 0x01
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	93 81       	ldd	r25, Z+3	; 0x03
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	4f e7       	ldi	r20, 0x7F	; 127
     7cc:	53 e4       	ldi	r21, 0x43	; 67
     7ce:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	0c f0       	brlt	.+2      	; 0x7d8 <LCDByte+0x746>
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	11 23       	and	r17, r17
     7da:	09 f4       	brne	.+2      	; 0x7de <LCDByte+0x74c>
     7dc:	df c0       	rjmp	.+446    	; 0x99c <__stack+0x13d>
	{
		_delay_ms(__us / 1000.0);
     7de:	ce 01       	movw	r24, r28
     7e0:	84 5b       	subi	r24, 0xB4	; 180
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	fc 01       	movw	r30, r24
     7e6:	60 81       	ld	r22, Z
     7e8:	71 81       	ldd	r23, Z+1	; 0x01
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	93 81       	ldd	r25, Z+3	; 0x03
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4a e7       	ldi	r20, 0x7A	; 122
     7f4:	54 e4       	ldi	r21, 0x44	; 68
     7f6:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	9e 01       	movw	r18, r28
     800:	2b 5a       	subi	r18, 0xAB	; 171
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	f9 01       	movw	r30, r18
     806:	80 83       	st	Z, r24
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	a2 83       	std	Z+2, r26	; 0x02
     80c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     80e:	8e 01       	movw	r16, r28
     810:	07 5a       	subi	r16, 0xA7	; 167
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	ce 01       	movw	r24, r28
     816:	8b 5a       	subi	r24, 0xAB	; 171
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	fc 01       	movw	r30, r24
     81c:	60 81       	ld	r22, Z
     81e:	71 81       	ldd	r23, Z+1	; 0x01
     820:	82 81       	ldd	r24, Z+2	; 0x02
     822:	93 81       	ldd	r25, Z+3	; 0x03
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	4a e7       	ldi	r20, 0x7A	; 122
     82a:	53 e4       	ldi	r21, 0x43	; 67
     82c:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	f8 01       	movw	r30, r16
     836:	80 83       	st	Z, r24
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	a2 83       	std	Z+2, r26	; 0x02
     83c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     83e:	ce 01       	movw	r24, r28
     840:	87 5a       	subi	r24, 0xA7	; 167
     842:	9f 4f       	sbci	r25, 0xFF	; 255
     844:	11 e0       	ldi	r17, 0x01	; 1
     846:	fc 01       	movw	r30, r24
     848:	60 81       	ld	r22, Z
     84a:	71 81       	ldd	r23, Z+1	; 0x01
     84c:	82 81       	ldd	r24, Z+2	; 0x02
     84e:	93 81       	ldd	r25, Z+3	; 0x03
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     85c:	88 23       	and	r24, r24
     85e:	0c f0       	brlt	.+2      	; 0x862 <__stack+0x3>
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	11 23       	and	r17, r17
     864:	49 f0       	breq	.+18     	; 0x878 <__stack+0x19>
		__ticks = 1;
     866:	ce 01       	movw	r24, r28
     868:	83 5a       	subi	r24, 0xA3	; 163
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	31 83       	std	Z+1, r19	; 0x01
     874:	20 83       	st	Z, r18
     876:	74 c0       	rjmp	.+232    	; 0x960 <__stack+0x101>
	else if (__tmp > 65535)
     878:	ce 01       	movw	r24, r28
     87a:	87 5a       	subi	r24, 0xA7	; 167
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	11 e0       	ldi	r17, 0x01	; 1
     880:	fc 01       	movw	r30, r24
     882:	60 81       	ld	r22, Z
     884:	71 81       	ldd	r23, Z+1	; 0x01
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	93 81       	ldd	r25, Z+3	; 0x03
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	3f ef       	ldi	r19, 0xFF	; 255
     88e:	4f e7       	ldi	r20, 0x7F	; 127
     890:	57 e4       	ldi	r21, 0x47	; 71
     892:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     896:	18 16       	cp	r1, r24
     898:	0c f0       	brlt	.+2      	; 0x89c <__stack+0x3d>
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	11 23       	and	r17, r17
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	4d c0       	rjmp	.+154    	; 0x93c <__stack+0xdd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a2:	ce 01       	movw	r24, r28
     8a4:	8b 5a       	subi	r24, 0xAB	; 171
     8a6:	9f 4f       	sbci	r25, 0xFF	; 255
     8a8:	fc 01       	movw	r30, r24
     8aa:	60 81       	ld	r22, Z
     8ac:	71 81       	ldd	r23, Z+1	; 0x01
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	93 81       	ldd	r25, Z+3	; 0x03
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	8e 01       	movw	r16, r28
     8c4:	03 5a       	subi	r16, 0xA3	; 163
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	f8 01       	movw	r30, r16
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	80 83       	st	Z, r24
     8da:	27 c0       	rjmp	.+78     	; 0x92a <__stack+0xcb>
     8dc:	ce 01       	movw	r24, r28
     8de:	81 5a       	subi	r24, 0xA1	; 161
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	29 e1       	ldi	r18, 0x19	; 25
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	fc 01       	movw	r30, r24
     8e8:	31 83       	std	Z+1, r19	; 0x01
     8ea:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ec:	ce 01       	movw	r24, r28
     8ee:	81 5a       	subi	r24, 0xA1	; 161
     8f0:	9f 4f       	sbci	r25, 0xFF	; 255
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	8c 01       	movw	r16, r24
     8fa:	c8 01       	movw	r24, r16
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <__stack+0x9d>
     900:	8c 01       	movw	r16, r24
     902:	ce 01       	movw	r24, r28
     904:	81 5a       	subi	r24, 0xA1	; 161
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	fc 01       	movw	r30, r24
     90a:	11 83       	std	Z+1, r17	; 0x01
     90c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90e:	ce 01       	movw	r24, r28
     910:	83 5a       	subi	r24, 0xA3	; 163
     912:	9f 4f       	sbci	r25, 0xFF	; 255
     914:	9e 01       	movw	r18, r28
     916:	23 5a       	subi	r18, 0xA3	; 163
     918:	3f 4f       	sbci	r19, 0xFF	; 255
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	31 81       	ldd	r19, Z+1	; 0x01
     920:	21 50       	subi	r18, 0x01	; 1
     922:	30 40       	sbci	r19, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92a:	ce 01       	movw	r24, r28
     92c:	83 5a       	subi	r24, 0xA3	; 163
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	89 f6       	brne	.-94     	; 0x8dc <__stack+0x7d>
     93a:	58 c0       	rjmp	.+176    	; 0x9ec <__stack+0x18d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93c:	8e 01       	movw	r16, r28
     93e:	03 5a       	subi	r16, 0xA3	; 163
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	ce 01       	movw	r24, r28
     944:	87 5a       	subi	r24, 0xA7	; 167
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	fc 01       	movw	r30, r24
     94a:	60 81       	ld	r22, Z
     94c:	71 81       	ldd	r23, Z+1	; 0x01
     94e:	82 81       	ldd	r24, Z+2	; 0x02
     950:	93 81       	ldd	r25, Z+3	; 0x03
     952:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	f8 01       	movw	r30, r16
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
     960:	ce 01       	movw	r24, r28
     962:	8f 59       	subi	r24, 0x9F	; 159
     964:	9f 4f       	sbci	r25, 0xFF	; 255
     966:	9e 01       	movw	r18, r28
     968:	23 5a       	subi	r18, 0xA3	; 163
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	f9 01       	movw	r30, r18
     96e:	20 81       	ld	r18, Z
     970:	31 81       	ldd	r19, Z+1	; 0x01
     972:	fc 01       	movw	r30, r24
     974:	31 83       	std	Z+1, r19	; 0x01
     976:	20 83       	st	Z, r18
     978:	ce 01       	movw	r24, r28
     97a:	8f 59       	subi	r24, 0x9F	; 159
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	8c 01       	movw	r16, r24
     986:	c8 01       	movw	r24, r16
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <__stack+0x129>
     98c:	8c 01       	movw	r16, r24
     98e:	ce 01       	movw	r24, r28
     990:	8f 59       	subi	r24, 0x9F	; 159
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	11 83       	std	Z+1, r17	; 0x01
     998:	00 83       	st	Z, r16
     99a:	28 c0       	rjmp	.+80     	; 0x9ec <__stack+0x18d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     99c:	8e 01       	movw	r16, r28
     99e:	0c 5a       	subi	r16, 0xAC	; 172
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	ce 01       	movw	r24, r28
     9a4:	80 5b       	subi	r24, 0xB0	; 176
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	fc 01       	movw	r30, r24
     9aa:	60 81       	ld	r22, Z
     9ac:	71 81       	ldd	r23, Z+1	; 0x01
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	93 81       	ldd	r25, Z+3	; 0x03
     9b2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 83       	st	Z, r24
     9be:	ce 01       	movw	r24, r28
     9c0:	8d 59       	subi	r24, 0x9D	; 157
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	9e 01       	movw	r18, r28
     9c6:	2c 5a       	subi	r18, 0xAC	; 172
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9d2:	ce 01       	movw	r24, r28
     9d4:	8d 59       	subi	r24, 0x9D	; 157
     9d6:	9f 4f       	sbci	r25, 0xFF	; 255
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	18 2f       	mov	r17, r24
     9de:	1a 95       	dec	r17
     9e0:	f1 f7       	brne	.-4      	; 0x9de <__stack+0x17f>
     9e2:	ce 01       	movw	r24, r28
     9e4:	8d 59       	subi	r24, 0x9D	; 157
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	fc 01       	movw	r30, r24
     9ea:	10 83       	st	Z, r17

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     9ec:	88 e3       	ldi	r24, 0x38	; 56
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	28 e3       	ldi	r18, 0x38	; 56
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	2f 7e       	andi	r18, 0xEF	; 239
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	9e 01       	movw	r18, r28
     a00:	2c 59       	subi	r18, 0x9C	; 156
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e8       	ldi	r26, 0x80	; 128
     a0a:	bf e3       	ldi	r27, 0x3F	; 63
     a0c:	f9 01       	movw	r30, r18
     a0e:	80 83       	st	Z, r24
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	a2 83       	std	Z+2, r26	; 0x02
     a14:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     a16:	8e 01       	movw	r16, r28
     a18:	08 59       	subi	r16, 0x98	; 152
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	8c 59       	subi	r24, 0x9C	; 156
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	2b ea       	ldi	r18, 0xAB	; 171
     a2e:	3a ea       	ldi	r19, 0xAA	; 170
     a30:	4a ea       	ldi	r20, 0xAA	; 170
     a32:	5e e3       	ldi	r21, 0x3E	; 62
     a34:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	f8 01       	movw	r30, r16
     a3e:	80 83       	st	Z, r24
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	a2 83       	std	Z+2, r26	; 0x02
     a44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a46:	ce 01       	movw	r24, r28
     a48:	88 59       	subi	r24, 0x98	; 152
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	11 e0       	ldi	r17, 0x01	; 1
     a4e:	fc 01       	movw	r30, r24
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e8       	ldi	r20, 0x80	; 128
     a5e:	5f e3       	ldi	r21, 0x3F	; 63
     a60:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     a64:	88 23       	and	r24, r24
     a66:	0c f0       	brlt	.+2      	; 0xa6a <__stack+0x20b>
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	11 23       	and	r17, r17
     a6c:	39 f0       	breq	.+14     	; 0xa7c <__stack+0x21d>
		__ticks = 1;
     a6e:	ce 01       	movw	r24, r28
     a70:	84 59       	subi	r24, 0x94	; 148
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	05 c1       	rjmp	.+522    	; 0xc86 <__stack+0x427>
	else if (__tmp > 255)
     a7c:	ce 01       	movw	r24, r28
     a7e:	88 59       	subi	r24, 0x98	; 152
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	11 e0       	ldi	r17, 0x01	; 1
     a84:	fc 01       	movw	r30, r24
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	4f e7       	ldi	r20, 0x7F	; 127
     a94:	53 e4       	ldi	r21, 0x43	; 67
     a96:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     a9a:	18 16       	cp	r1, r24
     a9c:	0c f0       	brlt	.+2      	; 0xaa0 <__stack+0x241>
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	11 23       	and	r17, r17
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <__stack+0x247>
     aa4:	df c0       	rjmp	.+446    	; 0xc64 <__stack+0x405>
	{
		_delay_ms(__us / 1000.0);
     aa6:	ce 01       	movw	r24, r28
     aa8:	8c 59       	subi	r24, 0x9C	; 156
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	fc 01       	movw	r30, r24
     aae:	60 81       	ld	r22, Z
     ab0:	71 81       	ldd	r23, Z+1	; 0x01
     ab2:	82 81       	ldd	r24, Z+2	; 0x02
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	4a e7       	ldi	r20, 0x7A	; 122
     abc:	54 e4       	ldi	r21, 0x44	; 68
     abe:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	9e 01       	movw	r18, r28
     ac8:	23 59       	subi	r18, 0x93	; 147
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	f9 01       	movw	r30, r18
     ace:	80 83       	st	Z, r24
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	a2 83       	std	Z+2, r26	; 0x02
     ad4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ad6:	8e 01       	movw	r16, r28
     ad8:	0f 58       	subi	r16, 0x8F	; 143
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	ce 01       	movw	r24, r28
     ade:	83 59       	subi	r24, 0x93	; 147
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	fc 01       	movw	r30, r24
     ae4:	60 81       	ld	r22, Z
     ae6:	71 81       	ldd	r23, Z+1	; 0x01
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	93 81       	ldd	r25, Z+3	; 0x03
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	4a e7       	ldi	r20, 0x7A	; 122
     af2:	53 e4       	ldi	r21, 0x43	; 67
     af4:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	f8 01       	movw	r30, r16
     afe:	80 83       	st	Z, r24
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	a2 83       	std	Z+2, r26	; 0x02
     b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b06:	ce 01       	movw	r24, r28
     b08:	8f 58       	subi	r24, 0x8F	; 143
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	11 e0       	ldi	r17, 0x01	; 1
     b0e:	fc 01       	movw	r30, r24
     b10:	60 81       	ld	r22, Z
     b12:	71 81       	ldd	r23, Z+1	; 0x01
     b14:	82 81       	ldd	r24, Z+2	; 0x02
     b16:	93 81       	ldd	r25, Z+3	; 0x03
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     b24:	88 23       	and	r24, r24
     b26:	0c f0       	brlt	.+2      	; 0xb2a <__stack+0x2cb>
     b28:	10 e0       	ldi	r17, 0x00	; 0
     b2a:	11 23       	and	r17, r17
     b2c:	49 f0       	breq	.+18     	; 0xb40 <__stack+0x2e1>
		__ticks = 1;
     b2e:	ce 01       	movw	r24, r28
     b30:	8b 58       	subi	r24, 0x8B	; 139
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	31 83       	std	Z+1, r19	; 0x01
     b3c:	20 83       	st	Z, r18
     b3e:	74 c0       	rjmp	.+232    	; 0xc28 <__stack+0x3c9>
	else if (__tmp > 65535)
     b40:	ce 01       	movw	r24, r28
     b42:	8f 58       	subi	r24, 0x8F	; 143
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	11 e0       	ldi	r17, 0x01	; 1
     b48:	fc 01       	movw	r30, r24
     b4a:	60 81       	ld	r22, Z
     b4c:	71 81       	ldd	r23, Z+1	; 0x01
     b4e:	82 81       	ldd	r24, Z+2	; 0x02
     b50:	93 81       	ldd	r25, Z+3	; 0x03
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	3f ef       	ldi	r19, 0xFF	; 255
     b56:	4f e7       	ldi	r20, 0x7F	; 127
     b58:	57 e4       	ldi	r21, 0x47	; 71
     b5a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     b5e:	18 16       	cp	r1, r24
     b60:	0c f0       	brlt	.+2      	; 0xb64 <__stack+0x305>
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	11 23       	and	r17, r17
     b66:	09 f4       	brne	.+2      	; 0xb6a <__stack+0x30b>
     b68:	4d c0       	rjmp	.+154    	; 0xc04 <__stack+0x3a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6a:	ce 01       	movw	r24, r28
     b6c:	83 59       	subi	r24, 0x93	; 147
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	fc 01       	movw	r30, r24
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e2       	ldi	r20, 0x20	; 32
     b80:	51 e4       	ldi	r21, 0x41	; 65
     b82:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	8e 01       	movw	r16, r28
     b8c:	0b 58       	subi	r16, 0x8B	; 139
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	f8 01       	movw	r30, r16
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	27 c0       	rjmp	.+78     	; 0xbf2 <__stack+0x393>
     ba4:	ce 01       	movw	r24, r28
     ba6:	89 58       	subi	r24, 0x89	; 137
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	29 e1       	ldi	r18, 0x19	; 25
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bb4:	ce 01       	movw	r24, r28
     bb6:	89 58       	subi	r24, 0x89	; 137
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	8c 01       	movw	r16, r24
     bc2:	c8 01       	movw	r24, r16
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <__stack+0x365>
     bc8:	8c 01       	movw	r16, r24
     bca:	ce 01       	movw	r24, r28
     bcc:	89 58       	subi	r24, 0x89	; 137
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	fc 01       	movw	r30, r24
     bd2:	11 83       	std	Z+1, r17	; 0x01
     bd4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd6:	ce 01       	movw	r24, r28
     bd8:	8b 58       	subi	r24, 0x8B	; 139
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	9e 01       	movw	r18, r28
     bde:	2b 58       	subi	r18, 0x8B	; 139
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	31 81       	ldd	r19, Z+1	; 0x01
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	30 40       	sbci	r19, 0x00	; 0
     bec:	fc 01       	movw	r30, r24
     bee:	31 83       	std	Z+1, r19	; 0x01
     bf0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf2:	ce 01       	movw	r24, r28
     bf4:	8b 58       	subi	r24, 0x8B	; 139
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	fc 01       	movw	r30, r24
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	89 f6       	brne	.-94     	; 0xba4 <__stack+0x345>
     c02:	58 c0       	rjmp	.+176    	; 0xcb4 <__stack+0x455>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c04:	8e 01       	movw	r16, r28
     c06:	0b 58       	subi	r16, 0x8B	; 139
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	ce 01       	movw	r24, r28
     c0c:	8f 58       	subi	r24, 0x8F	; 143
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
     c1a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	f8 01       	movw	r30, r16
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	80 83       	st	Z, r24
     c28:	ce 01       	movw	r24, r28
     c2a:	87 58       	subi	r24, 0x87	; 135
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	9e 01       	movw	r18, r28
     c30:	2b 58       	subi	r18, 0x8B	; 139
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	31 81       	ldd	r19, Z+1	; 0x01
     c3a:	fc 01       	movw	r30, r24
     c3c:	31 83       	std	Z+1, r19	; 0x01
     c3e:	20 83       	st	Z, r18
     c40:	ce 01       	movw	r24, r28
     c42:	87 58       	subi	r24, 0x87	; 135
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	8c 01       	movw	r16, r24
     c4e:	c8 01       	movw	r24, r16
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <__stack+0x3f1>
     c54:	8c 01       	movw	r16, r24
     c56:	ce 01       	movw	r24, r28
     c58:	87 58       	subi	r24, 0x87	; 135
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	fc 01       	movw	r30, r24
     c5e:	11 83       	std	Z+1, r17	; 0x01
     c60:	00 83       	st	Z, r16
     c62:	28 c0       	rjmp	.+80     	; 0xcb4 <__stack+0x455>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c64:	8e 01       	movw	r16, r28
     c66:	04 59       	subi	r16, 0x94	; 148
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	ce 01       	movw	r24, r28
     c6c:	88 59       	subi	r24, 0x98	; 152
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	fc 01       	movw	r30, r24
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	f8 01       	movw	r30, r16
     c84:	80 83       	st	Z, r24
     c86:	ce 01       	movw	r24, r28
     c88:	85 58       	subi	r24, 0x85	; 133
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	9e 01       	movw	r18, r28
     c8e:	24 59       	subi	r18, 0x94	; 148
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c9a:	ce 01       	movw	r24, r28
     c9c:	85 58       	subi	r24, 0x85	; 133
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	18 2f       	mov	r17, r24
     ca6:	1a 95       	dec	r17
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <__stack+0x447>
     caa:	ce 01       	movw	r24, r28
     cac:	85 58       	subi	r24, 0x85	; 133
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	fc 01       	movw	r30, r24
     cb2:	10 83       	st	Z, r17

_delay_us(1);			//tEL

LCDBusyLoop();
     cb4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <LCDBusyLoop>
}
     cb8:	c3 58       	subi	r28, 0x83	; 131
     cba:	df 4f       	sbci	r29, 0xFF	; 255
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <LCDBusyLoop>:

void LCDBusyLoop()
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	cb 5a       	subi	r28, 0xAB	; 171
     cde:	d0 40       	sbci	r29, 0x00	; 0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
     cea:	19 82       	std	Y+1, r1	; 0x01

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     cec:	87 e3       	ldi	r24, 0x37	; 55
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	27 e3       	ldi	r18, 0x37	; 55
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	20 7f       	andi	r18, 0xF0	; 240
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18

	//change LCD mode
	SET_RW();		//Read mode
     cfe:	82 e3       	ldi	r24, 0x32	; 50
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	22 e3       	ldi	r18, 0x32	; 50
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	f9 01       	movw	r30, r18
     d08:	20 81       	ld	r18, Z
     d0a:	20 64       	ori	r18, 0x40	; 64
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
	CLEAR_RS();		//Read status
     d10:	82 e3       	ldi	r24, 0x32	; 50
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	22 e3       	ldi	r18, 0x32	; 50
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	20 81       	ld	r18, Z
     d1c:	27 7f       	andi	r18, 0xF7	; 247
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	bf e3       	ldi	r27, 0x3F	; 63
     d2a:	8c 83       	std	Y+4, r24	; 0x04
     d2c:	9d 83       	std	Y+5, r25	; 0x05
     d2e:	ae 83       	std	Y+6, r26	; 0x06
     d30:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     d32:	6c 81       	ldd	r22, Y+4	; 0x04
     d34:	7d 81       	ldd	r23, Y+5	; 0x05
     d36:	8e 81       	ldd	r24, Y+6	; 0x06
     d38:	9f 81       	ldd	r25, Y+7	; 0x07
     d3a:	2b ea       	ldi	r18, 0xAB	; 171
     d3c:	3a ea       	ldi	r19, 0xAA	; 170
     d3e:	4a ea       	ldi	r20, 0xAA	; 170
     d40:	5e e3       	ldi	r21, 0x3E	; 62
     d42:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	88 87       	std	Y+8, r24	; 0x08
     d4c:	99 87       	std	Y+9, r25	; 0x09
     d4e:	aa 87       	std	Y+10, r26	; 0x0a
     d50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d52:	11 e0       	ldi	r17, 0x01	; 1
     d54:	68 85       	ldd	r22, Y+8	; 0x08
     d56:	79 85       	ldd	r23, Y+9	; 0x09
     d58:	8a 85       	ldd	r24, Y+10	; 0x0a
     d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     d68:	88 23       	and	r24, r24
     d6a:	0c f0       	brlt	.+2      	; 0xd6e <LCDBusyLoop+0x9e>
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	11 23       	and	r17, r17
     d70:	19 f0       	breq	.+6      	; 0xd78 <LCDBusyLoop+0xa8>
		__ticks = 1;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	8c 87       	std	Y+12, r24	; 0x0c
     d76:	a3 c0       	rjmp	.+326    	; 0xebe <LCDBusyLoop+0x1ee>
	else if (__tmp > 255)
     d78:	11 e0       	ldi	r17, 0x01	; 1
     d7a:	68 85       	ldd	r22, Y+8	; 0x08
     d7c:	79 85       	ldd	r23, Y+9	; 0x09
     d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d80:	9b 85       	ldd	r25, Y+11	; 0x0b
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	53 e4       	ldi	r21, 0x43	; 67
     d8a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	0c f0       	brlt	.+2      	; 0xd94 <LCDBusyLoop+0xc4>
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	11 23       	and	r17, r17
     d96:	09 f4       	brne	.+2      	; 0xd9a <LCDBusyLoop+0xca>
     d98:	89 c0       	rjmp	.+274    	; 0xeac <LCDBusyLoop+0x1dc>
	{
		_delay_ms(__us / 1000.0);
     d9a:	6c 81       	ldd	r22, Y+4	; 0x04
     d9c:	7d 81       	ldd	r23, Y+5	; 0x05
     d9e:	8e 81       	ldd	r24, Y+6	; 0x06
     da0:	9f 81       	ldd	r25, Y+7	; 0x07
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a e7       	ldi	r20, 0x7A	; 122
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8d 87       	std	Y+13, r24	; 0x0d
     db4:	9e 87       	std	Y+14, r25	; 0x0e
     db6:	af 87       	std	Y+15, r26	; 0x0f
     db8:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d 85       	ldd	r22, Y+13	; 0x0d
     dbc:	7e 85       	ldd	r23, Y+14	; 0x0e
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	98 89       	ldd	r25, Y+16	; 0x10
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a e7       	ldi	r20, 0x7A	; 122
     dc8:	53 e4       	ldi	r21, 0x43	; 67
     dca:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 8b       	std	Y+17, r24	; 0x11
     dd4:	9a 8b       	std	Y+18, r25	; 0x12
     dd6:	ab 8b       	std	Y+19, r26	; 0x13
     dd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     dda:	11 e0       	ldi	r17, 0x01	; 1
     ddc:	69 89       	ldd	r22, Y+17	; 0x11
     dde:	7a 89       	ldd	r23, Y+18	; 0x12
     de0:	8b 89       	ldd	r24, Y+19	; 0x13
     de2:	9c 89       	ldd	r25, Y+20	; 0x14
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <LCDBusyLoop+0x126>
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	11 23       	and	r17, r17
     df8:	29 f0       	breq	.+10     	; 0xe04 <LCDBusyLoop+0x134>
		__ticks = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9e 8b       	std	Y+22, r25	; 0x16
     e00:	8d 8b       	std	Y+21, r24	; 0x15
     e02:	46 c0       	rjmp	.+140    	; 0xe90 <LCDBusyLoop+0x1c0>
	else if (__tmp > 65535)
     e04:	11 e0       	ldi	r17, 0x01	; 1
     e06:	69 89       	ldd	r22, Y+17	; 0x11
     e08:	7a 89       	ldd	r23, Y+18	; 0x12
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	0c f0       	brlt	.+2      	; 0xe20 <LCDBusyLoop+0x150>
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	11 23       	and	r17, r17
     e22:	61 f1       	breq	.+88     	; 0xe7c <LCDBusyLoop+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	6d 85       	ldd	r22, Y+13	; 0x0d
     e26:	7e 85       	ldd	r23, Y+14	; 0x0e
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	98 89       	ldd	r25, Y+16	; 0x10
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 8b       	std	Y+22, r25	; 0x16
     e4a:	8d 8b       	std	Y+21, r24	; 0x15
     e4c:	12 c0       	rjmp	.+36     	; 0xe72 <LCDBusyLoop+0x1a2>
     e4e:	89 e1       	ldi	r24, 0x19	; 25
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	98 8f       	std	Y+24, r25	; 0x18
     e54:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e56:	8f 89       	ldd	r24, Y+23	; 0x17
     e58:	98 8d       	ldd	r25, Y+24	; 0x18
     e5a:	8c 01       	movw	r16, r24
     e5c:	c8 01       	movw	r24, r16
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <LCDBusyLoop+0x18e>
     e62:	8c 01       	movw	r16, r24
     e64:	18 8f       	std	Y+24, r17	; 0x18
     e66:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e68:	8d 89       	ldd	r24, Y+21	; 0x15
     e6a:	9e 89       	ldd	r25, Y+22	; 0x16
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	9e 8b       	std	Y+22, r25	; 0x16
     e70:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e72:	8d 89       	ldd	r24, Y+21	; 0x15
     e74:	9e 89       	ldd	r25, Y+22	; 0x16
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	51 f7       	brne	.-44     	; 0xe4e <LCDBusyLoop+0x17e>
     e7a:	28 c0       	rjmp	.+80     	; 0xecc <LCDBusyLoop+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7c:	69 89       	ldd	r22, Y+17	; 0x11
     e7e:	7a 89       	ldd	r23, Y+18	; 0x12
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	9c 89       	ldd	r25, Y+20	; 0x14
     e84:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	9e 8b       	std	Y+22, r25	; 0x16
     e8e:	8d 8b       	std	Y+21, r24	; 0x15
     e90:	8d 89       	ldd	r24, Y+21	; 0x15
     e92:	9e 89       	ldd	r25, Y+22	; 0x16
     e94:	9a 8f       	std	Y+26, r25	; 0x1a
     e96:	89 8f       	std	Y+25, r24	; 0x19
     e98:	89 8d       	ldd	r24, Y+25	; 0x19
     e9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e9c:	8c 01       	movw	r16, r24
     e9e:	f8 01       	movw	r30, r16
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <LCDBusyLoop+0x1d0>
     ea4:	8f 01       	movw	r16, r30
     ea6:	1a 8f       	std	Y+26, r17	; 0x1a
     ea8:	09 8f       	std	Y+25, r16	; 0x19
     eaa:	10 c0       	rjmp	.+32     	; 0xecc <LCDBusyLoop+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     eac:	68 85       	ldd	r22, Y+8	; 0x08
     eae:	79 85       	ldd	r23, Y+9	; 0x09
     eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	8c 87       	std	Y+12, r24	; 0x0c
     ebe:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec0:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec4:	18 2f       	mov	r17, r24
     ec6:	1a 95       	dec	r17
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <LCDBusyLoop+0x1f6>
     eca:	1b 8f       	std	Y+27, r17	; 0x1b

	
	do
	{

		SET_E();
     ecc:	88 e3       	ldi	r24, 0x38	; 56
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	28 e3       	ldi	r18, 0x38	; 56
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	f9 01       	movw	r30, r18
     ed6:	20 81       	ld	r18, Z
     ed8:	20 61       	ori	r18, 0x10	; 16
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	bf e3       	ldi	r27, 0x3F	; 63
     ee6:	8c 8f       	std	Y+28, r24	; 0x1c
     ee8:	9d 8f       	std	Y+29, r25	; 0x1d
     eea:	ae 8f       	std	Y+30, r26	; 0x1e
     eec:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     eee:	6c 8d       	ldd	r22, Y+28	; 0x1c
     ef0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     ef2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ef4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ef6:	2b ea       	ldi	r18, 0xAB	; 171
     ef8:	3a ea       	ldi	r19, 0xAA	; 170
     efa:	4a ea       	ldi	r20, 0xAA	; 170
     efc:	5e e3       	ldi	r21, 0x3E	; 62
     efe:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	88 a3       	std	Y+32, r24	; 0x20
     f08:	99 a3       	std	Y+33, r25	; 0x21
     f0a:	aa a3       	std	Y+34, r26	; 0x22
     f0c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f0e:	11 e0       	ldi	r17, 0x01	; 1
     f10:	68 a1       	ldd	r22, Y+32	; 0x20
     f12:	79 a1       	ldd	r23, Y+33	; 0x21
     f14:	8a a1       	ldd	r24, Y+34	; 0x22
     f16:	9b a1       	ldd	r25, Y+35	; 0x23
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     f24:	88 23       	and	r24, r24
     f26:	0c f0       	brlt	.+2      	; 0xf2a <LCDBusyLoop+0x25a>
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	11 23       	and	r17, r17
     f2c:	19 f0       	breq	.+6      	; 0xf34 <LCDBusyLoop+0x264>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	8c a3       	std	Y+36, r24	; 0x24
     f32:	a3 c0       	rjmp	.+326    	; 0x107a <LCDBusyLoop+0x3aa>
	else if (__tmp > 255)
     f34:	11 e0       	ldi	r17, 0x01	; 1
     f36:	68 a1       	ldd	r22, Y+32	; 0x20
     f38:	79 a1       	ldd	r23, Y+33	; 0x21
     f3a:	8a a1       	ldd	r24, Y+34	; 0x22
     f3c:	9b a1       	ldd	r25, Y+35	; 0x23
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	53 e4       	ldi	r21, 0x43	; 67
     f46:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	0c f0       	brlt	.+2      	; 0xf50 <LCDBusyLoop+0x280>
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	11 23       	and	r17, r17
     f52:	09 f4       	brne	.+2      	; 0xf56 <LCDBusyLoop+0x286>
     f54:	89 c0       	rjmp	.+274    	; 0x1068 <LCDBusyLoop+0x398>
	{
		_delay_ms(__us / 1000.0);
     f56:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f58:	7d 8d       	ldd	r23, Y+29	; 0x1d
     f5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a e7       	ldi	r20, 0x7A	; 122
     f64:	54 e4       	ldi	r21, 0x44	; 68
     f66:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	8d a3       	std	Y+37, r24	; 0x25
     f70:	9e a3       	std	Y+38, r25	; 0x26
     f72:	af a3       	std	Y+39, r26	; 0x27
     f74:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6d a1       	ldd	r22, Y+37	; 0x25
     f78:	7e a1       	ldd	r23, Y+38	; 0x26
     f7a:	8f a1       	ldd	r24, Y+39	; 0x27
     f7c:	98 a5       	ldd	r25, Y+40	; 0x28
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a e7       	ldi	r20, 0x7A	; 122
     f84:	53 e4       	ldi	r21, 0x43	; 67
     f86:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	89 a7       	std	Y+41, r24	; 0x29
     f90:	9a a7       	std	Y+42, r25	; 0x2a
     f92:	ab a7       	std	Y+43, r26	; 0x2b
     f94:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f96:	11 e0       	ldi	r17, 0x01	; 1
     f98:	69 a5       	ldd	r22, Y+41	; 0x29
     f9a:	7a a5       	ldd	r23, Y+42	; 0x2a
     f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <LCDBusyLoop+0x2e2>
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	11 23       	and	r17, r17
     fb4:	29 f0       	breq	.+10     	; 0xfc0 <LCDBusyLoop+0x2f0>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9e a7       	std	Y+46, r25	; 0x2e
     fbc:	8d a7       	std	Y+45, r24	; 0x2d
     fbe:	46 c0       	rjmp	.+140    	; 0x104c <LCDBusyLoop+0x37c>
	else if (__tmp > 65535)
     fc0:	11 e0       	ldi	r17, 0x01	; 1
     fc2:	69 a5       	ldd	r22, Y+41	; 0x29
     fc4:	7a a5       	ldd	r23, Y+42	; 0x2a
     fc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	0c f0       	brlt	.+2      	; 0xfdc <LCDBusyLoop+0x30c>
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	11 23       	and	r17, r17
     fde:	61 f1       	breq	.+88     	; 0x1038 <LCDBusyLoop+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	6d a1       	ldd	r22, Y+37	; 0x25
     fe2:	7e a1       	ldd	r23, Y+38	; 0x26
     fe4:	8f a1       	ldd	r24, Y+39	; 0x27
     fe6:	98 a5       	ldd	r25, Y+40	; 0x28
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e a7       	std	Y+46, r25	; 0x2e
    1006:	8d a7       	std	Y+45, r24	; 0x2d
    1008:	12 c0       	rjmp	.+36     	; 0x102e <LCDBusyLoop+0x35e>
    100a:	89 e1       	ldi	r24, 0x19	; 25
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	98 ab       	std	Y+48, r25	; 0x30
    1010:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1012:	8f a5       	ldd	r24, Y+47	; 0x2f
    1014:	98 a9       	ldd	r25, Y+48	; 0x30
    1016:	8c 01       	movw	r16, r24
    1018:	c8 01       	movw	r24, r16
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCDBusyLoop+0x34a>
    101e:	8c 01       	movw	r16, r24
    1020:	18 ab       	std	Y+48, r17	; 0x30
    1022:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1024:	8d a5       	ldd	r24, Y+45	; 0x2d
    1026:	9e a5       	ldd	r25, Y+46	; 0x2e
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9e a7       	std	Y+46, r25	; 0x2e
    102c:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1030:	9e a5       	ldd	r25, Y+46	; 0x2e
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	51 f7       	brne	.-44     	; 0x100a <LCDBusyLoop+0x33a>
    1036:	28 c0       	rjmp	.+80     	; 0x1088 <LCDBusyLoop+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1038:	69 a5       	ldd	r22, Y+41	; 0x29
    103a:	7a a5       	ldd	r23, Y+42	; 0x2a
    103c:	8b a5       	ldd	r24, Y+43	; 0x2b
    103e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1040:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e a7       	std	Y+46, r25	; 0x2e
    104a:	8d a7       	std	Y+45, r24	; 0x2d
    104c:	8d a5       	ldd	r24, Y+45	; 0x2d
    104e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1050:	9a ab       	std	Y+50, r25	; 0x32
    1052:	89 ab       	std	Y+49, r24	; 0x31
    1054:	89 a9       	ldd	r24, Y+49	; 0x31
    1056:	9a a9       	ldd	r25, Y+50	; 0x32
    1058:	8c 01       	movw	r16, r24
    105a:	f8 01       	movw	r30, r16
    105c:	31 97       	sbiw	r30, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <LCDBusyLoop+0x38c>
    1060:	8f 01       	movw	r16, r30
    1062:	1a ab       	std	Y+50, r17	; 0x32
    1064:	09 ab       	std	Y+49, r16	; 0x31
    1066:	10 c0       	rjmp	.+32     	; 0x1088 <LCDBusyLoop+0x3b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1068:	68 a1       	ldd	r22, Y+32	; 0x20
    106a:	79 a1       	ldd	r23, Y+33	; 0x21
    106c:	8a a1       	ldd	r24, Y+34	; 0x22
    106e:	9b a1       	ldd	r25, Y+35	; 0x23
    1070:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8c a3       	std	Y+36, r24	; 0x24
    107a:	8c a1       	ldd	r24, Y+36	; 0x24
    107c:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    107e:	8b a9       	ldd	r24, Y+51	; 0x33
    1080:	18 2f       	mov	r17, r24
    1082:	1a 95       	dec	r17
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCDBusyLoop+0x3b2>
    1086:	1b ab       	std	Y+51, r17	; 0x33

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    1088:	86 e3       	ldi	r24, 0x36	; 54
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	fc 01       	movw	r30, r24
    108e:	80 81       	ld	r24, Z
    1090:	89 83       	std	Y+1, r24	; 0x01
		status=status<<4;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	82 95       	swap	r24
    1096:	80 7f       	andi	r24, 0xF0	; 240
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	bf e3       	ldi	r27, 0x3F	; 63
    10a2:	8c ab       	std	Y+52, r24	; 0x34
    10a4:	9d ab       	std	Y+53, r25	; 0x35
    10a6:	ae ab       	std	Y+54, r26	; 0x36
    10a8:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    10aa:	6c a9       	ldd	r22, Y+52	; 0x34
    10ac:	7d a9       	ldd	r23, Y+53	; 0x35
    10ae:	8e a9       	ldd	r24, Y+54	; 0x36
    10b0:	9f a9       	ldd	r25, Y+55	; 0x37
    10b2:	2b ea       	ldi	r18, 0xAB	; 171
    10b4:	3a ea       	ldi	r19, 0xAA	; 170
    10b6:	4a ea       	ldi	r20, 0xAA	; 170
    10b8:	5e e3       	ldi	r21, 0x3E	; 62
    10ba:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	88 af       	std	Y+56, r24	; 0x38
    10c4:	99 af       	std	Y+57, r25	; 0x39
    10c6:	aa af       	std	Y+58, r26	; 0x3a
    10c8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    10ca:	11 e0       	ldi	r17, 0x01	; 1
    10cc:	68 ad       	ldd	r22, Y+56	; 0x38
    10ce:	79 ad       	ldd	r23, Y+57	; 0x39
    10d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    10d2:	9b ad       	ldd	r25, Y+59	; 0x3b
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	0c f0       	brlt	.+2      	; 0x10e6 <LCDBusyLoop+0x416>
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	11 23       	and	r17, r17
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <LCDBusyLoop+0x420>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	8c af       	std	Y+60, r24	; 0x3c
    10ee:	f3 c0       	rjmp	.+486    	; 0x12d6 <LCDBusyLoop+0x606>
	else if (__tmp > 255)
    10f0:	11 e0       	ldi	r17, 0x01	; 1
    10f2:	68 ad       	ldd	r22, Y+56	; 0x38
    10f4:	79 ad       	ldd	r23, Y+57	; 0x39
    10f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    10f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	53 e4       	ldi	r21, 0x43	; 67
    1102:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	0c f0       	brlt	.+2      	; 0x110c <LCDBusyLoop+0x43c>
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	11 23       	and	r17, r17
    110e:	09 f4       	brne	.+2      	; 0x1112 <LCDBusyLoop+0x442>
    1110:	d9 c0       	rjmp	.+434    	; 0x12c4 <LCDBusyLoop+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    1112:	6c a9       	ldd	r22, Y+52	; 0x34
    1114:	7d a9       	ldd	r23, Y+53	; 0x35
    1116:	8e a9       	ldd	r24, Y+54	; 0x36
    1118:	9f a9       	ldd	r25, Y+55	; 0x37
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a e7       	ldi	r20, 0x7A	; 122
    1120:	54 e4       	ldi	r21, 0x44	; 68
    1122:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	9e 01       	movw	r18, r28
    112c:	23 5c       	subi	r18, 0xC3	; 195
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	f9 01       	movw	r30, r18
    1132:	80 83       	st	Z, r24
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	a2 83       	std	Z+2, r26	; 0x02
    1138:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    113a:	8e 01       	movw	r16, r28
    113c:	0f 5b       	subi	r16, 0xBF	; 191
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	ce 01       	movw	r24, r28
    1142:	cd 96       	adiw	r24, 0x3d	; 61
    1144:	fc 01       	movw	r30, r24
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a e7       	ldi	r20, 0x7A	; 122
    1154:	53 e4       	ldi	r21, 0x43	; 67
    1156:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	f8 01       	movw	r30, r16
    1160:	80 83       	st	Z, r24
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	a2 83       	std	Z+2, r26	; 0x02
    1166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1168:	ce 01       	movw	r24, r28
    116a:	8f 5b       	subi	r24, 0xBF	; 191
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	11 e0       	ldi	r17, 0x01	; 1
    1170:	fc 01       	movw	r30, r24
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	0c f0       	brlt	.+2      	; 0x118c <LCDBusyLoop+0x4bc>
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	11 23       	and	r17, r17
    118e:	49 f0       	breq	.+18     	; 0x11a2 <LCDBusyLoop+0x4d2>
		__ticks = 1;
    1190:	ce 01       	movw	r24, r28
    1192:	8b 5b       	subi	r24, 0xBB	; 187
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	fc 01       	movw	r30, r24
    119c:	31 83       	std	Z+1, r19	; 0x01
    119e:	20 83       	st	Z, r18
    11a0:	73 c0       	rjmp	.+230    	; 0x1288 <LCDBusyLoop+0x5b8>
	else if (__tmp > 65535)
    11a2:	ce 01       	movw	r24, r28
    11a4:	8f 5b       	subi	r24, 0xBF	; 191
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	11 e0       	ldi	r17, 0x01	; 1
    11aa:	fc 01       	movw	r30, r24
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	3f ef       	ldi	r19, 0xFF	; 255
    11b8:	4f e7       	ldi	r20, 0x7F	; 127
    11ba:	57 e4       	ldi	r21, 0x47	; 71
    11bc:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	0c f0       	brlt	.+2      	; 0x11c6 <LCDBusyLoop+0x4f6>
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	11 23       	and	r17, r17
    11c8:	09 f4       	brne	.+2      	; 0x11cc <LCDBusyLoop+0x4fc>
    11ca:	4c c0       	rjmp	.+152    	; 0x1264 <LCDBusyLoop+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	ce 01       	movw	r24, r28
    11ce:	cd 96       	adiw	r24, 0x3d	; 61
    11d0:	fc 01       	movw	r30, r24
    11d2:	60 81       	ld	r22, Z
    11d4:	71 81       	ldd	r23, Z+1	; 0x01
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	51 e4       	ldi	r21, 0x41	; 65
    11e2:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	8e 01       	movw	r16, r28
    11ec:	0b 5b       	subi	r16, 0xBB	; 187
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	f8 01       	movw	r30, r16
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	27 c0       	rjmp	.+78     	; 0x1252 <LCDBusyLoop+0x582>
    1204:	ce 01       	movw	r24, r28
    1206:	89 5b       	subi	r24, 0xB9	; 185
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	29 e1       	ldi	r18, 0x19	; 25
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	fc 01       	movw	r30, r24
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1214:	ce 01       	movw	r24, r28
    1216:	89 5b       	subi	r24, 0xB9	; 185
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	fc 01       	movw	r30, r24
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	8c 01       	movw	r16, r24
    1222:	c8 01       	movw	r24, r16
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCDBusyLoop+0x554>
    1228:	8c 01       	movw	r16, r24
    122a:	ce 01       	movw	r24, r28
    122c:	89 5b       	subi	r24, 0xB9	; 185
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	fc 01       	movw	r30, r24
    1232:	11 83       	std	Z+1, r17	; 0x01
    1234:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	ce 01       	movw	r24, r28
    1238:	8b 5b       	subi	r24, 0xBB	; 187
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	9e 01       	movw	r18, r28
    123e:	2b 5b       	subi	r18, 0xBB	; 187
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	31 81       	ldd	r19, Z+1	; 0x01
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	30 40       	sbci	r19, 0x00	; 0
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1252:	ce 01       	movw	r24, r28
    1254:	8b 5b       	subi	r24, 0xBB	; 187
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	89 f6       	brne	.-94     	; 0x1204 <LCDBusyLoop+0x534>
    1262:	4c c0       	rjmp	.+152    	; 0x12fc <LCDBusyLoop+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	8e 01       	movw	r16, r28
    1266:	0b 5b       	subi	r16, 0xBB	; 187
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	ce 01       	movw	r24, r28
    126c:	8f 5b       	subi	r24, 0xBF	; 191
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	fc 01       	movw	r30, r24
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	f8 01       	movw	r30, r16
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	80 83       	st	Z, r24
    1288:	ce 01       	movw	r24, r28
    128a:	87 5b       	subi	r24, 0xB7	; 183
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	9e 01       	movw	r18, r28
    1290:	2b 5b       	subi	r18, 0xBB	; 187
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	31 81       	ldd	r19, Z+1	; 0x01
    129a:	fc 01       	movw	r30, r24
    129c:	31 83       	std	Z+1, r19	; 0x01
    129e:	20 83       	st	Z, r18
    12a0:	ce 01       	movw	r24, r28
    12a2:	87 5b       	subi	r24, 0xB7	; 183
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	fc 01       	movw	r30, r24
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	8c 01       	movw	r16, r24
    12ae:	c8 01       	movw	r24, r16
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCDBusyLoop+0x5e0>
    12b4:	8c 01       	movw	r16, r24
    12b6:	ce 01       	movw	r24, r28
    12b8:	87 5b       	subi	r24, 0xB7	; 183
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	11 83       	std	Z+1, r17	; 0x01
    12c0:	00 83       	st	Z, r16
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <LCDBusyLoop+0x62c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12c4:	68 ad       	ldd	r22, Y+56	; 0x38
    12c6:	79 ad       	ldd	r23, Y+57	; 0x39
    12c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    12ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    12cc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8c af       	std	Y+60, r24	; 0x3c
    12d6:	ce 01       	movw	r24, r28
    12d8:	85 5b       	subi	r24, 0xB5	; 181
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12e2:	ce 01       	movw	r24, r28
    12e4:	85 5b       	subi	r24, 0xB5	; 181
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	18 2f       	mov	r17, r24
    12ee:	1a 95       	dec	r17
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <LCDBusyLoop+0x61e>
    12f2:	ce 01       	movw	r24, r28
    12f4:	85 5b       	subi	r24, 0xB5	; 181
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	fc 01       	movw	r30, r24
    12fa:	10 83       	st	Z, r17

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    12fc:	88 e3       	ldi	r24, 0x38	; 56
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	28 e3       	ldi	r18, 0x38	; 56
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	f9 01       	movw	r30, r18
    1306:	20 81       	ld	r18, Z
    1308:	2f 7e       	andi	r18, 0xEF	; 239
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
    130e:	9e 01       	movw	r18, r28
    1310:	24 5b       	subi	r18, 0xB4	; 180
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e8       	ldi	r26, 0x80	; 128
    131a:	bf e3       	ldi	r27, 0x3F	; 63
    131c:	f9 01       	movw	r30, r18
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1326:	8e 01       	movw	r16, r28
    1328:	00 5b       	subi	r16, 0xB0	; 176
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	ce 01       	movw	r24, r28
    132e:	84 5b       	subi	r24, 0xB4	; 180
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	fc 01       	movw	r30, r24
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	2b ea       	ldi	r18, 0xAB	; 171
    133e:	3a ea       	ldi	r19, 0xAA	; 170
    1340:	4a ea       	ldi	r20, 0xAA	; 170
    1342:	5e e3       	ldi	r21, 0x3E	; 62
    1344:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	f8 01       	movw	r30, r16
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1356:	ce 01       	movw	r24, r28
    1358:	80 5b       	subi	r24, 0xB0	; 176
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	11 e0       	ldi	r17, 0x01	; 1
    135e:	fc 01       	movw	r30, r24
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	0c f0       	brlt	.+2      	; 0x137a <LCDBusyLoop+0x6aa>
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	11 23       	and	r17, r17
    137c:	39 f0       	breq	.+14     	; 0x138c <LCDBusyLoop+0x6bc>
		__ticks = 1;
    137e:	ce 01       	movw	r24, r28
    1380:	8c 5a       	subi	r24, 0xAC	; 172
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	05 c1       	rjmp	.+522    	; 0x1596 <LCDBusyLoop+0x8c6>
	else if (__tmp > 255)
    138c:	ce 01       	movw	r24, r28
    138e:	80 5b       	subi	r24, 0xB0	; 176
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	11 e0       	ldi	r17, 0x01	; 1
    1394:	fc 01       	movw	r30, r24
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	0c f0       	brlt	.+2      	; 0x13b0 <LCDBusyLoop+0x6e0>
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	11 23       	and	r17, r17
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <LCDBusyLoop+0x6e6>
    13b4:	df c0       	rjmp	.+446    	; 0x1574 <LCDBusyLoop+0x8a4>
	{
		_delay_ms(__us / 1000.0);
    13b6:	ce 01       	movw	r24, r28
    13b8:	84 5b       	subi	r24, 0xB4	; 180
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	fc 01       	movw	r30, r24
    13be:	60 81       	ld	r22, Z
    13c0:	71 81       	ldd	r23, Z+1	; 0x01
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	4a e7       	ldi	r20, 0x7A	; 122
    13cc:	54 e4       	ldi	r21, 0x44	; 68
    13ce:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9e 01       	movw	r18, r28
    13d8:	2b 5a       	subi	r18, 0xAB	; 171
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	f9 01       	movw	r30, r18
    13de:	80 83       	st	Z, r24
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	a2 83       	std	Z+2, r26	; 0x02
    13e4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	8e 01       	movw	r16, r28
    13e8:	07 5a       	subi	r16, 0xA7	; 167
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	ce 01       	movw	r24, r28
    13ee:	8b 5a       	subi	r24, 0xAB	; 171
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	fc 01       	movw	r30, r24
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	f8 01       	movw	r30, r16
    140e:	80 83       	st	Z, r24
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	a2 83       	std	Z+2, r26	; 0x02
    1414:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1416:	ce 01       	movw	r24, r28
    1418:	87 5a       	subi	r24, 0xA7	; 167
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	11 e0       	ldi	r17, 0x01	; 1
    141e:	fc 01       	movw	r30, r24
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	0c f0       	brlt	.+2      	; 0x143a <LCDBusyLoop+0x76a>
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	11 23       	and	r17, r17
    143c:	49 f0       	breq	.+18     	; 0x1450 <LCDBusyLoop+0x780>
		__ticks = 1;
    143e:	ce 01       	movw	r24, r28
    1440:	83 5a       	subi	r24, 0xA3	; 163
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	21 e0       	ldi	r18, 0x01	; 1
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	fc 01       	movw	r30, r24
    144a:	31 83       	std	Z+1, r19	; 0x01
    144c:	20 83       	st	Z, r18
    144e:	74 c0       	rjmp	.+232    	; 0x1538 <LCDBusyLoop+0x868>
	else if (__tmp > 65535)
    1450:	ce 01       	movw	r24, r28
    1452:	87 5a       	subi	r24, 0xA7	; 167
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	11 e0       	ldi	r17, 0x01	; 1
    1458:	fc 01       	movw	r30, r24
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	4f e7       	ldi	r20, 0x7F	; 127
    1468:	57 e4       	ldi	r21, 0x47	; 71
    146a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    146e:	18 16       	cp	r1, r24
    1470:	0c f0       	brlt	.+2      	; 0x1474 <LCDBusyLoop+0x7a4>
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	11 23       	and	r17, r17
    1476:	09 f4       	brne	.+2      	; 0x147a <LCDBusyLoop+0x7aa>
    1478:	4d c0       	rjmp	.+154    	; 0x1514 <LCDBusyLoop+0x844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	ce 01       	movw	r24, r28
    147c:	8b 5a       	subi	r24, 0xAB	; 171
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	fc 01       	movw	r30, r24
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8e 01       	movw	r16, r28
    149c:	03 5a       	subi	r16, 0xA3	; 163
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	27 c0       	rjmp	.+78     	; 0x1502 <LCDBusyLoop+0x832>
    14b4:	ce 01       	movw	r24, r28
    14b6:	81 5a       	subi	r24, 0xA1	; 161
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	29 e1       	ldi	r18, 0x19	; 25
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	31 83       	std	Z+1, r19	; 0x01
    14c2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c4:	ce 01       	movw	r24, r28
    14c6:	81 5a       	subi	r24, 0xA1	; 161
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	8c 01       	movw	r16, r24
    14d2:	c8 01       	movw	r24, r16
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCDBusyLoop+0x804>
    14d8:	8c 01       	movw	r16, r24
    14da:	ce 01       	movw	r24, r28
    14dc:	81 5a       	subi	r24, 0xA1	; 161
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	fc 01       	movw	r30, r24
    14e2:	11 83       	std	Z+1, r17	; 0x01
    14e4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	ce 01       	movw	r24, r28
    14e8:	83 5a       	subi	r24, 0xA3	; 163
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	9e 01       	movw	r18, r28
    14ee:	23 5a       	subi	r18, 0xA3	; 163
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	f9 01       	movw	r30, r18
    14f4:	20 81       	ld	r18, Z
    14f6:	31 81       	ldd	r19, Z+1	; 0x01
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	30 40       	sbci	r19, 0x00	; 0
    14fc:	fc 01       	movw	r30, r24
    14fe:	31 83       	std	Z+1, r19	; 0x01
    1500:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	ce 01       	movw	r24, r28
    1504:	83 5a       	subi	r24, 0xA3	; 163
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	89 f6       	brne	.-94     	; 0x14b4 <LCDBusyLoop+0x7e4>
    1512:	58 c0       	rjmp	.+176    	; 0x15c4 <LCDBusyLoop+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	8e 01       	movw	r16, r28
    1516:	03 5a       	subi	r16, 0xA3	; 163
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	ce 01       	movw	r24, r28
    151c:	87 5a       	subi	r24, 0xA7	; 167
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	fc 01       	movw	r30, r24
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	ce 01       	movw	r24, r28
    153a:	8f 59       	subi	r24, 0x9F	; 159
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	9e 01       	movw	r18, r28
    1540:	23 5a       	subi	r18, 0xA3	; 163
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	f9 01       	movw	r30, r18
    1546:	20 81       	ld	r18, Z
    1548:	31 81       	ldd	r19, Z+1	; 0x01
    154a:	fc 01       	movw	r30, r24
    154c:	31 83       	std	Z+1, r19	; 0x01
    154e:	20 83       	st	Z, r18
    1550:	ce 01       	movw	r24, r28
    1552:	8f 59       	subi	r24, 0x9F	; 159
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	fc 01       	movw	r30, r24
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	8c 01       	movw	r16, r24
    155e:	c8 01       	movw	r24, r16
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <LCDBusyLoop+0x890>
    1564:	8c 01       	movw	r16, r24
    1566:	ce 01       	movw	r24, r28
    1568:	8f 59       	subi	r24, 0x9F	; 159
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	fc 01       	movw	r30, r24
    156e:	11 83       	std	Z+1, r17	; 0x01
    1570:	00 83       	st	Z, r16
    1572:	28 c0       	rjmp	.+80     	; 0x15c4 <LCDBusyLoop+0x8f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1574:	8e 01       	movw	r16, r28
    1576:	0c 5a       	subi	r16, 0xAC	; 172
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	ce 01       	movw	r24, r28
    157c:	80 5b       	subi	r24, 0xB0	; 176
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	fc 01       	movw	r30, r24
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	80 83       	st	Z, r24
    1596:	ce 01       	movw	r24, r28
    1598:	8d 59       	subi	r24, 0x9D	; 157
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	9e 01       	movw	r18, r28
    159e:	2c 5a       	subi	r18, 0xAC	; 172
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	f9 01       	movw	r30, r18
    15a4:	20 81       	ld	r18, Z
    15a6:	fc 01       	movw	r30, r24
    15a8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15aa:	ce 01       	movw	r24, r28
    15ac:	8d 59       	subi	r24, 0x9D	; 157
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	18 2f       	mov	r17, r24
    15b6:	1a 95       	dec	r17
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCDBusyLoop+0x8e6>
    15ba:	ce 01       	movw	r24, r28
    15bc:	8d 59       	subi	r24, 0x9D	; 157
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	fc 01       	movw	r30, r24
    15c2:	10 83       	st	Z, r17
		_delay_us(1);	//tEL

		SET_E();
    15c4:	88 e3       	ldi	r24, 0x38	; 56
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	28 e3       	ldi	r18, 0x38	; 56
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	20 61       	ori	r18, 0x10	; 16
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
    15d6:	9e 01       	movw	r18, r28
    15d8:	2c 59       	subi	r18, 0x9C	; 156
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	bf e3       	ldi	r27, 0x3F	; 63
    15e4:	f9 01       	movw	r30, r18
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    15ee:	8e 01       	movw	r16, r28
    15f0:	08 59       	subi	r16, 0x98	; 152
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	ce 01       	movw	r24, r28
    15f6:	8c 59       	subi	r24, 0x9C	; 156
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	2b ea       	ldi	r18, 0xAB	; 171
    1606:	3a ea       	ldi	r19, 0xAA	; 170
    1608:	4a ea       	ldi	r20, 0xAA	; 170
    160a:	5e e3       	ldi	r21, 0x3E	; 62
    160c:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	f8 01       	movw	r30, r16
    1616:	80 83       	st	Z, r24
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	a2 83       	std	Z+2, r26	; 0x02
    161c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    161e:	ce 01       	movw	r24, r28
    1620:	88 59       	subi	r24, 0x98	; 152
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	11 e0       	ldi	r17, 0x01	; 1
    1626:	fc 01       	movw	r30, r24
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	0c f0       	brlt	.+2      	; 0x1642 <LCDBusyLoop+0x972>
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	11 23       	and	r17, r17
    1644:	39 f0       	breq	.+14     	; 0x1654 <LCDBusyLoop+0x984>
		__ticks = 1;
    1646:	ce 01       	movw	r24, r28
    1648:	84 59       	subi	r24, 0x94	; 148
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
    1652:	05 c1       	rjmp	.+522    	; 0x185e <LCDBusyLoop+0xb8e>
	else if (__tmp > 255)
    1654:	ce 01       	movw	r24, r28
    1656:	88 59       	subi	r24, 0x98	; 152
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	11 e0       	ldi	r17, 0x01	; 1
    165c:	fc 01       	movw	r30, r24
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	53 e4       	ldi	r21, 0x43	; 67
    166e:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <LCDBusyLoop+0x9a8>
    1676:	10 e0       	ldi	r17, 0x00	; 0
    1678:	11 23       	and	r17, r17
    167a:	09 f4       	brne	.+2      	; 0x167e <LCDBusyLoop+0x9ae>
    167c:	df c0       	rjmp	.+446    	; 0x183c <LCDBusyLoop+0xb6c>
	{
		_delay_ms(__us / 1000.0);
    167e:	ce 01       	movw	r24, r28
    1680:	8c 59       	subi	r24, 0x9C	; 156
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	fc 01       	movw	r30, r24
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 01       	movw	r18, r28
    16a0:	23 59       	subi	r18, 0x93	; 147
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	f9 01       	movw	r30, r18
    16a6:	80 83       	st	Z, r24
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	a2 83       	std	Z+2, r26	; 0x02
    16ac:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	8e 01       	movw	r16, r28
    16b0:	0f 58       	subi	r16, 0x8F	; 143
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ce 01       	movw	r24, r28
    16b6:	83 59       	subi	r24, 0x93	; 147
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	fc 01       	movw	r30, r24
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16de:	ce 01       	movw	r24, r28
    16e0:	8f 58       	subi	r24, 0x8F	; 143
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	11 e0       	ldi	r17, 0x01	; 1
    16e6:	fc 01       	movw	r30, r24
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	0c f0       	brlt	.+2      	; 0x1702 <LCDBusyLoop+0xa32>
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	11 23       	and	r17, r17
    1704:	49 f0       	breq	.+18     	; 0x1718 <LCDBusyLoop+0xa48>
		__ticks = 1;
    1706:	ce 01       	movw	r24, r28
    1708:	8b 58       	subi	r24, 0x8B	; 139
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	21 e0       	ldi	r18, 0x01	; 1
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	fc 01       	movw	r30, r24
    1712:	31 83       	std	Z+1, r19	; 0x01
    1714:	20 83       	st	Z, r18
    1716:	74 c0       	rjmp	.+232    	; 0x1800 <LCDBusyLoop+0xb30>
	else if (__tmp > 65535)
    1718:	ce 01       	movw	r24, r28
    171a:	8f 58       	subi	r24, 0x8F	; 143
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	11 e0       	ldi	r17, 0x01	; 1
    1720:	fc 01       	movw	r30, r24
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	0c f0       	brlt	.+2      	; 0x173c <LCDBusyLoop+0xa6c>
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	11 23       	and	r17, r17
    173e:	09 f4       	brne	.+2      	; 0x1742 <LCDBusyLoop+0xa72>
    1740:	4d c0       	rjmp	.+154    	; 0x17dc <LCDBusyLoop+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	ce 01       	movw	r24, r28
    1744:	83 59       	subi	r24, 0x93	; 147
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	fc 01       	movw	r30, r24
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	8e 01       	movw	r16, r28
    1764:	0b 58       	subi	r16, 0x8B	; 139
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	27 c0       	rjmp	.+78     	; 0x17ca <LCDBusyLoop+0xafa>
    177c:	ce 01       	movw	r24, r28
    177e:	89 58       	subi	r24, 0x89	; 137
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	29 e1       	ldi	r18, 0x19	; 25
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	fc 01       	movw	r30, r24
    1788:	31 83       	std	Z+1, r19	; 0x01
    178a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178c:	ce 01       	movw	r24, r28
    178e:	89 58       	subi	r24, 0x89	; 137
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	fc 01       	movw	r30, r24
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	8c 01       	movw	r16, r24
    179a:	c8 01       	movw	r24, r16
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCDBusyLoop+0xacc>
    17a0:	8c 01       	movw	r16, r24
    17a2:	ce 01       	movw	r24, r28
    17a4:	89 58       	subi	r24, 0x89	; 137
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	11 83       	std	Z+1, r17	; 0x01
    17ac:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	ce 01       	movw	r24, r28
    17b0:	8b 58       	subi	r24, 0x8B	; 139
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	9e 01       	movw	r18, r28
    17b6:	2b 58       	subi	r18, 0x8B	; 139
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	31 81       	ldd	r19, Z+1	; 0x01
    17c0:	21 50       	subi	r18, 0x01	; 1
    17c2:	30 40       	sbci	r19, 0x00	; 0
    17c4:	fc 01       	movw	r30, r24
    17c6:	31 83       	std	Z+1, r19	; 0x01
    17c8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	ce 01       	movw	r24, r28
    17cc:	8b 58       	subi	r24, 0x8B	; 139
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	fc 01       	movw	r30, r24
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	89 f6       	brne	.-94     	; 0x177c <LCDBusyLoop+0xaac>
    17da:	58 c0       	rjmp	.+176    	; 0x188c <LCDBusyLoop+0xbbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17dc:	8e 01       	movw	r16, r28
    17de:	0b 58       	subi	r16, 0x8B	; 139
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	ce 01       	movw	r24, r28
    17e4:	8f 58       	subi	r24, 0x8F	; 143
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	fc 01       	movw	r30, r24
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f8 01       	movw	r30, r16
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	ce 01       	movw	r24, r28
    1802:	87 58       	subi	r24, 0x87	; 135
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	9e 01       	movw	r18, r28
    1808:	2b 58       	subi	r18, 0x8B	; 139
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	31 81       	ldd	r19, Z+1	; 0x01
    1812:	fc 01       	movw	r30, r24
    1814:	31 83       	std	Z+1, r19	; 0x01
    1816:	20 83       	st	Z, r18
    1818:	ce 01       	movw	r24, r28
    181a:	87 58       	subi	r24, 0x87	; 135
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	fc 01       	movw	r30, r24
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	8c 01       	movw	r16, r24
    1826:	c8 01       	movw	r24, r16
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCDBusyLoop+0xb58>
    182c:	8c 01       	movw	r16, r24
    182e:	ce 01       	movw	r24, r28
    1830:	87 58       	subi	r24, 0x87	; 135
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	fc 01       	movw	r30, r24
    1836:	11 83       	std	Z+1, r17	; 0x01
    1838:	00 83       	st	Z, r16
    183a:	28 c0       	rjmp	.+80     	; 0x188c <LCDBusyLoop+0xbbc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    183c:	8e 01       	movw	r16, r28
    183e:	04 59       	subi	r16, 0x94	; 148
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	ce 01       	movw	r24, r28
    1844:	88 59       	subi	r24, 0x98	; 152
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	fc 01       	movw	r30, r24
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	f8 01       	movw	r30, r16
    185c:	80 83       	st	Z, r24
    185e:	ce 01       	movw	r24, r28
    1860:	85 58       	subi	r24, 0x85	; 133
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	9e 01       	movw	r18, r28
    1866:	24 59       	subi	r18, 0x94	; 148
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1872:	ce 01       	movw	r24, r28
    1874:	85 58       	subi	r24, 0x85	; 133
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	fc 01       	movw	r30, r24
    187a:	80 81       	ld	r24, Z
    187c:	18 2f       	mov	r17, r24
    187e:	1a 95       	dec	r17
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCDBusyLoop+0xbae>
    1882:	ce 01       	movw	r24, r28
    1884:	85 58       	subi	r24, 0x85	; 133
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	fc 01       	movw	r30, r24
    188a:	10 83       	st	Z, r17
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    188c:	86 e3       	ldi	r24, 0x36	; 54
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	80 81       	ld	r24, Z
    1894:	8a 83       	std	Y+2, r24	; 0x02
		temp&=0x0F;
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	8f 70       	andi	r24, 0x0F	; 15
    189a:	8a 83       	std	Y+2, r24	; 0x02

		status=status|temp;
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	89 2b       	or	r24, r25
    18a2:	89 83       	std	Y+1, r24	; 0x01

		busy=status & 0b10000000;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	80 78       	andi	r24, 0x80	; 128
    18a8:	8b 83       	std	Y+3, r24	; 0x03
    18aa:	9e 01       	movw	r18, r28
    18ac:	24 58       	subi	r18, 0x84	; 132
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e0       	ldi	r26, 0x00	; 0
    18b6:	bf e3       	ldi	r27, 0x3F	; 63
    18b8:	f9 01       	movw	r30, r18
    18ba:	80 83       	st	Z, r24
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	a2 83       	std	Z+2, r26	; 0x02
    18c0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    18c2:	8e 01       	movw	r16, r28
    18c4:	00 58       	subi	r16, 0x80	; 128
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	ce 01       	movw	r24, r28
    18ca:	84 58       	subi	r24, 0x84	; 132
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	fc 01       	movw	r30, r24
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	2b ea       	ldi	r18, 0xAB	; 171
    18da:	3a ea       	ldi	r19, 0xAA	; 170
    18dc:	4a ea       	ldi	r20, 0xAA	; 170
    18de:	5e e3       	ldi	r21, 0x3E	; 62
    18e0:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f2:	ce 01       	movw	r24, r28
    18f4:	80 58       	subi	r24, 0x80	; 128
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	11 e0       	ldi	r17, 0x01	; 1
    18fa:	fc 01       	movw	r30, r24
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	0c f0       	brlt	.+2      	; 0x1916 <LCDBusyLoop+0xc46>
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	11 23       	and	r17, r17
    1918:	39 f0       	breq	.+14     	; 0x1928 <LCDBusyLoop+0xc58>
		__ticks = 1;
    191a:	ce 01       	movw	r24, r28
    191c:	8c 57       	subi	r24, 0x7C	; 124
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
    1926:	05 c1       	rjmp	.+522    	; 0x1b32 <LCDBusyLoop+0xe62>
	else if (__tmp > 255)
    1928:	ce 01       	movw	r24, r28
    192a:	80 58       	subi	r24, 0x80	; 128
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	11 e0       	ldi	r17, 0x01	; 1
    1930:	fc 01       	movw	r30, r24
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	53 e4       	ldi	r21, 0x43	; 67
    1942:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	0c f0       	brlt	.+2      	; 0x194c <LCDBusyLoop+0xc7c>
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	11 23       	and	r17, r17
    194e:	09 f4       	brne	.+2      	; 0x1952 <LCDBusyLoop+0xc82>
    1950:	df c0       	rjmp	.+446    	; 0x1b10 <LCDBusyLoop+0xe40>
	{
		_delay_ms(__us / 1000.0);
    1952:	ce 01       	movw	r24, r28
    1954:	84 58       	subi	r24, 0x84	; 132
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	fc 01       	movw	r30, r24
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a e7       	ldi	r20, 0x7A	; 122
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9e 01       	movw	r18, r28
    1974:	2b 57       	subi	r18, 0x7B	; 123
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	f9 01       	movw	r30, r18
    197a:	80 83       	st	Z, r24
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	a2 83       	std	Z+2, r26	; 0x02
    1980:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1982:	8e 01       	movw	r16, r28
    1984:	07 57       	subi	r16, 0x77	; 119
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	ce 01       	movw	r24, r28
    198a:	8b 57       	subi	r24, 0x7B	; 123
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	fc 01       	movw	r30, r24
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a e7       	ldi	r20, 0x7A	; 122
    199e:	53 e4       	ldi	r21, 0x43	; 67
    19a0:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 83       	st	Z, r24
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	a2 83       	std	Z+2, r26	; 0x02
    19b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b2:	ce 01       	movw	r24, r28
    19b4:	87 57       	subi	r24, 0x77	; 119
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	11 e0       	ldi	r17, 0x01	; 1
    19ba:	fc 01       	movw	r30, r24
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	0c f0       	brlt	.+2      	; 0x19d6 <LCDBusyLoop+0xd06>
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	11 23       	and	r17, r17
    19d8:	49 f0       	breq	.+18     	; 0x19ec <LCDBusyLoop+0xd1c>
		__ticks = 1;
    19da:	ce 01       	movw	r24, r28
    19dc:	83 57       	subi	r24, 0x73	; 115
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	fc 01       	movw	r30, r24
    19e6:	31 83       	std	Z+1, r19	; 0x01
    19e8:	20 83       	st	Z, r18
    19ea:	74 c0       	rjmp	.+232    	; 0x1ad4 <LCDBusyLoop+0xe04>
	else if (__tmp > 65535)
    19ec:	ce 01       	movw	r24, r28
    19ee:	87 57       	subi	r24, 0x77	; 119
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	11 e0       	ldi	r17, 0x01	; 1
    19f4:	fc 01       	movw	r30, r24
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	0c f0       	brlt	.+2      	; 0x1a10 <LCDBusyLoop+0xd40>
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	11 23       	and	r17, r17
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <LCDBusyLoop+0xd46>
    1a14:	4d c0       	rjmp	.+154    	; 0x1ab0 <LCDBusyLoop+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	ce 01       	movw	r24, r28
    1a18:	8b 57       	subi	r24, 0x7B	; 123
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8e 01       	movw	r16, r28
    1a38:	03 57       	subi	r16, 0x73	; 115
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	f8 01       	movw	r30, r16
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	27 c0       	rjmp	.+78     	; 0x1a9e <LCDBusyLoop+0xdce>
    1a50:	ce 01       	movw	r24, r28
    1a52:	81 57       	subi	r24, 0x71	; 113
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	29 e1       	ldi	r18, 0x19	; 25
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	31 83       	std	Z+1, r19	; 0x01
    1a5e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a60:	ce 01       	movw	r24, r28
    1a62:	81 57       	subi	r24, 0x71	; 113
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	fc 01       	movw	r30, r24
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	c8 01       	movw	r24, r16
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCDBusyLoop+0xda0>
    1a74:	8c 01       	movw	r16, r24
    1a76:	ce 01       	movw	r24, r28
    1a78:	81 57       	subi	r24, 0x71	; 113
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	11 83       	std	Z+1, r17	; 0x01
    1a80:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	ce 01       	movw	r24, r28
    1a84:	83 57       	subi	r24, 0x73	; 115
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	9e 01       	movw	r18, r28
    1a8a:	23 57       	subi	r18, 0x73	; 115
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	f9 01       	movw	r30, r18
    1a90:	20 81       	ld	r18, Z
    1a92:	31 81       	ldd	r19, Z+1	; 0x01
    1a94:	21 50       	subi	r18, 0x01	; 1
    1a96:	30 40       	sbci	r19, 0x00	; 0
    1a98:	fc 01       	movw	r30, r24
    1a9a:	31 83       	std	Z+1, r19	; 0x01
    1a9c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	83 57       	subi	r24, 0x73	; 115
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	89 f6       	brne	.-94     	; 0x1a50 <LCDBusyLoop+0xd80>
    1aae:	58 c0       	rjmp	.+176    	; 0x1b60 <LCDBusyLoop+0xe90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	03 57       	subi	r16, 0x73	; 115
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	87 57       	subi	r24, 0x77	; 119
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	fc 01       	movw	r30, r24
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	f8 01       	movw	r30, r16
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	8f 56       	subi	r24, 0x6F	; 111
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	9e 01       	movw	r18, r28
    1adc:	23 57       	subi	r18, 0x73	; 115
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	20 81       	ld	r18, Z
    1ae4:	31 81       	ldd	r19, Z+1	; 0x01
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	31 83       	std	Z+1, r19	; 0x01
    1aea:	20 83       	st	Z, r18
    1aec:	ce 01       	movw	r24, r28
    1aee:	8f 56       	subi	r24, 0x6F	; 111
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	fc 01       	movw	r30, r24
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	8c 01       	movw	r16, r24
    1afa:	c8 01       	movw	r24, r16
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCDBusyLoop+0xe2c>
    1b00:	8c 01       	movw	r16, r24
    1b02:	ce 01       	movw	r24, r28
    1b04:	8f 56       	subi	r24, 0x6F	; 111
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	fc 01       	movw	r30, r24
    1b0a:	11 83       	std	Z+1, r17	; 0x01
    1b0c:	00 83       	st	Z, r16
    1b0e:	28 c0       	rjmp	.+80     	; 0x1b60 <LCDBusyLoop+0xe90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b10:	8e 01       	movw	r16, r28
    1b12:	0c 57       	subi	r16, 0x7C	; 124
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	ce 01       	movw	r24, r28
    1b18:	80 58       	subi	r24, 0x80	; 128
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 83       	st	Z, r24
    1b32:	ce 01       	movw	r24, r28
    1b34:	8d 56       	subi	r24, 0x6D	; 109
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	9e 01       	movw	r18, r28
    1b3a:	2c 57       	subi	r18, 0x7C	; 124
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	fc 01       	movw	r30, r24
    1b44:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b46:	ce 01       	movw	r24, r28
    1b48:	8d 56       	subi	r24, 0x6D	; 109
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	80 81       	ld	r24, Z
    1b50:	18 2f       	mov	r17, r24
    1b52:	1a 95       	dec	r17
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCDBusyLoop+0xe82>
    1b56:	ce 01       	movw	r24, r28
    1b58:	8d 56       	subi	r24, 0x6D	; 109
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	10 83       	st	Z, r17

		_delay_us(0.5);
		CLEAR_E();
    1b60:	88 e3       	ldi	r24, 0x38	; 56
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	28 e3       	ldi	r18, 0x38	; 56
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	f9 01       	movw	r30, r18
    1b6a:	20 81       	ld	r18, Z
    1b6c:	2f 7e       	andi	r18, 0xEF	; 239
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 83       	st	Z, r18
    1b72:	9e 01       	movw	r18, r28
    1b74:	2c 56       	subi	r18, 0x6C	; 108
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	f9 01       	movw	r30, r18
    1b82:	80 83       	st	Z, r24
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	a2 83       	std	Z+2, r26	; 0x02
    1b88:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	08 56       	subi	r16, 0x68	; 104
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	ce 01       	movw	r24, r28
    1b92:	8c 56       	subi	r24, 0x6C	; 108
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	fc 01       	movw	r30, r24
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	2b ea       	ldi	r18, 0xAB	; 171
    1ba2:	3a ea       	ldi	r19, 0xAA	; 170
    1ba4:	4a ea       	ldi	r20, 0xAA	; 170
    1ba6:	5e e3       	ldi	r21, 0x3E	; 62
    1ba8:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	a2 83       	std	Z+2, r26	; 0x02
    1bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bba:	ce 01       	movw	r24, r28
    1bbc:	88 56       	subi	r24, 0x68	; 104
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	11 e0       	ldi	r17, 0x01	; 1
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <LCDBusyLoop+0xf0e>
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
    1bde:	11 23       	and	r17, r17
    1be0:	39 f0       	breq	.+14     	; 0x1bf0 <LCDBusyLoop+0xf20>
		__ticks = 1;
    1be2:	ce 01       	movw	r24, r28
    1be4:	84 56       	subi	r24, 0x64	; 100
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	21 e0       	ldi	r18, 0x01	; 1
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18
    1bee:	05 c1       	rjmp	.+522    	; 0x1dfa <LCDBusyLoop+0x112a>
	else if (__tmp > 255)
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	88 56       	subi	r24, 0x68	; 104
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	11 e0       	ldi	r17, 0x01	; 1
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <LCDBusyLoop+0xf44>
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	11 23       	and	r17, r17
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <LCDBusyLoop+0xf4a>
    1c18:	df c0       	rjmp	.+446    	; 0x1dd8 <LCDBusyLoop+0x1108>
	{
		_delay_ms(__us / 1000.0);
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	8c 56       	subi	r24, 0x6C	; 108
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	fc 01       	movw	r30, r24
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 01       	movw	r18, r28
    1c3c:	23 56       	subi	r18, 0x63	; 99
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	f9 01       	movw	r30, r18
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	a2 83       	std	Z+2, r26	; 0x02
    1c48:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	0f 55       	subi	r16, 0x5F	; 95
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	ce 01       	movw	r24, r28
    1c52:	83 56       	subi	r24, 0x63	; 99
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	fc 01       	movw	r30, r24
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	53 e4       	ldi	r21, 0x43	; 67
    1c68:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	8f 55       	subi	r24, 0x5F	; 95
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	11 e0       	ldi	r17, 0x01	; 1
    1c82:	fc 01       	movw	r30, r24
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	0c f0       	brlt	.+2      	; 0x1c9e <LCDBusyLoop+0xfce>
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	11 23       	and	r17, r17
    1ca0:	49 f0       	breq	.+18     	; 0x1cb4 <LCDBusyLoop+0xfe4>
		__ticks = 1;
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	8b 55       	subi	r24, 0x5B	; 91
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	fc 01       	movw	r30, r24
    1cae:	31 83       	std	Z+1, r19	; 0x01
    1cb0:	20 83       	st	Z, r18
    1cb2:	74 c0       	rjmp	.+232    	; 0x1d9c <LCDBusyLoop+0x10cc>
	else if (__tmp > 65535)
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	8f 55       	subi	r24, 0x5F	; 95
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	11 e0       	ldi	r17, 0x01	; 1
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <LCDBusyLoop+0x1008>
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	11 23       	and	r17, r17
    1cda:	09 f4       	brne	.+2      	; 0x1cde <LCDBusyLoop+0x100e>
    1cdc:	4d c0       	rjmp	.+154    	; 0x1d78 <LCDBusyLoop+0x10a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	ce 01       	movw	r24, r28
    1ce0:	83 56       	subi	r24, 0x63	; 99
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0b 55       	subi	r16, 0x5B	; 91
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	27 c0       	rjmp	.+78     	; 0x1d66 <LCDBusyLoop+0x1096>
    1d18:	ce 01       	movw	r24, r28
    1d1a:	89 55       	subi	r24, 0x59	; 89
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	29 e1       	ldi	r18, 0x19	; 25
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	fc 01       	movw	r30, r24
    1d24:	31 83       	std	Z+1, r19	; 0x01
    1d26:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d28:	ce 01       	movw	r24, r28
    1d2a:	89 55       	subi	r24, 0x59	; 89
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	fc 01       	movw	r30, r24
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	8c 01       	movw	r16, r24
    1d36:	c8 01       	movw	r24, r16
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCDBusyLoop+0x1068>
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	ce 01       	movw	r24, r28
    1d40:	89 55       	subi	r24, 0x59	; 89
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	fc 01       	movw	r30, r24
    1d46:	11 83       	std	Z+1, r17	; 0x01
    1d48:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	8b 55       	subi	r24, 0x5B	; 91
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	9e 01       	movw	r18, r28
    1d52:	2b 55       	subi	r18, 0x5B	; 91
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	f9 01       	movw	r30, r18
    1d58:	20 81       	ld	r18, Z
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	21 50       	subi	r18, 0x01	; 1
    1d5e:	30 40       	sbci	r19, 0x00	; 0
    1d60:	fc 01       	movw	r30, r24
    1d62:	31 83       	std	Z+1, r19	; 0x01
    1d64:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	ce 01       	movw	r24, r28
    1d68:	8b 55       	subi	r24, 0x5B	; 91
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	89 f6       	brne	.-94     	; 0x1d18 <LCDBusyLoop+0x1048>
    1d76:	58 c0       	rjmp	.+176    	; 0x1e28 <LCDBusyLoop+0x1158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	8e 01       	movw	r16, r28
    1d7a:	0b 55       	subi	r16, 0x5B	; 91
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	ce 01       	movw	r24, r28
    1d80:	8f 55       	subi	r24, 0x5F	; 95
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	fc 01       	movw	r30, r24
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	87 55       	subi	r24, 0x57	; 87
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	9e 01       	movw	r18, r28
    1da4:	2b 55       	subi	r18, 0x5B	; 91
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	f9 01       	movw	r30, r18
    1daa:	20 81       	ld	r18, Z
    1dac:	31 81       	ldd	r19, Z+1	; 0x01
    1dae:	fc 01       	movw	r30, r24
    1db0:	31 83       	std	Z+1, r19	; 0x01
    1db2:	20 83       	st	Z, r18
    1db4:	ce 01       	movw	r24, r28
    1db6:	87 55       	subi	r24, 0x57	; 87
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	fc 01       	movw	r30, r24
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	8c 01       	movw	r16, r24
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCDBusyLoop+0x10f4>
    1dc8:	8c 01       	movw	r16, r24
    1dca:	ce 01       	movw	r24, r28
    1dcc:	87 55       	subi	r24, 0x57	; 87
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	11 83       	std	Z+1, r17	; 0x01
    1dd4:	00 83       	st	Z, r16
    1dd6:	28 c0       	rjmp	.+80     	; 0x1e28 <LCDBusyLoop+0x1158>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	04 56       	subi	r16, 0x64	; 100
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	ce 01       	movw	r24, r28
    1de0:	88 56       	subi	r24, 0x68	; 104
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	fc 01       	movw	r30, r24
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	80 83       	st	Z, r24
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	85 55       	subi	r24, 0x55	; 85
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	9e 01       	movw	r18, r28
    1e02:	24 56       	subi	r18, 0x64	; 100
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	f9 01       	movw	r30, r18
    1e08:	20 81       	ld	r18, Z
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e0e:	ce 01       	movw	r24, r28
    1e10:	85 55       	subi	r24, 0x55	; 85
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 81       	ld	r24, Z
    1e18:	18 2f       	mov	r17, r24
    1e1a:	1a 95       	dec	r17
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCDBusyLoop+0x114a>
    1e1e:	ce 01       	movw	r24, r28
    1e20:	85 55       	subi	r24, 0x55	; 85
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	fc 01       	movw	r30, r24
    1e26:	10 83       	st	Z, r17
		_delay_us(1);	//tEL
	}while(busy);
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <LCDBusyLoop+0x1160>
    1e2e:	4e c8       	rjmp	.-3940   	; 0xecc <LCDBusyLoop+0x1fc>

	CLEAR_RW();		//write mode
    1e30:	82 e3       	ldi	r24, 0x32	; 50
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	22 e3       	ldi	r18, 0x32	; 50
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	f9 01       	movw	r30, r18
    1e3a:	20 81       	ld	r18, Z
    1e3c:	2f 7b       	andi	r18, 0xBF	; 191
    1e3e:	fc 01       	movw	r30, r24
    1e40:	20 83       	st	Z, r18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    1e42:	87 e3       	ldi	r24, 0x37	; 55
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	27 e3       	ldi	r18, 0x37	; 55
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	20 81       	ld	r18, Z
    1e4e:	2f 60       	ori	r18, 0x0F	; 15
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18

}
    1e54:	c5 55       	subi	r28, 0x55	; 85
    1e56:	df 4f       	sbci	r29, 0xFF	; 255
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <LCDInit>:

void LCDInit(uint8_t style)
{
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	c8 55       	subi	r28, 0x58	; 88
    1e7a:	d0 40       	sbci	r29, 0x00	; 0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	9e 01       	movw	r18, r28
    1e88:	28 5a       	subi	r18, 0xA8	; 168
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	80 83       	st	Z, r24
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 ef       	ldi	r26, 0xF0	; 240
    1e96:	b1 e4       	ldi	r27, 0x41	; 65
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	9b 83       	std	Y+3, r25	; 0x03
    1e9c:	ac 83       	std	Y+4, r26	; 0x04
    1e9e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ea2:	7b 81       	ldd	r23, Y+3	; 0x03
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a e7       	ldi	r20, 0x7A	; 122
    1eae:	53 e4       	ldi	r21, 0x43	; 67
    1eb0:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8e 83       	std	Y+6, r24	; 0x06
    1eba:	9f 83       	std	Y+7, r25	; 0x07
    1ebc:	a8 87       	std	Y+8, r26	; 0x08
    1ebe:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1ec0:	11 e0       	ldi	r17, 0x01	; 1
    1ec2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ec4:	7f 81       	ldd	r23, Y+7	; 0x07
    1ec6:	88 85       	ldd	r24, Y+8	; 0x08
    1ec8:	99 85       	ldd	r25, Y+9	; 0x09
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <LCDInit+0x70>
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	11 23       	and	r17, r17
    1ede:	29 f0       	breq	.+10     	; 0x1eea <LCDInit+0x7e>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9b 87       	std	Y+11, r25	; 0x0b
    1ee6:	8a 87       	std	Y+10, r24	; 0x0a
    1ee8:	46 c0       	rjmp	.+140    	; 0x1f76 <LCDInit+0x10a>
	else if (__tmp > 65535)
    1eea:	11 e0       	ldi	r17, 0x01	; 1
    1eec:	6e 81       	ldd	r22, Y+6	; 0x06
    1eee:	7f 81       	ldd	r23, Y+7	; 0x07
    1ef0:	88 85       	ldd	r24, Y+8	; 0x08
    1ef2:	99 85       	ldd	r25, Y+9	; 0x09
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	0c f0       	brlt	.+2      	; 0x1f06 <LCDInit+0x9a>
    1f04:	10 e0       	ldi	r17, 0x00	; 0
    1f06:	11 23       	and	r17, r17
    1f08:	61 f1       	breq	.+88     	; 0x1f62 <LCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f0c:	7b 81       	ldd	r23, Y+3	; 0x03
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	9d 81       	ldd	r25, Y+5	; 0x05
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9b 87       	std	Y+11, r25	; 0x0b
    1f30:	8a 87       	std	Y+10, r24	; 0x0a
    1f32:	12 c0       	rjmp	.+36     	; 0x1f58 <LCDInit+0xec>
    1f34:	89 e1       	ldi	r24, 0x19	; 25
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9d 87       	std	Y+13, r25	; 0x0d
    1f3a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f40:	8c 01       	movw	r16, r24
    1f42:	c8 01       	movw	r24, r16
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCDInit+0xd8>
    1f48:	8c 01       	movw	r16, r24
    1f4a:	1d 87       	std	Y+13, r17	; 0x0d
    1f4c:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9b 87       	std	Y+11, r25	; 0x0b
    1f56:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	51 f7       	brne	.-44     	; 0x1f34 <LCDInit+0xc8>
    1f60:	17 c0       	rjmp	.+46     	; 0x1f90 <LCDInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6e 81       	ldd	r22, Y+6	; 0x06
    1f64:	7f 81       	ldd	r23, Y+7	; 0x07
    1f66:	88 85       	ldd	r24, Y+8	; 0x08
    1f68:	99 85       	ldd	r25, Y+9	; 0x09
    1f6a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9b 87       	std	Y+11, r25	; 0x0b
    1f74:	8a 87       	std	Y+10, r24	; 0x0a
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	9f 87       	std	Y+15, r25	; 0x0f
    1f7c:	8e 87       	std	Y+14, r24	; 0x0e
    1f7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f80:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f82:	8c 01       	movw	r16, r24
    1f84:	f8 01       	movw	r30, r16
    1f86:	31 97       	sbiw	r30, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCDInit+0x11a>
    1f8a:	8f 01       	movw	r16, r30
    1f8c:	1f 87       	std	Y+15, r17	; 0x0f
    1f8e:	0e 87       	std	Y+14, r16	; 0x0e
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    1f90:	87 e3       	ldi	r24, 0x37	; 55
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	27 e3       	ldi	r18, 0x37	; 55
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	f9 01       	movw	r30, r18
    1f9a:	20 81       	ld	r18, Z
    1f9c:	2f 60       	ori	r18, 0x0F	; 15
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	20 83       	st	Z, r18
	LCD_E_DDR|=(1<<LCD_E_POS);
    1fa2:	87 e3       	ldi	r24, 0x37	; 55
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	27 e3       	ldi	r18, 0x37	; 55
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	f9 01       	movw	r30, r18
    1fac:	20 81       	ld	r18, Z
    1fae:	20 61       	ori	r18, 0x10	; 16
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	20 83       	st	Z, r18
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    1fb4:	81 e3       	ldi	r24, 0x31	; 49
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	21 e3       	ldi	r18, 0x31	; 49
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	20 81       	ld	r18, Z
    1fc0:	28 60       	ori	r18, 0x08	; 8
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    1fc6:	81 e3       	ldi	r24, 0x31	; 49
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	21 e3       	ldi	r18, 0x31	; 49
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	f9 01       	movw	r30, r18
    1fd0:	20 81       	ld	r18, Z
    1fd2:	20 64       	ori	r18, 0x40	; 64
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	20 83       	st	Z, r18

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    1fd8:	88 e3       	ldi	r24, 0x38	; 56
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	28 e3       	ldi	r18, 0x38	; 56
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	20 81       	ld	r18, Z
    1fe4:	20 7f       	andi	r18, 0xF0	; 240
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	20 83       	st	Z, r18
	CLEAR_E();
    1fea:	88 e3       	ldi	r24, 0x38	; 56
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	28 e3       	ldi	r18, 0x38	; 56
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	20 81       	ld	r18, Z
    1ff6:	2f 7e       	andi	r18, 0xEF	; 239
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	20 83       	st	Z, r18
	CLEAR_RW();
    1ffc:	82 e3       	ldi	r24, 0x32	; 50
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	22 e3       	ldi	r18, 0x32	; 50
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	f9 01       	movw	r30, r18
    2006:	20 81       	ld	r18, Z
    2008:	2f 7b       	andi	r18, 0xBF	; 191
    200a:	fc 01       	movw	r30, r24
    200c:	20 83       	st	Z, r18
	CLEAR_RS();
    200e:	82 e3       	ldi	r24, 0x32	; 50
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	22 e3       	ldi	r18, 0x32	; 50
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	f9 01       	movw	r30, r18
    2018:	20 81       	ld	r18, Z
    201a:	27 7f       	andi	r18, 0xF7	; 247
    201c:	fc 01       	movw	r30, r24
    201e:	20 83       	st	Z, r18
    2020:	8a e9       	ldi	r24, 0x9A	; 154
    2022:	99 e9       	ldi	r25, 0x99	; 153
    2024:	a9 e9       	ldi	r26, 0x99	; 153
    2026:	be e3       	ldi	r27, 0x3E	; 62
    2028:	88 8b       	std	Y+16, r24	; 0x10
    202a:	99 8b       	std	Y+17, r25	; 0x11
    202c:	aa 8b       	std	Y+18, r26	; 0x12
    202e:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    2030:	68 89       	ldd	r22, Y+16	; 0x10
    2032:	79 89       	ldd	r23, Y+17	; 0x11
    2034:	8a 89       	ldd	r24, Y+18	; 0x12
    2036:	9b 89       	ldd	r25, Y+19	; 0x13
    2038:	2b ea       	ldi	r18, 0xAB	; 171
    203a:	3a ea       	ldi	r19, 0xAA	; 170
    203c:	4a ea       	ldi	r20, 0xAA	; 170
    203e:	5e e3       	ldi	r21, 0x3E	; 62
    2040:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8c 8b       	std	Y+20, r24	; 0x14
    204a:	9d 8b       	std	Y+21, r25	; 0x15
    204c:	ae 8b       	std	Y+22, r26	; 0x16
    204e:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	6c 89       	ldd	r22, Y+20	; 0x14
    2054:	7d 89       	ldd	r23, Y+21	; 0x15
    2056:	8e 89       	ldd	r24, Y+22	; 0x16
    2058:	9f 89       	ldd	r25, Y+23	; 0x17
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	0c f0       	brlt	.+2      	; 0x206c <LCDInit+0x200>
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	11 23       	and	r17, r17
    206e:	19 f0       	breq	.+6      	; 0x2076 <LCDInit+0x20a>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	88 8f       	std	Y+24, r24	; 0x18
    2074:	a3 c0       	rjmp	.+326    	; 0x21bc <LCDInit+0x350>
	else if (__tmp > 255)
    2076:	11 e0       	ldi	r17, 0x01	; 1
    2078:	6c 89       	ldd	r22, Y+20	; 0x14
    207a:	7d 89       	ldd	r23, Y+21	; 0x15
    207c:	8e 89       	ldd	r24, Y+22	; 0x16
    207e:	9f 89       	ldd	r25, Y+23	; 0x17
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	0c f0       	brlt	.+2      	; 0x2092 <LCDInit+0x226>
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	11 23       	and	r17, r17
    2094:	09 f4       	brne	.+2      	; 0x2098 <LCDInit+0x22c>
    2096:	89 c0       	rjmp	.+274    	; 0x21aa <LCDInit+0x33e>
	{
		_delay_ms(__us / 1000.0);
    2098:	68 89       	ldd	r22, Y+16	; 0x10
    209a:	79 89       	ldd	r23, Y+17	; 0x11
    209c:	8a 89       	ldd	r24, Y+18	; 0x12
    209e:	9b 89       	ldd	r25, Y+19	; 0x13
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	89 8f       	std	Y+25, r24	; 0x19
    20b2:	9a 8f       	std	Y+26, r25	; 0x1a
    20b4:	ab 8f       	std	Y+27, r26	; 0x1b
    20b6:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a e7       	ldi	r20, 0x7A	; 122
    20c6:	53 e4       	ldi	r21, 0x43	; 67
    20c8:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
    20d2:	9e 8f       	std	Y+30, r25	; 0x1e
    20d4:	af 8f       	std	Y+31, r26	; 0x1f
    20d6:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    20d8:	11 e0       	ldi	r17, 0x01	; 1
    20da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e0:	98 a1       	ldd	r25, Y+32	; 0x20
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <LCDInit+0x288>
    20f2:	10 e0       	ldi	r17, 0x00	; 0
    20f4:	11 23       	and	r17, r17
    20f6:	29 f0       	breq	.+10     	; 0x2102 <LCDInit+0x296>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	46 c0       	rjmp	.+140    	; 0x218e <LCDInit+0x322>
	else if (__tmp > 65535)
    2102:	11 e0       	ldi	r17, 0x01	; 1
    2104:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2106:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2108:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210a:	98 a1       	ldd	r25, Y+32	; 0x20
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	0c f0       	brlt	.+2      	; 0x211e <LCDInit+0x2b2>
    211c:	10 e0       	ldi	r17, 0x00	; 0
    211e:	11 23       	and	r17, r17
    2120:	61 f1       	breq	.+88     	; 0x217a <LCDInit+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	12 c0       	rjmp	.+36     	; 0x2170 <LCDInit+0x304>
    214c:	89 e1       	ldi	r24, 0x19	; 25
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9c a3       	std	Y+36, r25	; 0x24
    2152:	8b a3       	std	Y+35, r24	; 0x23
    2154:	8b a1       	ldd	r24, Y+35	; 0x23
    2156:	9c a1       	ldd	r25, Y+36	; 0x24
    2158:	8c 01       	movw	r16, r24
    215a:	c8 01       	movw	r24, r16
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCDInit+0x2f0>
    2160:	8c 01       	movw	r16, r24
    2162:	1c a3       	std	Y+36, r17	; 0x24
    2164:	0b a3       	std	Y+35, r16	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	89 a1       	ldd	r24, Y+33	; 0x21
    2168:	9a a1       	ldd	r25, Y+34	; 0x22
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	51 f7       	brne	.-44     	; 0x214c <LCDInit+0x2e0>
    2178:	28 c0       	rjmp	.+80     	; 0x21ca <LCDInit+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    217c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    217e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2180:	98 a1       	ldd	r25, Y+32	; 0x20
    2182:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	89 a1       	ldd	r24, Y+33	; 0x21
    2190:	9a a1       	ldd	r25, Y+34	; 0x22
    2192:	9e a3       	std	Y+38, r25	; 0x26
    2194:	8d a3       	std	Y+37, r24	; 0x25
    2196:	8d a1       	ldd	r24, Y+37	; 0x25
    2198:	9e a1       	ldd	r25, Y+38	; 0x26
    219a:	8c 01       	movw	r16, r24
    219c:	f8 01       	movw	r30, r16
    219e:	31 97       	sbiw	r30, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCDInit+0x332>
    21a2:	8f 01       	movw	r16, r30
    21a4:	1e a3       	std	Y+38, r17	; 0x26
    21a6:	0d a3       	std	Y+37, r16	; 0x25
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <LCDInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21aa:	6c 89       	ldd	r22, Y+20	; 0x14
    21ac:	7d 89       	ldd	r23, Y+21	; 0x15
    21ae:	8e 89       	ldd	r24, Y+22	; 0x16
    21b0:	9f 89       	ldd	r25, Y+23	; 0x17
    21b2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	88 8f       	std	Y+24, r24	; 0x18
    21bc:	88 8d       	ldd	r24, Y+24	; 0x18
    21be:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c0:	8f a1       	ldd	r24, Y+39	; 0x27
    21c2:	18 2f       	mov	r17, r24
    21c4:	1a 95       	dec	r17
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCDInit+0x358>
    21c8:	1f a3       	std	Y+39, r17	; 0x27

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    21ca:	88 e3       	ldi	r24, 0x38	; 56
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	28 e3       	ldi	r18, 0x38	; 56
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	f9 01       	movw	r30, r18
    21d4:	20 81       	ld	r18, Z
    21d6:	20 61       	ori	r18, 0x10	; 16
    21d8:	fc 01       	movw	r30, r24
    21da:	20 83       	st	Z, r18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    21dc:	88 e3       	ldi	r24, 0x38	; 56
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	28 e3       	ldi	r18, 0x38	; 56
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	f9 01       	movw	r30, r18
    21e6:	20 81       	ld	r18, Z
    21e8:	22 60       	ori	r18, 0x02	; 2
    21ea:	fc 01       	movw	r30, r24
    21ec:	20 83       	st	Z, r18
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e8       	ldi	r26, 0x80	; 128
    21f4:	bf e3       	ldi	r27, 0x3F	; 63
    21f6:	88 a7       	std	Y+40, r24	; 0x28
    21f8:	99 a7       	std	Y+41, r25	; 0x29
    21fa:	aa a7       	std	Y+42, r26	; 0x2a
    21fc:	bb a7       	std	Y+43, r27	; 0x2b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    21fe:	68 a5       	ldd	r22, Y+40	; 0x28
    2200:	79 a5       	ldd	r23, Y+41	; 0x29
    2202:	8a a5       	ldd	r24, Y+42	; 0x2a
    2204:	9b a5       	ldd	r25, Y+43	; 0x2b
    2206:	2b ea       	ldi	r18, 0xAB	; 171
    2208:	3a ea       	ldi	r19, 0xAA	; 170
    220a:	4a ea       	ldi	r20, 0xAA	; 170
    220c:	5e e3       	ldi	r21, 0x3E	; 62
    220e:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8c a7       	std	Y+44, r24	; 0x2c
    2218:	9d a7       	std	Y+45, r25	; 0x2d
    221a:	ae a7       	std	Y+46, r26	; 0x2e
    221c:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    221e:	11 e0       	ldi	r17, 0x01	; 1
    2220:	6c a5       	ldd	r22, Y+44	; 0x2c
    2222:	7d a5       	ldd	r23, Y+45	; 0x2d
    2224:	8e a5       	ldd	r24, Y+46	; 0x2e
    2226:	9f a5       	ldd	r25, Y+47	; 0x2f
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	0c f0       	brlt	.+2      	; 0x223a <LCDInit+0x3ce>
    2238:	10 e0       	ldi	r17, 0x00	; 0
    223a:	11 23       	and	r17, r17
    223c:	19 f0       	breq	.+6      	; 0x2244 <LCDInit+0x3d8>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	88 ab       	std	Y+48, r24	; 0x30
    2242:	a3 c0       	rjmp	.+326    	; 0x238a <LCDInit+0x51e>
	else if (__tmp > 255)
    2244:	11 e0       	ldi	r17, 0x01	; 1
    2246:	6c a5       	ldd	r22, Y+44	; 0x2c
    2248:	7d a5       	ldd	r23, Y+45	; 0x2d
    224a:	8e a5       	ldd	r24, Y+46	; 0x2e
    224c:	9f a5       	ldd	r25, Y+47	; 0x2f
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <LCDInit+0x3f4>
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	11 23       	and	r17, r17
    2262:	09 f4       	brne	.+2      	; 0x2266 <LCDInit+0x3fa>
    2264:	89 c0       	rjmp	.+274    	; 0x2378 <LCDInit+0x50c>
	{
		_delay_ms(__us / 1000.0);
    2266:	68 a5       	ldd	r22, Y+40	; 0x28
    2268:	79 a5       	ldd	r23, Y+41	; 0x29
    226a:	8a a5       	ldd	r24, Y+42	; 0x2a
    226c:	9b a5       	ldd	r25, Y+43	; 0x2b
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a e7       	ldi	r20, 0x7A	; 122
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	89 ab       	std	Y+49, r24	; 0x31
    2280:	9a ab       	std	Y+50, r25	; 0x32
    2282:	ab ab       	std	Y+51, r26	; 0x33
    2284:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2286:	69 a9       	ldd	r22, Y+49	; 0x31
    2288:	7a a9       	ldd	r23, Y+50	; 0x32
    228a:	8b a9       	ldd	r24, Y+51	; 0x33
    228c:	9c a9       	ldd	r25, Y+52	; 0x34
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a e7       	ldi	r20, 0x7A	; 122
    2294:	53 e4       	ldi	r21, 0x43	; 67
    2296:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8d ab       	std	Y+53, r24	; 0x35
    22a0:	9e ab       	std	Y+54, r25	; 0x36
    22a2:	af ab       	std	Y+55, r26	; 0x37
    22a4:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    22a6:	11 e0       	ldi	r17, 0x01	; 1
    22a8:	6d a9       	ldd	r22, Y+53	; 0x35
    22aa:	7e a9       	ldd	r23, Y+54	; 0x36
    22ac:	8f a9       	ldd	r24, Y+55	; 0x37
    22ae:	98 ad       	ldd	r25, Y+56	; 0x38
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <LCDInit+0x456>
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	11 23       	and	r17, r17
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <LCDInit+0x464>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9a af       	std	Y+58, r25	; 0x3a
    22cc:	89 af       	std	Y+57, r24	; 0x39
    22ce:	46 c0       	rjmp	.+140    	; 0x235c <LCDInit+0x4f0>
	else if (__tmp > 65535)
    22d0:	11 e0       	ldi	r17, 0x01	; 1
    22d2:	6d a9       	ldd	r22, Y+53	; 0x35
    22d4:	7e a9       	ldd	r23, Y+54	; 0x36
    22d6:	8f a9       	ldd	r24, Y+55	; 0x37
    22d8:	98 ad       	ldd	r25, Y+56	; 0x38
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <LCDInit+0x480>
    22ea:	10 e0       	ldi	r17, 0x00	; 0
    22ec:	11 23       	and	r17, r17
    22ee:	61 f1       	breq	.+88     	; 0x2348 <LCDInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9a af       	std	Y+58, r25	; 0x3a
    2316:	89 af       	std	Y+57, r24	; 0x39
    2318:	12 c0       	rjmp	.+36     	; 0x233e <LCDInit+0x4d2>
    231a:	89 e1       	ldi	r24, 0x19	; 25
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9c af       	std	Y+60, r25	; 0x3c
    2320:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2322:	8b ad       	ldd	r24, Y+59	; 0x3b
    2324:	9c ad       	ldd	r25, Y+60	; 0x3c
    2326:	8c 01       	movw	r16, r24
    2328:	c8 01       	movw	r24, r16
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCDInit+0x4be>
    232e:	8c 01       	movw	r16, r24
    2330:	1c af       	std	Y+60, r17	; 0x3c
    2332:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	89 ad       	ldd	r24, Y+57	; 0x39
    2336:	9a ad       	ldd	r25, Y+58	; 0x3a
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9a af       	std	Y+58, r25	; 0x3a
    233c:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	89 ad       	ldd	r24, Y+57	; 0x39
    2340:	9a ad       	ldd	r25, Y+58	; 0x3a
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	51 f7       	brne	.-44     	; 0x231a <LCDInit+0x4ae>
    2346:	28 c0       	rjmp	.+80     	; 0x2398 <LCDInit+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6d a9       	ldd	r22, Y+53	; 0x35
    234a:	7e a9       	ldd	r23, Y+54	; 0x36
    234c:	8f a9       	ldd	r24, Y+55	; 0x37
    234e:	98 ad       	ldd	r25, Y+56	; 0x38
    2350:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9a af       	std	Y+58, r25	; 0x3a
    235a:	89 af       	std	Y+57, r24	; 0x39
    235c:	89 ad       	ldd	r24, Y+57	; 0x39
    235e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2360:	9e af       	std	Y+62, r25	; 0x3e
    2362:	8d af       	std	Y+61, r24	; 0x3d
    2364:	8d ad       	ldd	r24, Y+61	; 0x3d
    2366:	9e ad       	ldd	r25, Y+62	; 0x3e
    2368:	8c 01       	movw	r16, r24
    236a:	f8 01       	movw	r30, r16
    236c:	31 97       	sbiw	r30, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCDInit+0x500>
    2370:	8f 01       	movw	r16, r30
    2372:	1e af       	std	Y+62, r17	; 0x3e
    2374:	0d af       	std	Y+61, r16	; 0x3d
    2376:	10 c0       	rjmp	.+32     	; 0x2398 <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2378:	6c a5       	ldd	r22, Y+44	; 0x2c
    237a:	7d a5       	ldd	r23, Y+45	; 0x2d
    237c:	8e a5       	ldd	r24, Y+46	; 0x2e
    237e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2380:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	88 ab       	std	Y+48, r24	; 0x30
    238a:	88 a9       	ldd	r24, Y+48	; 0x30
    238c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    238e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2390:	18 2f       	mov	r17, r24
    2392:	1a 95       	dec	r17
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCDInit+0x526>
    2396:	1f af       	std	Y+63, r17	; 0x3f
	_delay_us(1);
	CLEAR_E();
    2398:	88 e3       	ldi	r24, 0x38	; 56
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	28 e3       	ldi	r18, 0x38	; 56
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	f9 01       	movw	r30, r18
    23a2:	20 81       	ld	r18, Z
    23a4:	2f 7e       	andi	r18, 0xEF	; 239
    23a6:	fc 01       	movw	r30, r24
    23a8:	20 83       	st	Z, r18
    23aa:	9e 01       	movw	r18, r28
    23ac:	20 5c       	subi	r18, 0xC0	; 192
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	f9 01       	movw	r30, r18
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    23c2:	8e 01       	movw	r16, r28
    23c4:	0c 5b       	subi	r16, 0xBC	; 188
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	ce 01       	movw	r24, r28
    23ca:	80 5c       	subi	r24, 0xC0	; 192
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	fc 01       	movw	r30, r24
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	2b ea       	ldi	r18, 0xAB	; 171
    23da:	3a ea       	ldi	r19, 0xAA	; 170
    23dc:	4a ea       	ldi	r20, 0xAA	; 170
    23de:	5e e3       	ldi	r21, 0x3E	; 62
    23e0:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	f8 01       	movw	r30, r16
    23ea:	80 83       	st	Z, r24
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	a2 83       	std	Z+2, r26	; 0x02
    23f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f2:	ce 01       	movw	r24, r28
    23f4:	8c 5b       	subi	r24, 0xBC	; 188
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	11 e0       	ldi	r17, 0x01	; 1
    23fa:	fc 01       	movw	r30, r24
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	0c f0       	brlt	.+2      	; 0x2416 <LCDInit+0x5aa>
    2414:	10 e0       	ldi	r17, 0x00	; 0
    2416:	11 23       	and	r17, r17
    2418:	39 f0       	breq	.+14     	; 0x2428 <LCDInit+0x5bc>
		__ticks = 1;
    241a:	ce 01       	movw	r24, r28
    241c:	88 5b       	subi	r24, 0xB8	; 184
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	fc 01       	movw	r30, r24
    2424:	20 83       	st	Z, r18
    2426:	05 c1       	rjmp	.+522    	; 0x2632 <LCDInit+0x7c6>
	else if (__tmp > 255)
    2428:	ce 01       	movw	r24, r28
    242a:	8c 5b       	subi	r24, 0xBC	; 188
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	11 e0       	ldi	r17, 0x01	; 1
    2430:	fc 01       	movw	r30, r24
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	53 e4       	ldi	r21, 0x43	; 67
    2442:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	0c f0       	brlt	.+2      	; 0x244c <LCDInit+0x5e0>
    244a:	10 e0       	ldi	r17, 0x00	; 0
    244c:	11 23       	and	r17, r17
    244e:	09 f4       	brne	.+2      	; 0x2452 <LCDInit+0x5e6>
    2450:	df c0       	rjmp	.+446    	; 0x2610 <LCDInit+0x7a4>
	{
		_delay_ms(__us / 1000.0);
    2452:	ce 01       	movw	r24, r28
    2454:	80 5c       	subi	r24, 0xC0	; 192
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	fc 01       	movw	r30, r24
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a e7       	ldi	r20, 0x7A	; 122
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 a3 19 	call	0x3346	; 0x3346 <__divsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9e 01       	movw	r18, r28
    2474:	27 5b       	subi	r18, 0xB7	; 183
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	f9 01       	movw	r30, r18
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2482:	8e 01       	movw	r16, r28
    2484:	03 5b       	subi	r16, 0xB3	; 179
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	ce 01       	movw	r24, r28
    248a:	87 5b       	subi	r24, 0xB7	; 183
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	fc 01       	movw	r30, r24
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	53 e4       	ldi	r21, 0x43	; 67
    24a0:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	f8 01       	movw	r30, r16
    24aa:	80 83       	st	Z, r24
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	a2 83       	std	Z+2, r26	; 0x02
    24b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b2:	ce 01       	movw	r24, r28
    24b4:	83 5b       	subi	r24, 0xB3	; 179
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	11 e0       	ldi	r17, 0x01	; 1
    24ba:	fc 01       	movw	r30, r24
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	0c f0       	brlt	.+2      	; 0x24d6 <LCDInit+0x66a>
    24d4:	10 e0       	ldi	r17, 0x00	; 0
    24d6:	11 23       	and	r17, r17
    24d8:	49 f0       	breq	.+18     	; 0x24ec <LCDInit+0x680>
		__ticks = 1;
    24da:	ce 01       	movw	r24, r28
    24dc:	8f 5a       	subi	r24, 0xAF	; 175
    24de:	9f 4f       	sbci	r25, 0xFF	; 255
    24e0:	21 e0       	ldi	r18, 0x01	; 1
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	fc 01       	movw	r30, r24
    24e6:	31 83       	std	Z+1, r19	; 0x01
    24e8:	20 83       	st	Z, r18
    24ea:	74 c0       	rjmp	.+232    	; 0x25d4 <LCDInit+0x768>
	else if (__tmp > 65535)
    24ec:	ce 01       	movw	r24, r28
    24ee:	83 5b       	subi	r24, 0xB3	; 179
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	11 e0       	ldi	r17, 0x01	; 1
    24f4:	fc 01       	movw	r30, r24
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	0c f0       	brlt	.+2      	; 0x2510 <LCDInit+0x6a4>
    250e:	10 e0       	ldi	r17, 0x00	; 0
    2510:	11 23       	and	r17, r17
    2512:	09 f4       	brne	.+2      	; 0x2516 <LCDInit+0x6aa>
    2514:	4d c0       	rjmp	.+154    	; 0x25b0 <LCDInit+0x744>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	ce 01       	movw	r24, r28
    2518:	87 5b       	subi	r24, 0xB7	; 183
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	fc 01       	movw	r30, r24
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8e 01       	movw	r16, r28
    2538:	0f 5a       	subi	r16, 0xAF	; 175
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	f8 01       	movw	r30, r16
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	27 c0       	rjmp	.+78     	; 0x259e <LCDInit+0x732>
    2550:	ce 01       	movw	r24, r28
    2552:	8d 5a       	subi	r24, 0xAD	; 173
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	29 e1       	ldi	r18, 0x19	; 25
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	fc 01       	movw	r30, r24
    255c:	31 83       	std	Z+1, r19	; 0x01
    255e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2560:	ce 01       	movw	r24, r28
    2562:	8d 5a       	subi	r24, 0xAD	; 173
    2564:	9f 4f       	sbci	r25, 0xFF	; 255
    2566:	fc 01       	movw	r30, r24
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	8c 01       	movw	r16, r24
    256e:	c8 01       	movw	r24, r16
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCDInit+0x704>
    2574:	8c 01       	movw	r16, r24
    2576:	ce 01       	movw	r24, r28
    2578:	8d 5a       	subi	r24, 0xAD	; 173
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	fc 01       	movw	r30, r24
    257e:	11 83       	std	Z+1, r17	; 0x01
    2580:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	ce 01       	movw	r24, r28
    2584:	8f 5a       	subi	r24, 0xAF	; 175
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	9e 01       	movw	r18, r28
    258a:	2f 5a       	subi	r18, 0xAF	; 175
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	f9 01       	movw	r30, r18
    2590:	20 81       	ld	r18, Z
    2592:	31 81       	ldd	r19, Z+1	; 0x01
    2594:	21 50       	subi	r18, 0x01	; 1
    2596:	30 40       	sbci	r19, 0x00	; 0
    2598:	fc 01       	movw	r30, r24
    259a:	31 83       	std	Z+1, r19	; 0x01
    259c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	ce 01       	movw	r24, r28
    25a0:	8f 5a       	subi	r24, 0xAF	; 175
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	fc 01       	movw	r30, r24
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	89 f6       	brne	.-94     	; 0x2550 <LCDInit+0x6e4>
    25ae:	58 c0       	rjmp	.+176    	; 0x2660 <LCDInit+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	8e 01       	movw	r16, r28
    25b2:	0f 5a       	subi	r16, 0xAF	; 175
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	ce 01       	movw	r24, r28
    25b8:	83 5b       	subi	r24, 0xB3	; 179
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	fc 01       	movw	r30, r24
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	f8 01       	movw	r30, r16
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	ce 01       	movw	r24, r28
    25d6:	8b 5a       	subi	r24, 0xAB	; 171
    25d8:	9f 4f       	sbci	r25, 0xFF	; 255
    25da:	9e 01       	movw	r18, r28
    25dc:	2f 5a       	subi	r18, 0xAF	; 175
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	f9 01       	movw	r30, r18
    25e2:	20 81       	ld	r18, Z
    25e4:	31 81       	ldd	r19, Z+1	; 0x01
    25e6:	fc 01       	movw	r30, r24
    25e8:	31 83       	std	Z+1, r19	; 0x01
    25ea:	20 83       	st	Z, r18
    25ec:	ce 01       	movw	r24, r28
    25ee:	8b 5a       	subi	r24, 0xAB	; 171
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	fc 01       	movw	r30, r24
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	8c 01       	movw	r16, r24
    25fa:	c8 01       	movw	r24, r16
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCDInit+0x790>
    2600:	8c 01       	movw	r16, r24
    2602:	ce 01       	movw	r24, r28
    2604:	8b 5a       	subi	r24, 0xAB	; 171
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	fc 01       	movw	r30, r24
    260a:	11 83       	std	Z+1, r17	; 0x01
    260c:	00 83       	st	Z, r16
    260e:	28 c0       	rjmp	.+80     	; 0x2660 <LCDInit+0x7f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2610:	8e 01       	movw	r16, r28
    2612:	08 5b       	subi	r16, 0xB8	; 184
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	ce 01       	movw	r24, r28
    2618:	8c 5b       	subi	r24, 0xBC	; 188
    261a:	9f 4f       	sbci	r25, 0xFF	; 255
    261c:	fc 01       	movw	r30, r24
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	ce 01       	movw	r24, r28
    2634:	89 5a       	subi	r24, 0xA9	; 169
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	9e 01       	movw	r18, r28
    263a:	28 5b       	subi	r18, 0xB8	; 184
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	f9 01       	movw	r30, r18
    2640:	20 81       	ld	r18, Z
    2642:	fc 01       	movw	r30, r24
    2644:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2646:	ce 01       	movw	r24, r28
    2648:	89 5a       	subi	r24, 0xA9	; 169
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	fc 01       	movw	r30, r24
    264e:	80 81       	ld	r24, Z
    2650:	18 2f       	mov	r17, r24
    2652:	1a 95       	dec	r17
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCDInit+0x7e6>
    2656:	ce 01       	movw	r24, r28
    2658:	89 5a       	subi	r24, 0xA9	; 169
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	fc 01       	movw	r30, r24
    265e:	10 83       	st	Z, r17
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    2660:	0e 94 68 06 	call	0xcd0	; 0xcd0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    2664:	ce 01       	movw	r24, r28
    2666:	88 5a       	subi	r24, 0xA8	; 168
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	fc 01       	movw	r30, r24
    266c:	80 81       	ld	r24, Z
    266e:	8c 60       	ori	r24, 0x0C	; 12
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    2676:	88 e2       	ldi	r24, 0x28	; 40
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    267e:	80 e4       	ldi	r24, 0x40	; 64
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    2686:	19 82       	std	Y+1, r1	; 0x01
    2688:	0d c0       	rjmp	.+26     	; 0x26a4 <LCDInit+0x838>
		LCDData(__cgram[__i]);
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	80 5a       	subi	r24, 0xA0	; 160
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	fc 01       	movw	r30, r24
    2696:	80 81       	ld	r24, Z
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	80 34       	cpi	r24, 0x40	; 64
    26a8:	80 f3       	brcs	.-32     	; 0x268a <LCDInit+0x81e>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>

}
    26b2:	c8 5a       	subi	r28, 0xA8	; 168
    26b4:	df 4f       	sbci	r29, 0xFF	; 255
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	08 95       	ret

000026ca <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <LCDWriteString+0x6>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	9b 83       	std	Y+3, r25	; 0x03
    26d8:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    26da:	34 c0       	rjmp	.+104    	; 0x2744 <LCDWriteString+0x7a>
 {
 	//Custom Char Support
	if(*msg=='%')
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	9b 81       	ldd	r25, Y+3	; 0x03
    26e0:	fc 01       	movw	r30, r24
    26e2:	80 81       	ld	r24, Z
    26e4:	85 32       	cpi	r24, 0x25	; 37
    26e6:	11 f5       	brne	.+68     	; 0x272c <LCDWriteString+0x62>
	{
		msg++;
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	9b 83       	std	Y+3, r25	; 0x03
    26f0:	8a 83       	std	Y+2, r24	; 0x02
		int8_t cc=*msg-'0';
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	fc 01       	movw	r30, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	80 53       	subi	r24, 0x30	; 48
    26fc:	89 83       	std	Y+1, r24	; 0x01

		if(cc>=0 && cc<=7)
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	88 23       	and	r24, r24
    2702:	44 f0       	brlt	.+16     	; 0x2714 <LCDWriteString+0x4a>
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	88 30       	cpi	r24, 0x08	; 8
    2708:	2c f4       	brge	.+10     	; 0x2714 <LCDWriteString+0x4a>
		{
			LCDData(cc);
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
    2712:	13 c0       	rjmp	.+38     	; 0x273a <LCDWriteString+0x70>
		}
		else
		{
			LCDData('%');
    2714:	85 e2       	ldi	r24, 0x25	; 37
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
			LCDData(*msg);
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	80 81       	ld	r24, Z
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
    272a:	07 c0       	rjmp	.+14     	; 0x273a <LCDWriteString+0x70>
		}
	}
	else
	{
		LCDData(*msg);
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	}
	msg++;
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	9b 83       	std	Y+3, r25	; 0x03
    2742:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	fc 01       	movw	r30, r24
    274a:	80 81       	ld	r24, Z
    274c:	88 23       	and	r24, r24
    274e:	31 f6       	brne	.-116    	; 0x26dc <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	2d 97       	sbiw	r28, 0x0d	; 13
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	9b 87       	std	Y+11, r25	; 0x0b
    2772:	8a 87       	std	Y+10, r24	; 0x0a
    2774:	7d 87       	std	Y+13, r23	; 0x0d
    2776:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    2778:	25 e0       	ldi	r18, 0x05	; 5
    277a:	ce 01       	movw	r24, r28
    277c:	05 96       	adiw	r24, 0x05	; 5
    277e:	fc 01       	movw	r30, r24
    2780:	32 2f       	mov	r19, r18
    2782:	11 92       	st	Z+, r1
    2784:	3a 95       	dec	r19
    2786:	e9 f7       	brne	.-6      	; 0x2782 <LCDWriteInt+0x26>
	int i=4,j=0;
    2788:	84 e0       	ldi	r24, 0x04	; 4
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	1c 82       	std	Y+4, r1	; 0x04
    2792:	1b 82       	std	Y+3, r1	; 0x03
	while(val)
    2794:	20 c0       	rjmp	.+64     	; 0x27d6 <LCDWriteInt+0x7a>
	{
	str[i]=val%10;
    2796:	8a 85       	ldd	r24, Y+10	; 0x0a
    2798:	9b 85       	ldd	r25, Y+11	; 0x0b
    279a:	2a e0       	ldi	r18, 0x0A	; 10
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	b9 01       	movw	r22, r18
    27a0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__divmodhi4>
    27a4:	48 2f       	mov	r20, r24
    27a6:	9e 01       	movw	r18, r28
    27a8:	2b 5f       	subi	r18, 0xFB	; 251
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	82 0f       	add	r24, r18
    27b2:	93 1f       	adc	r25, r19
    27b4:	fc 01       	movw	r30, r24
    27b6:	40 83       	st	Z, r20
	val=val/10;
    27b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    27bc:	2a e0       	ldi	r18, 0x0A	; 10
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__divmodhi4>
    27c6:	9b 01       	movw	r18, r22
    27c8:	3b 87       	std	Y+11, r19	; 0x0b
    27ca:	2a 87       	std	Y+10, r18	; 0x0a
	i--;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	9a 83       	std	Y+2, r25	; 0x02
    27d4:	89 83       	std	Y+1, r24	; 0x01

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    27d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	e1 f6       	brne	.-72     	; 0x2796 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    27de:	8c 85       	ldd	r24, Y+12	; 0x0c
    27e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    27e2:	ff ef       	ldi	r31, 0xFF	; 255
    27e4:	8f 3f       	cpi	r24, 0xFF	; 255
    27e6:	9f 07       	cpc	r25, r31
    27e8:	91 f4       	brne	.+36     	; 0x280e <LCDWriteInt+0xb2>
		while(str[j]==0) j++;
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <LCDWriteInt+0x9a>
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	9c 83       	std	Y+4, r25	; 0x04
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	9e 01       	movw	r18, r28
    27f8:	2b 5f       	subi	r18, 0xFB	; 251
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	82 0f       	add	r24, r18
    2802:	93 1f       	adc	r25, r19
    2804:	fc 01       	movw	r30, r24
    2806:	80 81       	ld	r24, Z
    2808:	88 23       	and	r24, r24
    280a:	81 f3       	breq	.-32     	; 0x27ec <LCDWriteInt+0x90>
    280c:	0a c0       	rjmp	.+20     	; 0x2822 <LCDWriteInt+0xc6>
	else
		j=5-field_length;
    280e:	25 e0       	ldi	r18, 0x05	; 5
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	8c 85       	ldd	r24, Y+12	; 0x0c
    2814:	9d 85       	ldd	r25, Y+13	; 0x0d
    2816:	a9 01       	movw	r20, r18
    2818:	48 1b       	sub	r20, r24
    281a:	59 0b       	sbc	r21, r25
    281c:	ca 01       	movw	r24, r20
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03

	if(val<0) LCDData('-');
    2822:	8a 85       	ldd	r24, Y+10	; 0x0a
    2824:	9b 85       	ldd	r25, Y+11	; 0x0b
    2826:	99 23       	and	r25, r25
    2828:	24 f4       	brge	.+8      	; 0x2832 <LCDWriteInt+0xd6>
    282a:	8d e2       	ldi	r24, 0x2D	; 45
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	for(i=j;i<5;i++)
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	12 c0       	rjmp	.+36     	; 0x2860 <LCDWriteInt+0x104>
	{
	LCDData(48+str[i]);
    283c:	9e 01       	movw	r18, r28
    283e:	2b 5f       	subi	r18, 0xFB	; 251
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	82 0f       	add	r24, r18
    2848:	93 1f       	adc	r25, r19
    284a:	fc 01       	movw	r30, r24
    284c:	80 81       	ld	r24, Z
    284e:	80 5d       	subi	r24, 0xD0	; 208
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	85 30       	cpi	r24, 0x05	; 5
    2866:	91 05       	cpc	r25, r1
    2868:	4c f3       	brlt	.-46     	; 0x283c <LCDWriteInt+0xe0>
	{
	LCDData(48+str[i]);
	}
}
    286a:	2d 96       	adiw	r28, 0x0d	; 13
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <LCDGotoXY+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	6a 83       	std	Y+2, r22	; 0x02
 	if(x>=20) return;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	84 31       	cpi	r24, 0x14	; 20
    288e:	28 f5       	brcc	.+74     	; 0x28da <LCDGotoXY+0x5e>

	#ifdef LCD_TYPE_204
	
	switch(y)
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	91 05       	cpc	r25, r1
    289a:	51 f0       	breq	.+20     	; 0x28b0 <LCDGotoXY+0x34>
    289c:	82 30       	cpi	r24, 0x02	; 2
    289e:	91 05       	cpc	r25, r1
    28a0:	9c f0       	brlt	.+38     	; 0x28c8 <LCDGotoXY+0x4c>
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	91 05       	cpc	r25, r1
    28a6:	41 f0       	breq	.+16     	; 0x28b8 <LCDGotoXY+0x3c>
    28a8:	83 30       	cpi	r24, 0x03	; 3
    28aa:	91 05       	cpc	r25, r1
    28ac:	49 f0       	breq	.+18     	; 0x28c0 <LCDGotoXY+0x44>
    28ae:	0d c0       	rjmp	.+26     	; 0x28ca <LCDGotoXY+0x4e>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	80 64       	ori	r24, 0x40	; 64
    28b4:	89 83       	std	Y+1, r24	; 0x01
			break;
    28b6:	09 c0       	rjmp	.+18     	; 0x28ca <LCDGotoXY+0x4e>
		case 2:
			x+=0x14;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	8c 5e       	subi	r24, 0xEC	; 236
    28bc:	89 83       	std	Y+1, r24	; 0x01
			break;
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <LCDGotoXY+0x4e>
		case 3:
			x+=0x54;
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	8c 5a       	subi	r24, 0xAC	; 172
    28c4:	89 83       	std	Y+1, r24	; 0x01
			break;
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <LCDGotoXY+0x4e>
	#ifdef LCD_TYPE_204
	
	switch(y)
	{
		case 0:
			break;
    28c8:	00 00       	nop
			break;
	}

	#endif

	x|=0b10000000;
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	80 68       	ori	r24, 0x80	; 128
    28ce:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <LCDGotoXY+0x60>
	LCDData(48+str[i]);
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
    28da:	00 00       	nop

	#endif

	x|=0b10000000;
  	LCDCmd(x);
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <GetKeyPressed>:
int count;
int i;


uint8_t GetKeyPressed()
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <GetKeyPressed+0x6>
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t c,r;
	PORTA|=0X0F;
    28f0:	8b e3       	ldi	r24, 0x3B	; 59
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	2b e3       	ldi	r18, 0x3B	; 59
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	f9 01       	movw	r30, r18
    28fa:	20 81       	ld	r18, Z
    28fc:	2f 60       	ori	r18, 0x0F	; 15
    28fe:	fc 01       	movw	r30, r24
    2900:	20 83       	st	Z, r18
	for (c=0; c<3; c++)
    2902:	19 82       	std	Y+1, r1	; 0x01
    2904:	46 c0       	rjmp	.+140    	; 0x2992 <GetKeyPressed+0xac>
	{
		DDRA&=~(0X7F);
    2906:	8a e3       	ldi	r24, 0x3A	; 58
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	2a e3       	ldi	r18, 0x3A	; 58
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	f9 01       	movw	r30, r18
    2910:	20 81       	ld	r18, Z
    2912:	20 78       	andi	r18, 0x80	; 128
    2914:	fc 01       	movw	r30, r24
    2916:	20 83       	st	Z, r18
		DDRA|=(0x40>>c);
    2918:	8a e3       	ldi	r24, 0x3A	; 58
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	2a e3       	ldi	r18, 0x3A	; 58
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	f9 01       	movw	r30, r18
    2922:	20 81       	ld	r18, Z
    2924:	62 2f       	mov	r22, r18
    2926:	29 81       	ldd	r18, Y+1	; 0x01
    2928:	42 2f       	mov	r20, r18
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	20 e4       	ldi	r18, 0x40	; 64
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	04 2e       	mov	r0, r20
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <GetKeyPressed+0x52>
    2934:	35 95       	asr	r19
    2936:	27 95       	ror	r18
    2938:	0a 94       	dec	r0
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <GetKeyPressed+0x4e>
    293c:	26 2b       	or	r18, r22
    293e:	fc 01       	movw	r30, r24
    2940:	20 83       	st	Z, r18
		for (r=0; r<4; r++)
    2942:	1a 82       	std	Y+2, r1	; 0x02
    2944:	20 c0       	rjmp	.+64     	; 0x2986 <GetKeyPressed+0xa0>
		{
			if (!(PINA&(0x08>>r)))
    2946:	89 e3       	ldi	r24, 0x39	; 57
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	fc 01       	movw	r30, r24
    294c:	80 81       	ld	r24, Z
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	48 2f       	mov	r20, r24
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	88 e0       	ldi	r24, 0x08	; 8
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	04 2e       	mov	r0, r20
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <GetKeyPressed+0x7e>
    2960:	95 95       	asr	r25
    2962:	87 95       	ror	r24
    2964:	0a 94       	dec	r0
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <GetKeyPressed+0x7a>
    2968:	82 23       	and	r24, r18
    296a:	93 23       	and	r25, r19
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	41 f4       	brne	.+16     	; 0x2980 <GetKeyPressed+0x9a>
			{
				return r*3+1+c;
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	98 2f       	mov	r25, r24
    2974:	99 0f       	add	r25, r25
    2976:	98 0f       	add	r25, r24
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	89 0f       	add	r24, r25
    297c:	8f 5f       	subi	r24, 0xFF	; 255
    297e:	0e c0       	rjmp	.+28     	; 0x299c <GetKeyPressed+0xb6>
	PORTA|=0X0F;
	for (c=0; c<3; c++)
	{
		DDRA&=~(0X7F);
		DDRA|=(0x40>>c);
		for (r=0; r<4; r++)
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	8f 5f       	subi	r24, 0xFF	; 255
    2984:	8a 83       	std	Y+2, r24	; 0x02
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	84 30       	cpi	r24, 0x04	; 4
    298a:	e8 f2       	brcs	.-70     	; 0x2946 <GetKeyPressed+0x60>

uint8_t GetKeyPressed()
{
	uint8_t c,r;
	PORTA|=0X0F;
	for (c=0; c<3; c++)
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	8f 5f       	subi	r24, 0xFF	; 255
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	08 f4       	brcc	.+2      	; 0x299a <GetKeyPressed+0xb4>
    2998:	b6 cf       	rjmp	.-148    	; 0x2906 <GetKeyPressed+0x20>
			{
				return r*3+1+c;
			}
		}
	}
	return 0xff;//Indicate no key pressed
    299a:	8f ef       	ldi	r24, 0xFF	; 255
	
		
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <main>:

int main(void)
{
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	aa 97       	sbiw	r28, 0x2a	; 42
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
  
 LCDInit(LS_NONE);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <LCDInit>

DDRC=0XFF;
    29c4:	84 e3       	ldi	r24, 0x34	; 52
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	2f ef       	ldi	r18, 0xFF	; 255
    29ca:	fc 01       	movw	r30, r24
    29cc:	20 83       	st	Z, r18
 
 LCDWriteString("Welcome");
    29ce:	80 ea       	ldi	r24, 0xA0	; 160
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	aa ef       	ldi	r26, 0xFA	; 250
    29dc:	b3 e4       	ldi	r27, 0x43	; 67
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	ab 83       	std	Y+3, r26	; 0x03
    29e4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	69 81       	ldd	r22, Y+1	; 0x01
    29e8:	7a 81       	ldd	r23, Y+2	; 0x02
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a e7       	ldi	r20, 0x7A	; 122
    29f4:	53 e4       	ldi	r21, 0x43	; 67
    29f6:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	af 83       	std	Y+7, r26	; 0x07
    2a04:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a06:	11 e0       	ldi	r17, 0x01	; 1
    2a08:	6d 81       	ldd	r22, Y+5	; 0x05
    2a0a:	7e 81       	ldd	r23, Y+6	; 0x06
    2a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0e:	98 85       	ldd	r25, Y+8	; 0x08
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	0c f0       	brlt	.+2      	; 0x2a22 <main+0x7c>
    2a20:	10 e0       	ldi	r17, 0x00	; 0
    2a22:	11 23       	and	r17, r17
    2a24:	29 f0       	breq	.+10     	; 0x2a30 <main+0x8a>
		__ticks = 1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9a 87       	std	Y+10, r25	; 0x0a
    2a2c:	89 87       	std	Y+9, r24	; 0x09
    2a2e:	46 c0       	rjmp	.+140    	; 0x2abc <main+0x116>
	else if (__tmp > 65535)
    2a30:	11 e0       	ldi	r17, 0x01	; 1
    2a32:	6d 81       	ldd	r22, Y+5	; 0x05
    2a34:	7e 81       	ldd	r23, Y+6	; 0x06
    2a36:	8f 81       	ldd	r24, Y+7	; 0x07
    2a38:	98 85       	ldd	r25, Y+8	; 0x08
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	0c f0       	brlt	.+2      	; 0x2a4c <main+0xa6>
    2a4a:	10 e0       	ldi	r17, 0x00	; 0
    2a4c:	11 23       	and	r17, r17
    2a4e:	61 f1       	breq	.+88     	; 0x2aa8 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	69 81       	ldd	r22, Y+1	; 0x01
    2a52:	7a 81       	ldd	r23, Y+2	; 0x02
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9a 87       	std	Y+10, r25	; 0x0a
    2a76:	89 87       	std	Y+9, r24	; 0x09
    2a78:	12 c0       	rjmp	.+36     	; 0x2a9e <main+0xf8>
    2a7a:	89 e1       	ldi	r24, 0x19	; 25
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 87       	std	Y+12, r25	; 0x0c
    2a80:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a82:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a84:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a86:	8c 01       	movw	r16, r24
    2a88:	c8 01       	movw	r24, r16
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <main+0xe4>
    2a8e:	8c 01       	movw	r16, r24
    2a90:	1c 87       	std	Y+12, r17	; 0x0c
    2a92:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9a 87       	std	Y+10, r25	; 0x0a
    2a9c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	89 85       	ldd	r24, Y+9	; 0x09
    2aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	51 f7       	brne	.-44     	; 0x2a7a <main+0xd4>
    2aa6:	17 c0       	rjmp	.+46     	; 0x2ad6 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	6d 81       	ldd	r22, Y+5	; 0x05
    2aaa:	7e 81       	ldd	r23, Y+6	; 0x06
    2aac:	8f 81       	ldd	r24, Y+7	; 0x07
    2aae:	98 85       	ldd	r25, Y+8	; 0x08
    2ab0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9a 87       	std	Y+10, r25	; 0x0a
    2aba:	89 87       	std	Y+9, r24	; 0x09
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	9e 87       	std	Y+14, r25	; 0x0e
    2ac2:	8d 87       	std	Y+13, r24	; 0x0d
    2ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac8:	8c 01       	movw	r16, r24
    2aca:	f8 01       	movw	r30, r16
    2acc:	31 97       	sbiw	r30, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <main+0x126>
    2ad0:	8f 01       	movw	r16, r30
    2ad2:	1e 87       	std	Y+14, r17	; 0x0e
    2ad4:	0d 87       	std	Y+13, r16	; 0x0d
 _delay_ms(500);
  LCDClear();
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
 LCDWriteString("Enter password");
    2ade:	88 ea       	ldi	r24, 0xA8	; 168
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	aa ef       	ldi	r26, 0xFA	; 250
    2aec:	b3 e4       	ldi	r27, 0x43	; 67
    2aee:	8f 87       	std	Y+15, r24	; 0x0f
    2af0:	98 8b       	std	Y+16, r25	; 0x10
    2af2:	a9 8b       	std	Y+17, r26	; 0x11
    2af4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2af8:	78 89       	ldd	r23, Y+16	; 0x10
    2afa:	89 89       	ldd	r24, Y+17	; 0x11
    2afc:	9a 89       	ldd	r25, Y+18	; 0x12
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a e7       	ldi	r20, 0x7A	; 122
    2b04:	53 e4       	ldi	r21, 0x43	; 67
    2b06:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8b 8b       	std	Y+19, r24	; 0x13
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
    2b12:	ad 8b       	std	Y+21, r26	; 0x15
    2b14:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2b16:	11 e0       	ldi	r17, 0x01	; 1
    2b18:	6b 89       	ldd	r22, Y+19	; 0x13
    2b1a:	7c 89       	ldd	r23, Y+20	; 0x14
    2b1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2b1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e8       	ldi	r20, 0x80	; 128
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2b2c:	88 23       	and	r24, r24
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <main+0x18c>
    2b30:	10 e0       	ldi	r17, 0x00	; 0
    2b32:	11 23       	and	r17, r17
    2b34:	29 f0       	breq	.+10     	; 0x2b40 <main+0x19a>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	98 8f       	std	Y+24, r25	; 0x18
    2b3c:	8f 8b       	std	Y+23, r24	; 0x17
    2b3e:	46 c0       	rjmp	.+140    	; 0x2bcc <main+0x226>
	else if (__tmp > 65535)
    2b40:	11 e0       	ldi	r17, 0x01	; 1
    2b42:	6b 89       	ldd	r22, Y+19	; 0x13
    2b44:	7c 89       	ldd	r23, Y+20	; 0x14
    2b46:	8d 89       	ldd	r24, Y+21	; 0x15
    2b48:	9e 89       	ldd	r25, Y+22	; 0x16
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	0c f0       	brlt	.+2      	; 0x2b5c <main+0x1b6>
    2b5a:	10 e0       	ldi	r17, 0x00	; 0
    2b5c:	11 23       	and	r17, r17
    2b5e:	61 f1       	breq	.+88     	; 0x2bb8 <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b62:	78 89       	ldd	r23, Y+16	; 0x10
    2b64:	89 89       	ldd	r24, Y+17	; 0x11
    2b66:	9a 89       	ldd	r25, Y+18	; 0x12
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	98 8f       	std	Y+24, r25	; 0x18
    2b86:	8f 8b       	std	Y+23, r24	; 0x17
    2b88:	12 c0       	rjmp	.+36     	; 0x2bae <main+0x208>
    2b8a:	89 e1       	ldi	r24, 0x19	; 25
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b90:	89 8f       	std	Y+25, r24	; 0x19
    2b92:	89 8d       	ldd	r24, Y+25	; 0x19
    2b94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b96:	8c 01       	movw	r16, r24
    2b98:	c8 01       	movw	r24, r16
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <main+0x1f4>
    2b9e:	8c 01       	movw	r16, r24
    2ba0:	1a 8f       	std	Y+26, r17	; 0x1a
    2ba2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	98 8f       	std	Y+24, r25	; 0x18
    2bac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	51 f7       	brne	.-44     	; 0x2b8a <main+0x1e4>
    2bb6:	17 c0       	rjmp	.+46     	; 0x2be6 <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6b 89       	ldd	r22, Y+19	; 0x13
    2bba:	7c 89       	ldd	r23, Y+20	; 0x14
    2bbc:	8d 89       	ldd	r24, Y+21	; 0x15
    2bbe:	9e 89       	ldd	r25, Y+22	; 0x16
    2bc0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	98 8f       	std	Y+24, r25	; 0x18
    2bca:	8f 8b       	std	Y+23, r24	; 0x17
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	9c 8f       	std	Y+28, r25	; 0x1c
    2bd2:	8b 8f       	std	Y+27, r24	; 0x1b
    2bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd8:	8c 01       	movw	r16, r24
    2bda:	f8 01       	movw	r30, r16
    2bdc:	31 97       	sbiw	r30, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <main+0x236>
    2be0:	8f 01       	movw	r16, r30
    2be2:	1c 8f       	std	Y+28, r17	; 0x1c
    2be4:	0b 8f       	std	Y+27, r16	; 0x1b
 _delay_ms(500);
 LCDClear();
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
 
 //i=0;
 
 for (i=0;i<1;i++){
    2bee:	10 92 e8 00 	sts	0x00E8, r1
    2bf2:	10 92 e7 00 	sts	0x00E7, r1
    2bf6:	aa c0       	rjmp	.+340    	; 0x2d4c <main+0x3a6>
 do
   {
    //kc=0;
    kc=GetKeyPressed();
    2bf8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <GetKeyPressed>
    2bfc:	80 93 e6 00 	sts	0x00E6, r24
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	aa ef       	ldi	r26, 0xFA	; 250
    2c06:	b3 e4       	ldi	r27, 0x43	; 67
    2c08:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0c:	af 8f       	std	Y+31, r26	; 0x1f
    2c0e:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c12:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2c14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c16:	98 a1       	ldd	r25, Y+32	; 0x20
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	4a e7       	ldi	r20, 0x7A	; 122
    2c1e:	53 e4       	ldi	r21, 0x43	; 67
    2c20:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	89 a3       	std	Y+33, r24	; 0x21
    2c2a:	9a a3       	std	Y+34, r25	; 0x22
    2c2c:	ab a3       	std	Y+35, r26	; 0x23
    2c2e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2c30:	11 e0       	ldi	r17, 0x01	; 1
    2c32:	69 a1       	ldd	r22, Y+33	; 0x21
    2c34:	7a a1       	ldd	r23, Y+34	; 0x22
    2c36:	8b a1       	ldd	r24, Y+35	; 0x23
    2c38:	9c a1       	ldd	r25, Y+36	; 0x24
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	0c f0       	brlt	.+2      	; 0x2c4c <main+0x2a6>
    2c4a:	10 e0       	ldi	r17, 0x00	; 0
    2c4c:	11 23       	and	r17, r17
    2c4e:	29 f0       	breq	.+10     	; 0x2c5a <main+0x2b4>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9e a3       	std	Y+38, r25	; 0x26
    2c56:	8d a3       	std	Y+37, r24	; 0x25
    2c58:	46 c0       	rjmp	.+140    	; 0x2ce6 <main+0x340>
	else if (__tmp > 65535)
    2c5a:	11 e0       	ldi	r17, 0x01	; 1
    2c5c:	69 a1       	ldd	r22, Y+33	; 0x21
    2c5e:	7a a1       	ldd	r23, Y+34	; 0x22
    2c60:	8b a1       	ldd	r24, Y+35	; 0x23
    2c62:	9c a1       	ldd	r25, Y+36	; 0x24
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	3f ef       	ldi	r19, 0xFF	; 255
    2c68:	4f e7       	ldi	r20, 0x7F	; 127
    2c6a:	57 e4       	ldi	r21, 0x47	; 71
    2c6c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__gtsf2>
    2c70:	18 16       	cp	r1, r24
    2c72:	0c f0       	brlt	.+2      	; 0x2c76 <main+0x2d0>
    2c74:	10 e0       	ldi	r17, 0x00	; 0
    2c76:	11 23       	and	r17, r17
    2c78:	61 f1       	breq	.+88     	; 0x2cd2 <main+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c7c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2c7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c80:	98 a1       	ldd	r25, Y+32	; 0x20
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e a3       	std	Y+38, r25	; 0x26
    2ca0:	8d a3       	std	Y+37, r24	; 0x25
    2ca2:	12 c0       	rjmp	.+36     	; 0x2cc8 <main+0x322>
    2ca4:	89 e1       	ldi	r24, 0x19	; 25
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	98 a7       	std	Y+40, r25	; 0x28
    2caa:	8f a3       	std	Y+39, r24	; 0x27
    2cac:	8f a1       	ldd	r24, Y+39	; 0x27
    2cae:	98 a5       	ldd	r25, Y+40	; 0x28
    2cb0:	8c 01       	movw	r16, r24
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <main+0x30e>
    2cb8:	8c 01       	movw	r16, r24
    2cba:	18 a7       	std	Y+40, r17	; 0x28
    2cbc:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	9e a3       	std	Y+38, r25	; 0x26
    2cc6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cca:	9e a1       	ldd	r25, Y+38	; 0x26
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	51 f7       	brne	.-44     	; 0x2ca4 <main+0x2fe>
    2cd0:	17 c0       	rjmp	.+46     	; 0x2d00 <main+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd2:	69 a1       	ldd	r22, Y+33	; 0x21
    2cd4:	7a a1       	ldd	r23, Y+34	; 0x22
    2cd6:	8b a1       	ldd	r24, Y+35	; 0x23
    2cd8:	9c a1       	ldd	r25, Y+36	; 0x24
    2cda:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e a3       	std	Y+38, r25	; 0x26
    2ce4:	8d a3       	std	Y+37, r24	; 0x25
    2ce6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cea:	9a a7       	std	Y+42, r25	; 0x2a
    2cec:	89 a7       	std	Y+41, r24	; 0x29
    2cee:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf2:	8c 01       	movw	r16, r24
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	31 97       	sbiw	r30, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0x350>
    2cfa:	8f 01       	movw	r16, r30
    2cfc:	1a a7       	std	Y+42, r17	; 0x2a
    2cfe:	09 a7       	std	Y+41, r16	; 0x29
    _delay_ms(500);
  }while(!kc);
    2d00:	80 91 e6 00 	lds	r24, 0x00E6
    2d04:	88 23       	and	r24, r24
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <main+0x364>
    2d08:	77 cf       	rjmp	.-274    	; 0x2bf8 <main+0x252>
 
  pin[i]=kc;
    2d0a:	80 91 e7 00 	lds	r24, 0x00E7
    2d0e:	90 91 e8 00 	lds	r25, 0x00E8
    2d12:	20 91 e6 00 	lds	r18, 0x00E6
    2d16:	85 51       	subi	r24, 0x15	; 21
    2d18:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	20 83       	st	Z, r18
  LCDWriteStringXY(0,i+1, "*");
    2d1e:	80 91 e7 00 	lds	r24, 0x00E7
    2d22:	90 91 e8 00 	lds	r25, 0x00E8
    2d26:	98 2f       	mov	r25, r24
    2d28:	9f 5f       	subi	r25, 0xFF	; 255
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	69 2f       	mov	r22, r25
    2d2e:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    2d32:	87 eb       	ldi	r24, 0xB7	; 183
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
 _delay_ms(500);
 LCDClear();
 
 //i=0;
 
 for (i=0;i<1;i++){
    2d3a:	80 91 e7 00 	lds	r24, 0x00E7
    2d3e:	90 91 e8 00 	lds	r25, 0x00E8
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	90 93 e8 00 	sts	0x00E8, r25
    2d48:	80 93 e7 00 	sts	0x00E7, r24
    2d4c:	80 91 e7 00 	lds	r24, 0x00E7
    2d50:	90 91 e8 00 	lds	r25, 0x00E8
    2d54:	18 16       	cp	r1, r24
    2d56:	19 06       	cpc	r1, r25
    2d58:	0c f0       	brlt	.+2      	; 0x2d5c <main+0x3b6>
    2d5a:	4e cf       	rjmp	.-356    	; 0x2bf8 <main+0x252>
  LCDWriteStringXY(0,i+1, "*");

 
}
 
if (pin[0]==3 && pin[1]==1 && pin[2]==2)
    2d5c:	80 91 eb 00 	lds	r24, 0x00EB
    2d60:	83 30       	cpi	r24, 0x03	; 3
    2d62:	69 f4       	brne	.+26     	; 0x2d7e <main+0x3d8>
    2d64:	80 91 ec 00 	lds	r24, 0x00EC
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	49 f4       	brne	.+18     	; 0x2d7e <main+0x3d8>
    2d6c:	80 91 ed 00 	lds	r24, 0x00ED
    2d70:	82 30       	cpi	r24, 0x02	; 2
    2d72:	29 f4       	brne	.+10     	; 0x2d7e <main+0x3d8>
{
//lcd_cmd(_lcd_clear);
LCDWriteString("Successful Login");
    2d74:	89 eb       	ldi	r24, 0xB9	; 185
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    2d7c:	09 c0       	rjmp	.+18     	; 0x2d90 <main+0x3ea>
}

else
{
LCDWriteString("Login Unsuccessful") ;
    2d7e:	8a ec       	ldi	r24, 0xCA	; 202
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	PORTC=0XFF;
    2d86:	85 e3       	ldi	r24, 0x35	; 53
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	2f ef       	ldi	r18, 0xFF	; 255
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	20 83       	st	Z, r18
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
}

    2d94:	aa 96       	adiw	r28, 0x2a	; 42
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	08 95       	ret

00002daa <__fixunssfsi>:
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	7b 01       	movw	r14, r22
    2db4:	8c 01       	movw	r16, r24
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	5f e4       	ldi	r21, 0x4F	; 79
    2dbe:	0e 94 81 1a 	call	0x3502	; 0x3502 <__gesf2>
    2dc2:	87 fd       	sbrc	r24, 7
    2dc4:	11 c0       	rjmp	.+34     	; 0x2de8 <__fixunssfsi+0x3e>
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	b7 01       	movw	r22, r14
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	5f e4       	ldi	r21, 0x4F	; 79
    2dd2:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__subsf3>
    2dd6:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__fixsfsi>
    2dda:	9b 01       	movw	r18, r22
    2ddc:	ac 01       	movw	r20, r24
    2dde:	20 50       	subi	r18, 0x00	; 0
    2de0:	30 40       	sbci	r19, 0x00	; 0
    2de2:	40 40       	sbci	r20, 0x00	; 0
    2de4:	50 48       	sbci	r21, 0x80	; 128
    2de6:	06 c0       	rjmp	.+12     	; 0x2df4 <__fixunssfsi+0x4a>
    2de8:	c8 01       	movw	r24, r16
    2dea:	b7 01       	movw	r22, r14
    2dec:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__fixsfsi>
    2df0:	9b 01       	movw	r18, r22
    2df2:	ac 01       	movw	r20, r24
    2df4:	b9 01       	movw	r22, r18
    2df6:	ca 01       	movw	r24, r20
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	08 95       	ret

00002e02 <_fpadd_parts>:
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e7 e0       	ldi	r30, 0x07	; 7
    2e08:	f7 e1       	ldi	r31, 0x17	; 23
    2e0a:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x8>
    2e0e:	fc 01       	movw	r30, r24
    2e10:	ea 01       	movw	r28, r20
    2e12:	80 81       	ld	r24, Z
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	08 f4       	brcc	.+2      	; 0x2e1a <_fpadd_parts+0x18>
    2e18:	38 c1       	rjmp	.+624    	; 0x308a <_fpadd_parts+0x288>
    2e1a:	db 01       	movw	r26, r22
    2e1c:	9c 91       	ld	r25, X
    2e1e:	92 30       	cpi	r25, 0x02	; 2
    2e20:	08 f4       	brcc	.+2      	; 0x2e24 <_fpadd_parts+0x22>
    2e22:	30 c1       	rjmp	.+608    	; 0x3084 <_fpadd_parts+0x282>
    2e24:	84 30       	cpi	r24, 0x04	; 4
    2e26:	59 f4       	brne	.+22     	; 0x2e3e <_fpadd_parts+0x3c>
    2e28:	94 30       	cpi	r25, 0x04	; 4
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <_fpadd_parts+0x2c>
    2e2c:	2e c1       	rjmp	.+604    	; 0x308a <_fpadd_parts+0x288>
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	11 96       	adiw	r26, 0x01	; 1
    2e32:	8c 91       	ld	r24, X
    2e34:	11 97       	sbiw	r26, 0x01	; 1
    2e36:	98 17       	cp	r25, r24
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <_fpadd_parts+0x3a>
    2e3a:	21 c1       	rjmp	.+578    	; 0x307e <_fpadd_parts+0x27c>
    2e3c:	26 c1       	rjmp	.+588    	; 0x308a <_fpadd_parts+0x288>
    2e3e:	94 30       	cpi	r25, 0x04	; 4
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <_fpadd_parts+0x42>
    2e42:	20 c1       	rjmp	.+576    	; 0x3084 <_fpadd_parts+0x282>
    2e44:	92 30       	cpi	r25, 0x02	; 2
    2e46:	b1 f4       	brne	.+44     	; 0x2e74 <_fpadd_parts+0x72>
    2e48:	82 30       	cpi	r24, 0x02	; 2
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <_fpadd_parts+0x4c>
    2e4c:	1e c1       	rjmp	.+572    	; 0x308a <_fpadd_parts+0x288>
    2e4e:	ca 01       	movw	r24, r20
    2e50:	af 01       	movw	r20, r30
    2e52:	28 e0       	ldi	r18, 0x08	; 8
    2e54:	da 01       	movw	r26, r20
    2e56:	0d 90       	ld	r0, X+
    2e58:	ad 01       	movw	r20, r26
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	0d 92       	st	X+, r0
    2e5e:	cd 01       	movw	r24, r26
    2e60:	21 50       	subi	r18, 0x01	; 1
    2e62:	c1 f7       	brne	.-16     	; 0x2e54 <_fpadd_parts+0x52>
    2e64:	db 01       	movw	r26, r22
    2e66:	11 96       	adiw	r26, 0x01	; 1
    2e68:	8c 91       	ld	r24, X
    2e6a:	11 97       	sbiw	r26, 0x01	; 1
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	89 23       	and	r24, r25
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	0a c1       	rjmp	.+532    	; 0x3088 <_fpadd_parts+0x286>
    2e74:	82 30       	cpi	r24, 0x02	; 2
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_fpadd_parts+0x78>
    2e78:	05 c1       	rjmp	.+522    	; 0x3084 <_fpadd_parts+0x282>
    2e7a:	c2 80       	ldd	r12, Z+2	; 0x02
    2e7c:	d3 80       	ldd	r13, Z+3	; 0x03
    2e7e:	db 01       	movw	r26, r22
    2e80:	12 96       	adiw	r26, 0x02	; 2
    2e82:	6d 90       	ld	r6, X+
    2e84:	7c 90       	ld	r7, X
    2e86:	13 97       	sbiw	r26, 0x03	; 3
    2e88:	24 81       	ldd	r18, Z+4	; 0x04
    2e8a:	35 81       	ldd	r19, Z+5	; 0x05
    2e8c:	46 81       	ldd	r20, Z+6	; 0x06
    2e8e:	57 81       	ldd	r21, Z+7	; 0x07
    2e90:	14 96       	adiw	r26, 0x04	; 4
    2e92:	ed 90       	ld	r14, X+
    2e94:	fd 90       	ld	r15, X+
    2e96:	0d 91       	ld	r16, X+
    2e98:	1c 91       	ld	r17, X
    2e9a:	17 97       	sbiw	r26, 0x07	; 7
    2e9c:	c6 01       	movw	r24, r12
    2e9e:	86 19       	sub	r24, r6
    2ea0:	97 09       	sbc	r25, r7
    2ea2:	5c 01       	movw	r10, r24
    2ea4:	97 ff       	sbrs	r25, 7
    2ea6:	04 c0       	rjmp	.+8      	; 0x2eb0 <_fpadd_parts+0xae>
    2ea8:	aa 24       	eor	r10, r10
    2eaa:	bb 24       	eor	r11, r11
    2eac:	a8 1a       	sub	r10, r24
    2eae:	b9 0a       	sbc	r11, r25
    2eb0:	b0 e2       	ldi	r27, 0x20	; 32
    2eb2:	ab 16       	cp	r10, r27
    2eb4:	b1 04       	cpc	r11, r1
    2eb6:	0c f0       	brlt	.+2      	; 0x2eba <_fpadd_parts+0xb8>
    2eb8:	61 c0       	rjmp	.+194    	; 0x2f7c <_fpadd_parts+0x17a>
    2eba:	18 16       	cp	r1, r24
    2ebc:	19 06       	cpc	r1, r25
    2ebe:	6c f5       	brge	.+90     	; 0x2f1a <_fpadd_parts+0x118>
    2ec0:	37 01       	movw	r6, r14
    2ec2:	48 01       	movw	r8, r16
    2ec4:	0a 2c       	mov	r0, r10
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <_fpadd_parts+0xce>
    2ec8:	96 94       	lsr	r9
    2eca:	87 94       	ror	r8
    2ecc:	77 94       	ror	r7
    2ece:	67 94       	ror	r6
    2ed0:	0a 94       	dec	r0
    2ed2:	d2 f7       	brpl	.-12     	; 0x2ec8 <_fpadd_parts+0xc6>
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	0a 2c       	mov	r0, r10
    2ede:	04 c0       	rjmp	.+8      	; 0x2ee8 <_fpadd_parts+0xe6>
    2ee0:	88 0f       	add	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	aa 1f       	adc	r26, r26
    2ee6:	bb 1f       	adc	r27, r27
    2ee8:	0a 94       	dec	r0
    2eea:	d2 f7       	brpl	.-12     	; 0x2ee0 <_fpadd_parts+0xde>
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	a1 09       	sbc	r26, r1
    2ef0:	b1 09       	sbc	r27, r1
    2ef2:	8e 21       	and	r24, r14
    2ef4:	9f 21       	and	r25, r15
    2ef6:	a0 23       	and	r26, r16
    2ef8:	b1 23       	and	r27, r17
    2efa:	ee 24       	eor	r14, r14
    2efc:	ff 24       	eor	r15, r15
    2efe:	87 01       	movw	r16, r14
    2f00:	e3 94       	inc	r14
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	a1 05       	cpc	r26, r1
    2f06:	b1 05       	cpc	r27, r1
    2f08:	19 f4       	brne	.+6      	; 0x2f10 <_fpadd_parts+0x10e>
    2f0a:	ee 24       	eor	r14, r14
    2f0c:	ff 24       	eor	r15, r15
    2f0e:	87 01       	movw	r16, r14
    2f10:	e6 28       	or	r14, r6
    2f12:	f7 28       	or	r15, r7
    2f14:	08 29       	or	r16, r8
    2f16:	19 29       	or	r17, r9
    2f18:	3c c0       	rjmp	.+120    	; 0x2f92 <_fpadd_parts+0x190>
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	d1 f1       	breq	.+116    	; 0x2f92 <_fpadd_parts+0x190>
    2f1e:	ca 0c       	add	r12, r10
    2f20:	db 1c       	adc	r13, r11
    2f22:	39 01       	movw	r6, r18
    2f24:	4a 01       	movw	r8, r20
    2f26:	0a 2c       	mov	r0, r10
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <_fpadd_parts+0x130>
    2f2a:	96 94       	lsr	r9
    2f2c:	87 94       	ror	r8
    2f2e:	77 94       	ror	r7
    2f30:	67 94       	ror	r6
    2f32:	0a 94       	dec	r0
    2f34:	d2 f7       	brpl	.-12     	; 0x2f2a <_fpadd_parts+0x128>
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	0a 2c       	mov	r0, r10
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <_fpadd_parts+0x148>
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	0a 94       	dec	r0
    2f4c:	d2 f7       	brpl	.-12     	; 0x2f42 <_fpadd_parts+0x140>
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	a1 09       	sbc	r26, r1
    2f52:	b1 09       	sbc	r27, r1
    2f54:	82 23       	and	r24, r18
    2f56:	93 23       	and	r25, r19
    2f58:	a4 23       	and	r26, r20
    2f5a:	b5 23       	and	r27, r21
    2f5c:	21 e0       	ldi	r18, 0x01	; 1
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	a1 05       	cpc	r26, r1
    2f68:	b1 05       	cpc	r27, r1
    2f6a:	19 f4       	brne	.+6      	; 0x2f72 <_fpadd_parts+0x170>
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	a9 01       	movw	r20, r18
    2f72:	26 29       	or	r18, r6
    2f74:	37 29       	or	r19, r7
    2f76:	48 29       	or	r20, r8
    2f78:	59 29       	or	r21, r9
    2f7a:	0b c0       	rjmp	.+22     	; 0x2f92 <_fpadd_parts+0x190>
    2f7c:	6c 14       	cp	r6, r12
    2f7e:	7d 04       	cpc	r7, r13
    2f80:	24 f4       	brge	.+8      	; 0x2f8a <_fpadd_parts+0x188>
    2f82:	ee 24       	eor	r14, r14
    2f84:	ff 24       	eor	r15, r15
    2f86:	87 01       	movw	r16, r14
    2f88:	04 c0       	rjmp	.+8      	; 0x2f92 <_fpadd_parts+0x190>
    2f8a:	63 01       	movw	r12, r6
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
    2f92:	81 81       	ldd	r24, Z+1	; 0x01
    2f94:	fb 01       	movw	r30, r22
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	89 17       	cp	r24, r25
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <_fpadd_parts+0x19c>
    2f9c:	45 c0       	rjmp	.+138    	; 0x3028 <_fpadd_parts+0x226>
    2f9e:	88 23       	and	r24, r24
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <_fpadd_parts+0x1b2>
    2fa2:	d8 01       	movw	r26, r16
    2fa4:	c7 01       	movw	r24, r14
    2fa6:	82 1b       	sub	r24, r18
    2fa8:	93 0b       	sbc	r25, r19
    2faa:	a4 0b       	sbc	r26, r20
    2fac:	b5 0b       	sbc	r27, r21
    2fae:	9c 01       	movw	r18, r24
    2fb0:	ad 01       	movw	r20, r26
    2fb2:	04 c0       	rjmp	.+8      	; 0x2fbc <_fpadd_parts+0x1ba>
    2fb4:	2e 19       	sub	r18, r14
    2fb6:	3f 09       	sbc	r19, r15
    2fb8:	40 0b       	sbc	r20, r16
    2fba:	51 0b       	sbc	r21, r17
    2fbc:	57 fd       	sbrc	r21, 7
    2fbe:	04 c0       	rjmp	.+8      	; 0x2fc8 <_fpadd_parts+0x1c6>
    2fc0:	19 82       	std	Y+1, r1	; 0x01
    2fc2:	db 82       	std	Y+3, r13	; 0x03
    2fc4:	ca 82       	std	Y+2, r12	; 0x02
    2fc6:	0b c0       	rjmp	.+22     	; 0x2fde <_fpadd_parts+0x1dc>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	db 82       	std	Y+3, r13	; 0x03
    2fce:	ca 82       	std	Y+2, r12	; 0x02
    2fd0:	50 95       	com	r21
    2fd2:	40 95       	com	r20
    2fd4:	30 95       	com	r19
    2fd6:	21 95       	neg	r18
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fda:	4f 4f       	sbci	r20, 0xFF	; 255
    2fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fde:	2c 83       	std	Y+4, r18	; 0x04
    2fe0:	3d 83       	std	Y+5, r19	; 0x05
    2fe2:	4e 83       	std	Y+6, r20	; 0x06
    2fe4:	5f 83       	std	Y+7, r21	; 0x07
    2fe6:	0d c0       	rjmp	.+26     	; 0x3002 <_fpadd_parts+0x200>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	aa 1f       	adc	r26, r26
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	8c 83       	std	Y+4, r24	; 0x04
    2ff2:	9d 83       	std	Y+5, r25	; 0x05
    2ff4:	ae 83       	std	Y+6, r26	; 0x06
    2ff6:	bf 83       	std	Y+7, r27	; 0x07
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9b 83       	std	Y+3, r25	; 0x03
    3000:	8a 83       	std	Y+2, r24	; 0x02
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	9d 81       	ldd	r25, Y+5	; 0x05
    3006:	ae 81       	ldd	r26, Y+6	; 0x06
    3008:	bf 81       	ldd	r27, Y+7	; 0x07
    300a:	9c 01       	movw	r18, r24
    300c:	ad 01       	movw	r20, r26
    300e:	21 50       	subi	r18, 0x01	; 1
    3010:	30 40       	sbci	r19, 0x00	; 0
    3012:	40 40       	sbci	r20, 0x00	; 0
    3014:	50 40       	sbci	r21, 0x00	; 0
    3016:	2f 3f       	cpi	r18, 0xFF	; 255
    3018:	ef ef       	ldi	r30, 0xFF	; 255
    301a:	3e 07       	cpc	r19, r30
    301c:	ef ef       	ldi	r30, 0xFF	; 255
    301e:	4e 07       	cpc	r20, r30
    3020:	ef e3       	ldi	r30, 0x3F	; 63
    3022:	5e 07       	cpc	r21, r30
    3024:	08 f3       	brcs	.-62     	; 0x2fe8 <_fpadd_parts+0x1e6>
    3026:	0b c0       	rjmp	.+22     	; 0x303e <_fpadd_parts+0x23c>
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	db 82       	std	Y+3, r13	; 0x03
    302c:	ca 82       	std	Y+2, r12	; 0x02
    302e:	2e 0d       	add	r18, r14
    3030:	3f 1d       	adc	r19, r15
    3032:	40 1f       	adc	r20, r16
    3034:	51 1f       	adc	r21, r17
    3036:	2c 83       	std	Y+4, r18	; 0x04
    3038:	3d 83       	std	Y+5, r19	; 0x05
    303a:	4e 83       	std	Y+6, r20	; 0x06
    303c:	5f 83       	std	Y+7, r21	; 0x07
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	88 83       	st	Y, r24
    3042:	2c 81       	ldd	r18, Y+4	; 0x04
    3044:	3d 81       	ldd	r19, Y+5	; 0x05
    3046:	4e 81       	ldd	r20, Y+6	; 0x06
    3048:	5f 81       	ldd	r21, Y+7	; 0x07
    304a:	57 ff       	sbrs	r21, 7
    304c:	1d c0       	rjmp	.+58     	; 0x3088 <_fpadd_parts+0x286>
    304e:	da 01       	movw	r26, r20
    3050:	c9 01       	movw	r24, r18
    3052:	81 70       	andi	r24, 0x01	; 1
    3054:	90 70       	andi	r25, 0x00	; 0
    3056:	a0 70       	andi	r26, 0x00	; 0
    3058:	b0 70       	andi	r27, 0x00	; 0
    305a:	56 95       	lsr	r21
    305c:	47 95       	ror	r20
    305e:	37 95       	ror	r19
    3060:	27 95       	ror	r18
    3062:	82 2b       	or	r24, r18
    3064:	93 2b       	or	r25, r19
    3066:	a4 2b       	or	r26, r20
    3068:	b5 2b       	or	r27, r21
    306a:	8c 83       	std	Y+4, r24	; 0x04
    306c:	9d 83       	std	Y+5, r25	; 0x05
    306e:	ae 83       	std	Y+6, r26	; 0x06
    3070:	bf 83       	std	Y+7, r27	; 0x07
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	9b 83       	std	Y+3, r25	; 0x03
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <_fpadd_parts+0x286>
    307e:	ed ed       	ldi	r30, 0xDD	; 221
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	03 c0       	rjmp	.+6      	; 0x308a <_fpadd_parts+0x288>
    3084:	fb 01       	movw	r30, r22
    3086:	01 c0       	rjmp	.+2      	; 0x308a <_fpadd_parts+0x288>
    3088:	fe 01       	movw	r30, r28
    308a:	cf 01       	movw	r24, r30
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	ee e0       	ldi	r30, 0x0E	; 14
    3092:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x8>

00003096 <__addsf3>:
    3096:	a0 e2       	ldi	r26, 0x20	; 32
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e1 e5       	ldi	r30, 0x51	; 81
    309c:	f8 e1       	ldi	r31, 0x18	; 24
    309e:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__+0x18>
    30a2:	69 83       	std	Y+1, r22	; 0x01
    30a4:	7a 83       	std	Y+2, r23	; 0x02
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	9c 83       	std	Y+4, r25	; 0x04
    30aa:	2d 83       	std	Y+5, r18	; 0x05
    30ac:	3e 83       	std	Y+6, r19	; 0x06
    30ae:	4f 83       	std	Y+7, r20	; 0x07
    30b0:	58 87       	std	Y+8, r21	; 0x08
    30b2:	89 e0       	ldi	r24, 0x09	; 9
    30b4:	e8 2e       	mov	r14, r24
    30b6:	f1 2c       	mov	r15, r1
    30b8:	ec 0e       	add	r14, r28
    30ba:	fd 1e       	adc	r15, r29
    30bc:	ce 01       	movw	r24, r28
    30be:	01 96       	adiw	r24, 0x01	; 1
    30c0:	b7 01       	movw	r22, r14
    30c2:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    30c6:	8e 01       	movw	r16, r28
    30c8:	0f 5e       	subi	r16, 0xEF	; 239
    30ca:	1f 4f       	sbci	r17, 0xFF	; 255
    30cc:	ce 01       	movw	r24, r28
    30ce:	05 96       	adiw	r24, 0x05	; 5
    30d0:	b8 01       	movw	r22, r16
    30d2:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    30d6:	c7 01       	movw	r24, r14
    30d8:	b8 01       	movw	r22, r16
    30da:	ae 01       	movw	r20, r28
    30dc:	47 5e       	subi	r20, 0xE7	; 231
    30de:	5f 4f       	sbci	r21, 0xFF	; 255
    30e0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_fpadd_parts>
    30e4:	0e 94 33 1b 	call	0x3666	; 0x3666 <__pack_f>
    30e8:	a0 96       	adiw	r28, 0x20	; 32
    30ea:	e6 e0       	ldi	r30, 0x06	; 6
    30ec:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x18>

000030f0 <__subsf3>:
    30f0:	a0 e2       	ldi	r26, 0x20	; 32
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ee e7       	ldi	r30, 0x7E	; 126
    30f6:	f8 e1       	ldi	r31, 0x18	; 24
    30f8:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__+0x18>
    30fc:	69 83       	std	Y+1, r22	; 0x01
    30fe:	7a 83       	std	Y+2, r23	; 0x02
    3100:	8b 83       	std	Y+3, r24	; 0x03
    3102:	9c 83       	std	Y+4, r25	; 0x04
    3104:	2d 83       	std	Y+5, r18	; 0x05
    3106:	3e 83       	std	Y+6, r19	; 0x06
    3108:	4f 83       	std	Y+7, r20	; 0x07
    310a:	58 87       	std	Y+8, r21	; 0x08
    310c:	8e 01       	movw	r16, r28
    310e:	07 5f       	subi	r16, 0xF7	; 247
    3110:	1f 4f       	sbci	r17, 0xFF	; 255
    3112:	ce 01       	movw	r24, r28
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	b8 01       	movw	r22, r16
    3118:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    311c:	91 e1       	ldi	r25, 0x11	; 17
    311e:	e9 2e       	mov	r14, r25
    3120:	f1 2c       	mov	r15, r1
    3122:	ec 0e       	add	r14, r28
    3124:	fd 1e       	adc	r15, r29
    3126:	ce 01       	movw	r24, r28
    3128:	05 96       	adiw	r24, 0x05	; 5
    312a:	b7 01       	movw	r22, r14
    312c:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    3130:	8a 89       	ldd	r24, Y+18	; 0x12
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	89 27       	eor	r24, r25
    3136:	8a 8b       	std	Y+18, r24	; 0x12
    3138:	c8 01       	movw	r24, r16
    313a:	b7 01       	movw	r22, r14
    313c:	ae 01       	movw	r20, r28
    313e:	47 5e       	subi	r20, 0xE7	; 231
    3140:	5f 4f       	sbci	r21, 0xFF	; 255
    3142:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_fpadd_parts>
    3146:	0e 94 33 1b 	call	0x3666	; 0x3666 <__pack_f>
    314a:	a0 96       	adiw	r28, 0x20	; 32
    314c:	e6 e0       	ldi	r30, 0x06	; 6
    314e:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x18>

00003152 <__mulsf3>:
    3152:	a0 e2       	ldi	r26, 0x20	; 32
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	ef ea       	ldi	r30, 0xAF	; 175
    3158:	f8 e1       	ldi	r31, 0x18	; 24
    315a:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__prologue_saves__>
    315e:	69 83       	std	Y+1, r22	; 0x01
    3160:	7a 83       	std	Y+2, r23	; 0x02
    3162:	8b 83       	std	Y+3, r24	; 0x03
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	2d 83       	std	Y+5, r18	; 0x05
    3168:	3e 83       	std	Y+6, r19	; 0x06
    316a:	4f 83       	std	Y+7, r20	; 0x07
    316c:	58 87       	std	Y+8, r21	; 0x08
    316e:	ce 01       	movw	r24, r28
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	be 01       	movw	r22, r28
    3174:	67 5f       	subi	r22, 0xF7	; 247
    3176:	7f 4f       	sbci	r23, 0xFF	; 255
    3178:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    317c:	ce 01       	movw	r24, r28
    317e:	05 96       	adiw	r24, 0x05	; 5
    3180:	be 01       	movw	r22, r28
    3182:	6f 5e       	subi	r22, 0xEF	; 239
    3184:	7f 4f       	sbci	r23, 0xFF	; 255
    3186:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    318a:	99 85       	ldd	r25, Y+9	; 0x09
    318c:	92 30       	cpi	r25, 0x02	; 2
    318e:	78 f0       	brcs	.+30     	; 0x31ae <__mulsf3+0x5c>
    3190:	89 89       	ldd	r24, Y+17	; 0x11
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	c0 f0       	brcs	.+48     	; 0x31c6 <__mulsf3+0x74>
    3196:	94 30       	cpi	r25, 0x04	; 4
    3198:	19 f4       	brne	.+6      	; 0x31a0 <__mulsf3+0x4e>
    319a:	82 30       	cpi	r24, 0x02	; 2
    319c:	41 f4       	brne	.+16     	; 0x31ae <__mulsf3+0x5c>
    319e:	cb c0       	rjmp	.+406    	; 0x3336 <__mulsf3+0x1e4>
    31a0:	84 30       	cpi	r24, 0x04	; 4
    31a2:	19 f4       	brne	.+6      	; 0x31aa <__mulsf3+0x58>
    31a4:	92 30       	cpi	r25, 0x02	; 2
    31a6:	79 f4       	brne	.+30     	; 0x31c6 <__mulsf3+0x74>
    31a8:	c6 c0       	rjmp	.+396    	; 0x3336 <__mulsf3+0x1e4>
    31aa:	92 30       	cpi	r25, 0x02	; 2
    31ac:	51 f4       	brne	.+20     	; 0x31c2 <__mulsf3+0x70>
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    31b2:	9a 89       	ldd	r25, Y+18	; 0x12
    31b4:	29 17       	cp	r18, r25
    31b6:	09 f4       	brne	.+2      	; 0x31ba <__mulsf3+0x68>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	8a 87       	std	Y+10, r24	; 0x0a
    31bc:	ce 01       	movw	r24, r28
    31be:	09 96       	adiw	r24, 0x09	; 9
    31c0:	bc c0       	rjmp	.+376    	; 0x333a <__mulsf3+0x1e8>
    31c2:	82 30       	cpi	r24, 0x02	; 2
    31c4:	51 f4       	brne	.+20     	; 0x31da <__mulsf3+0x88>
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    31ca:	9a 89       	ldd	r25, Y+18	; 0x12
    31cc:	29 17       	cp	r18, r25
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <__mulsf3+0x80>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	8a 8b       	std	Y+18, r24	; 0x12
    31d4:	ce 01       	movw	r24, r28
    31d6:	41 96       	adiw	r24, 0x11	; 17
    31d8:	b0 c0       	rjmp	.+352    	; 0x333a <__mulsf3+0x1e8>
    31da:	6d 84       	ldd	r6, Y+13	; 0x0d
    31dc:	7e 84       	ldd	r7, Y+14	; 0x0e
    31de:	8f 84       	ldd	r8, Y+15	; 0x0f
    31e0:	98 88       	ldd	r9, Y+16	; 0x10
    31e2:	ed 88       	ldd	r14, Y+21	; 0x15
    31e4:	fe 88       	ldd	r15, Y+22	; 0x16
    31e6:	0f 89       	ldd	r16, Y+23	; 0x17
    31e8:	18 8d       	ldd	r17, Y+24	; 0x18
    31ea:	e0 e2       	ldi	r30, 0x20	; 32
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	dc 01       	movw	r26, r24
    31f4:	aa 24       	eor	r10, r10
    31f6:	bb 24       	eor	r11, r11
    31f8:	65 01       	movw	r12, r10
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	a9 01       	movw	r20, r18
    3200:	b3 01       	movw	r22, r6
    3202:	61 70       	andi	r22, 0x01	; 1
    3204:	70 70       	andi	r23, 0x00	; 0
    3206:	61 15       	cp	r22, r1
    3208:	71 05       	cpc	r23, r1
    320a:	d1 f0       	breq	.+52     	; 0x3240 <__mulsf3+0xee>
    320c:	2e 0d       	add	r18, r14
    320e:	3f 1d       	adc	r19, r15
    3210:	40 1f       	adc	r20, r16
    3212:	51 1f       	adc	r21, r17
    3214:	15 01       	movw	r2, r10
    3216:	26 01       	movw	r4, r12
    3218:	28 0e       	add	r2, r24
    321a:	39 1e       	adc	r3, r25
    321c:	4a 1e       	adc	r4, r26
    321e:	5b 1e       	adc	r5, r27
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	a0 e0       	ldi	r26, 0x00	; 0
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	2e 15       	cp	r18, r14
    322a:	3f 05       	cpc	r19, r15
    322c:	40 07       	cpc	r20, r16
    322e:	51 07       	cpc	r21, r17
    3230:	18 f0       	brcs	.+6      	; 0x3238 <__mulsf3+0xe6>
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	dc 01       	movw	r26, r24
    3238:	82 0d       	add	r24, r2
    323a:	93 1d       	adc	r25, r3
    323c:	a4 1d       	adc	r26, r4
    323e:	b5 1d       	adc	r27, r5
    3240:	aa 0c       	add	r10, r10
    3242:	bb 1c       	adc	r11, r11
    3244:	cc 1c       	adc	r12, r12
    3246:	dd 1c       	adc	r13, r13
    3248:	17 ff       	sbrs	r17, 7
    324a:	09 c0       	rjmp	.+18     	; 0x325e <__mulsf3+0x10c>
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	26 2e       	mov	r2, r22
    3250:	31 2c       	mov	r3, r1
    3252:	41 2c       	mov	r4, r1
    3254:	51 2c       	mov	r5, r1
    3256:	a2 28       	or	r10, r2
    3258:	b3 28       	or	r11, r3
    325a:	c4 28       	or	r12, r4
    325c:	d5 28       	or	r13, r5
    325e:	31 97       	sbiw	r30, 0x01	; 1
    3260:	49 f0       	breq	.+18     	; 0x3274 <__mulsf3+0x122>
    3262:	ee 0c       	add	r14, r14
    3264:	ff 1c       	adc	r15, r15
    3266:	00 1f       	adc	r16, r16
    3268:	11 1f       	adc	r17, r17
    326a:	96 94       	lsr	r9
    326c:	87 94       	ror	r8
    326e:	77 94       	ror	r7
    3270:	67 94       	ror	r6
    3272:	c6 cf       	rjmp	.-116    	; 0x3200 <__mulsf3+0xae>
    3274:	6b 89       	ldd	r22, Y+19	; 0x13
    3276:	7c 89       	ldd	r23, Y+20	; 0x14
    3278:	eb 85       	ldd	r30, Y+11	; 0x0b
    327a:	fc 85       	ldd	r31, Y+12	; 0x0c
    327c:	6e 0f       	add	r22, r30
    327e:	7f 1f       	adc	r23, r31
    3280:	6e 5f       	subi	r22, 0xFE	; 254
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	7c 8f       	std	Y+28, r23	; 0x1c
    3286:	6b 8f       	std	Y+27, r22	; 0x1b
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	ea 85       	ldd	r30, Y+10	; 0x0a
    328c:	7a 89       	ldd	r23, Y+18	; 0x12
    328e:	e7 17       	cp	r30, r23
    3290:	09 f4       	brne	.+2      	; 0x3294 <__mulsf3+0x142>
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	6a 8f       	std	Y+26, r22	; 0x1a
    3296:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3298:	7c 8d       	ldd	r23, Y+28	; 0x1c
    329a:	10 c0       	rjmp	.+32     	; 0x32bc <__mulsf3+0x16a>
    329c:	fc 01       	movw	r30, r24
    329e:	e1 70       	andi	r30, 0x01	; 1
    32a0:	f0 70       	andi	r31, 0x00	; 0
    32a2:	30 97       	sbiw	r30, 0x00	; 0
    32a4:	29 f0       	breq	.+10     	; 0x32b0 <__mulsf3+0x15e>
    32a6:	56 95       	lsr	r21
    32a8:	47 95       	ror	r20
    32aa:	37 95       	ror	r19
    32ac:	27 95       	ror	r18
    32ae:	50 68       	ori	r21, 0x80	; 128
    32b0:	b6 95       	lsr	r27
    32b2:	a7 95       	ror	r26
    32b4:	97 95       	ror	r25
    32b6:	87 95       	ror	r24
    32b8:	6f 5f       	subi	r22, 0xFF	; 255
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	b7 fd       	sbrc	r27, 7
    32be:	ee cf       	rjmp	.-36     	; 0x329c <__mulsf3+0x14a>
    32c0:	0c c0       	rjmp	.+24     	; 0x32da <__mulsf3+0x188>
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	aa 1f       	adc	r26, r26
    32c8:	bb 1f       	adc	r27, r27
    32ca:	57 fd       	sbrc	r21, 7
    32cc:	81 60       	ori	r24, 0x01	; 1
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	44 1f       	adc	r20, r20
    32d4:	55 1f       	adc	r21, r21
    32d6:	61 50       	subi	r22, 0x01	; 1
    32d8:	70 40       	sbci	r23, 0x00	; 0
    32da:	80 30       	cpi	r24, 0x00	; 0
    32dc:	e0 e0       	ldi	r30, 0x00	; 0
    32de:	9e 07       	cpc	r25, r30
    32e0:	e0 e0       	ldi	r30, 0x00	; 0
    32e2:	ae 07       	cpc	r26, r30
    32e4:	e0 e4       	ldi	r30, 0x40	; 64
    32e6:	be 07       	cpc	r27, r30
    32e8:	60 f3       	brcs	.-40     	; 0x32c2 <__mulsf3+0x170>
    32ea:	6b 8f       	std	Y+27, r22	; 0x1b
    32ec:	7c 8f       	std	Y+28, r23	; 0x1c
    32ee:	6f e7       	ldi	r22, 0x7F	; 127
    32f0:	e6 2e       	mov	r14, r22
    32f2:	f1 2c       	mov	r15, r1
    32f4:	01 2d       	mov	r16, r1
    32f6:	11 2d       	mov	r17, r1
    32f8:	e8 22       	and	r14, r24
    32fa:	f9 22       	and	r15, r25
    32fc:	0a 23       	and	r16, r26
    32fe:	1b 23       	and	r17, r27
    3300:	60 e4       	ldi	r22, 0x40	; 64
    3302:	e6 16       	cp	r14, r22
    3304:	f1 04       	cpc	r15, r1
    3306:	01 05       	cpc	r16, r1
    3308:	11 05       	cpc	r17, r1
    330a:	61 f4       	brne	.+24     	; 0x3324 <__mulsf3+0x1d2>
    330c:	87 fd       	sbrc	r24, 7
    330e:	0a c0       	rjmp	.+20     	; 0x3324 <__mulsf3+0x1d2>
    3310:	21 15       	cp	r18, r1
    3312:	31 05       	cpc	r19, r1
    3314:	41 05       	cpc	r20, r1
    3316:	51 05       	cpc	r21, r1
    3318:	29 f0       	breq	.+10     	; 0x3324 <__mulsf3+0x1d2>
    331a:	80 5c       	subi	r24, 0xC0	; 192
    331c:	9f 4f       	sbci	r25, 0xFF	; 255
    331e:	af 4f       	sbci	r26, 0xFF	; 255
    3320:	bf 4f       	sbci	r27, 0xFF	; 255
    3322:	80 78       	andi	r24, 0x80	; 128
    3324:	8d 8f       	std	Y+29, r24	; 0x1d
    3326:	9e 8f       	std	Y+30, r25	; 0x1e
    3328:	af 8f       	std	Y+31, r26	; 0x1f
    332a:	b8 a3       	std	Y+32, r27	; 0x20
    332c:	83 e0       	ldi	r24, 0x03	; 3
    332e:	89 8f       	std	Y+25, r24	; 0x19
    3330:	ce 01       	movw	r24, r28
    3332:	49 96       	adiw	r24, 0x19	; 25
    3334:	02 c0       	rjmp	.+4      	; 0x333a <__mulsf3+0x1e8>
    3336:	8d ed       	ldi	r24, 0xDD	; 221
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 33 1b 	call	0x3666	; 0x3666 <__pack_f>
    333e:	a0 96       	adiw	r28, 0x20	; 32
    3340:	e2 e1       	ldi	r30, 0x12	; 18
    3342:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <__epilogue_restores__>

00003346 <__divsf3>:
    3346:	a8 e1       	ldi	r26, 0x18	; 24
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e9 ea       	ldi	r30, 0xA9	; 169
    334c:	f9 e1       	ldi	r31, 0x19	; 25
    334e:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x10>
    3352:	69 83       	std	Y+1, r22	; 0x01
    3354:	7a 83       	std	Y+2, r23	; 0x02
    3356:	8b 83       	std	Y+3, r24	; 0x03
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	2d 83       	std	Y+5, r18	; 0x05
    335c:	3e 83       	std	Y+6, r19	; 0x06
    335e:	4f 83       	std	Y+7, r20	; 0x07
    3360:	58 87       	std	Y+8, r21	; 0x08
    3362:	8e 01       	movw	r16, r28
    3364:	07 5f       	subi	r16, 0xF7	; 247
    3366:	1f 4f       	sbci	r17, 0xFF	; 255
    3368:	ce 01       	movw	r24, r28
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	b8 01       	movw	r22, r16
    336e:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    3372:	81 e1       	ldi	r24, 0x11	; 17
    3374:	e8 2e       	mov	r14, r24
    3376:	f1 2c       	mov	r15, r1
    3378:	ec 0e       	add	r14, r28
    337a:	fd 1e       	adc	r15, r29
    337c:	ce 01       	movw	r24, r28
    337e:	05 96       	adiw	r24, 0x05	; 5
    3380:	b7 01       	movw	r22, r14
    3382:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    3386:	99 85       	ldd	r25, Y+9	; 0x09
    3388:	92 30       	cpi	r25, 0x02	; 2
    338a:	08 f4       	brcc	.+2      	; 0x338e <__divsf3+0x48>
    338c:	83 c0       	rjmp	.+262    	; 0x3494 <__divsf3+0x14e>
    338e:	89 89       	ldd	r24, Y+17	; 0x11
    3390:	82 30       	cpi	r24, 0x02	; 2
    3392:	08 f4       	brcc	.+2      	; 0x3396 <__divsf3+0x50>
    3394:	7b c0       	rjmp	.+246    	; 0x348c <__divsf3+0x146>
    3396:	2a 85       	ldd	r18, Y+10	; 0x0a
    3398:	3a 89       	ldd	r19, Y+18	; 0x12
    339a:	23 27       	eor	r18, r19
    339c:	2a 87       	std	Y+10, r18	; 0x0a
    339e:	94 30       	cpi	r25, 0x04	; 4
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <__divsf3+0x60>
    33a2:	92 30       	cpi	r25, 0x02	; 2
    33a4:	21 f4       	brne	.+8      	; 0x33ae <__divsf3+0x68>
    33a6:	98 17       	cp	r25, r24
    33a8:	09 f0       	breq	.+2      	; 0x33ac <__divsf3+0x66>
    33aa:	6c c0       	rjmp	.+216    	; 0x3484 <__divsf3+0x13e>
    33ac:	71 c0       	rjmp	.+226    	; 0x3490 <__divsf3+0x14a>
    33ae:	84 30       	cpi	r24, 0x04	; 4
    33b0:	39 f4       	brne	.+14     	; 0x33c0 <__divsf3+0x7a>
    33b2:	1d 86       	std	Y+13, r1	; 0x0d
    33b4:	1e 86       	std	Y+14, r1	; 0x0e
    33b6:	1f 86       	std	Y+15, r1	; 0x0f
    33b8:	18 8a       	std	Y+16, r1	; 0x10
    33ba:	1c 86       	std	Y+12, r1	; 0x0c
    33bc:	1b 86       	std	Y+11, r1	; 0x0b
    33be:	6a c0       	rjmp	.+212    	; 0x3494 <__divsf3+0x14e>
    33c0:	82 30       	cpi	r24, 0x02	; 2
    33c2:	19 f4       	brne	.+6      	; 0x33ca <__divsf3+0x84>
    33c4:	84 e0       	ldi	r24, 0x04	; 4
    33c6:	89 87       	std	Y+9, r24	; 0x09
    33c8:	65 c0       	rjmp	.+202    	; 0x3494 <__divsf3+0x14e>
    33ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    33cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ce:	2b 89       	ldd	r18, Y+19	; 0x13
    33d0:	3c 89       	ldd	r19, Y+20	; 0x14
    33d2:	82 1b       	sub	r24, r18
    33d4:	93 0b       	sbc	r25, r19
    33d6:	9c 87       	std	Y+12, r25	; 0x0c
    33d8:	8b 87       	std	Y+11, r24	; 0x0b
    33da:	2d 85       	ldd	r18, Y+13	; 0x0d
    33dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    33de:	4f 85       	ldd	r20, Y+15	; 0x0f
    33e0:	58 89       	ldd	r21, Y+16	; 0x10
    33e2:	ed 88       	ldd	r14, Y+21	; 0x15
    33e4:	fe 88       	ldd	r15, Y+22	; 0x16
    33e6:	0f 89       	ldd	r16, Y+23	; 0x17
    33e8:	18 8d       	ldd	r17, Y+24	; 0x18
    33ea:	2e 15       	cp	r18, r14
    33ec:	3f 05       	cpc	r19, r15
    33ee:	40 07       	cpc	r20, r16
    33f0:	51 07       	cpc	r21, r17
    33f2:	38 f4       	brcc	.+14     	; 0x3402 <__divsf3+0xbc>
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	44 1f       	adc	r20, r20
    33fa:	55 1f       	adc	r21, r21
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	9c 87       	std	Y+12, r25	; 0x0c
    3400:	8b 87       	std	Y+11, r24	; 0x0b
    3402:	6f e1       	ldi	r22, 0x1F	; 31
    3404:	70 e0       	ldi	r23, 0x00	; 0
    3406:	a1 2c       	mov	r10, r1
    3408:	b1 2c       	mov	r11, r1
    340a:	c1 2c       	mov	r12, r1
    340c:	a0 e4       	ldi	r26, 0x40	; 64
    340e:	da 2e       	mov	r13, r26
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	dc 01       	movw	r26, r24
    3416:	2e 15       	cp	r18, r14
    3418:	3f 05       	cpc	r19, r15
    341a:	40 07       	cpc	r20, r16
    341c:	51 07       	cpc	r21, r17
    341e:	40 f0       	brcs	.+16     	; 0x3430 <__divsf3+0xea>
    3420:	8a 29       	or	r24, r10
    3422:	9b 29       	or	r25, r11
    3424:	ac 29       	or	r26, r12
    3426:	bd 29       	or	r27, r13
    3428:	2e 19       	sub	r18, r14
    342a:	3f 09       	sbc	r19, r15
    342c:	40 0b       	sbc	r20, r16
    342e:	51 0b       	sbc	r21, r17
    3430:	d6 94       	lsr	r13
    3432:	c7 94       	ror	r12
    3434:	b7 94       	ror	r11
    3436:	a7 94       	ror	r10
    3438:	22 0f       	add	r18, r18
    343a:	33 1f       	adc	r19, r19
    343c:	44 1f       	adc	r20, r20
    343e:	55 1f       	adc	r21, r21
    3440:	61 50       	subi	r22, 0x01	; 1
    3442:	70 40       	sbci	r23, 0x00	; 0
    3444:	41 f7       	brne	.-48     	; 0x3416 <__divsf3+0xd0>
    3446:	6f e7       	ldi	r22, 0x7F	; 127
    3448:	e6 2e       	mov	r14, r22
    344a:	f1 2c       	mov	r15, r1
    344c:	01 2d       	mov	r16, r1
    344e:	11 2d       	mov	r17, r1
    3450:	e8 22       	and	r14, r24
    3452:	f9 22       	and	r15, r25
    3454:	0a 23       	and	r16, r26
    3456:	1b 23       	and	r17, r27
    3458:	60 e4       	ldi	r22, 0x40	; 64
    345a:	e6 16       	cp	r14, r22
    345c:	f1 04       	cpc	r15, r1
    345e:	01 05       	cpc	r16, r1
    3460:	11 05       	cpc	r17, r1
    3462:	61 f4       	brne	.+24     	; 0x347c <__divsf3+0x136>
    3464:	87 fd       	sbrc	r24, 7
    3466:	0a c0       	rjmp	.+20     	; 0x347c <__divsf3+0x136>
    3468:	21 15       	cp	r18, r1
    346a:	31 05       	cpc	r19, r1
    346c:	41 05       	cpc	r20, r1
    346e:	51 05       	cpc	r21, r1
    3470:	29 f0       	breq	.+10     	; 0x347c <__divsf3+0x136>
    3472:	80 5c       	subi	r24, 0xC0	; 192
    3474:	9f 4f       	sbci	r25, 0xFF	; 255
    3476:	af 4f       	sbci	r26, 0xFF	; 255
    3478:	bf 4f       	sbci	r27, 0xFF	; 255
    347a:	80 78       	andi	r24, 0x80	; 128
    347c:	8d 87       	std	Y+13, r24	; 0x0d
    347e:	9e 87       	std	Y+14, r25	; 0x0e
    3480:	af 87       	std	Y+15, r26	; 0x0f
    3482:	b8 8b       	std	Y+16, r27	; 0x10
    3484:	8e 01       	movw	r16, r28
    3486:	07 5f       	subi	r16, 0xF7	; 247
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <__divsf3+0x14e>
    348c:	87 01       	movw	r16, r14
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <__divsf3+0x14e>
    3490:	0d ed       	ldi	r16, 0xDD	; 221
    3492:	10 e0       	ldi	r17, 0x00	; 0
    3494:	c8 01       	movw	r24, r16
    3496:	0e 94 33 1b 	call	0x3666	; 0x3666 <__pack_f>
    349a:	68 96       	adiw	r28, 0x18	; 24
    349c:	ea e0       	ldi	r30, 0x0A	; 10
    349e:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x10>

000034a2 <__gtsf2>:
    34a2:	a8 e1       	ldi	r26, 0x18	; 24
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e7 e5       	ldi	r30, 0x57	; 87
    34a8:	fa e1       	ldi	r31, 0x1A	; 26
    34aa:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__+0x18>
    34ae:	69 83       	std	Y+1, r22	; 0x01
    34b0:	7a 83       	std	Y+2, r23	; 0x02
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	9c 83       	std	Y+4, r25	; 0x04
    34b6:	2d 83       	std	Y+5, r18	; 0x05
    34b8:	3e 83       	std	Y+6, r19	; 0x06
    34ba:	4f 83       	std	Y+7, r20	; 0x07
    34bc:	58 87       	std	Y+8, r21	; 0x08
    34be:	8e 01       	movw	r16, r28
    34c0:	07 5f       	subi	r16, 0xF7	; 247
    34c2:	1f 4f       	sbci	r17, 0xFF	; 255
    34c4:	ce 01       	movw	r24, r28
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	b8 01       	movw	r22, r16
    34ca:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    34ce:	81 e1       	ldi	r24, 0x11	; 17
    34d0:	e8 2e       	mov	r14, r24
    34d2:	f1 2c       	mov	r15, r1
    34d4:	ec 0e       	add	r14, r28
    34d6:	fd 1e       	adc	r15, r29
    34d8:	ce 01       	movw	r24, r28
    34da:	05 96       	adiw	r24, 0x05	; 5
    34dc:	b7 01       	movw	r22, r14
    34de:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    34e2:	89 85       	ldd	r24, Y+9	; 0x09
    34e4:	82 30       	cpi	r24, 0x02	; 2
    34e6:	40 f0       	brcs	.+16     	; 0x34f8 <__gtsf2+0x56>
    34e8:	89 89       	ldd	r24, Y+17	; 0x11
    34ea:	82 30       	cpi	r24, 0x02	; 2
    34ec:	28 f0       	brcs	.+10     	; 0x34f8 <__gtsf2+0x56>
    34ee:	c8 01       	movw	r24, r16
    34f0:	b7 01       	movw	r22, r14
    34f2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fpcmp_parts_f>
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <__gtsf2+0x58>
    34f8:	8f ef       	ldi	r24, 0xFF	; 255
    34fa:	68 96       	adiw	r28, 0x18	; 24
    34fc:	e6 e0       	ldi	r30, 0x06	; 6
    34fe:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x18>

00003502 <__gesf2>:
    3502:	a8 e1       	ldi	r26, 0x18	; 24
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e7 e8       	ldi	r30, 0x87	; 135
    3508:	fa e1       	ldi	r31, 0x1A	; 26
    350a:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__+0x18>
    350e:	69 83       	std	Y+1, r22	; 0x01
    3510:	7a 83       	std	Y+2, r23	; 0x02
    3512:	8b 83       	std	Y+3, r24	; 0x03
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	2d 83       	std	Y+5, r18	; 0x05
    3518:	3e 83       	std	Y+6, r19	; 0x06
    351a:	4f 83       	std	Y+7, r20	; 0x07
    351c:	58 87       	std	Y+8, r21	; 0x08
    351e:	8e 01       	movw	r16, r28
    3520:	07 5f       	subi	r16, 0xF7	; 247
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	ce 01       	movw	r24, r28
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	b8 01       	movw	r22, r16
    352a:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    352e:	81 e1       	ldi	r24, 0x11	; 17
    3530:	e8 2e       	mov	r14, r24
    3532:	f1 2c       	mov	r15, r1
    3534:	ec 0e       	add	r14, r28
    3536:	fd 1e       	adc	r15, r29
    3538:	ce 01       	movw	r24, r28
    353a:	05 96       	adiw	r24, 0x05	; 5
    353c:	b7 01       	movw	r22, r14
    353e:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	82 30       	cpi	r24, 0x02	; 2
    3546:	40 f0       	brcs	.+16     	; 0x3558 <__gesf2+0x56>
    3548:	89 89       	ldd	r24, Y+17	; 0x11
    354a:	82 30       	cpi	r24, 0x02	; 2
    354c:	28 f0       	brcs	.+10     	; 0x3558 <__gesf2+0x56>
    354e:	c8 01       	movw	r24, r16
    3550:	b7 01       	movw	r22, r14
    3552:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fpcmp_parts_f>
    3556:	01 c0       	rjmp	.+2      	; 0x355a <__gesf2+0x58>
    3558:	8f ef       	ldi	r24, 0xFF	; 255
    355a:	68 96       	adiw	r28, 0x18	; 24
    355c:	e6 e0       	ldi	r30, 0x06	; 6
    355e:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x18>

00003562 <__ltsf2>:
    3562:	a8 e1       	ldi	r26, 0x18	; 24
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e7 eb       	ldi	r30, 0xB7	; 183
    3568:	fa e1       	ldi	r31, 0x1A	; 26
    356a:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__+0x18>
    356e:	69 83       	std	Y+1, r22	; 0x01
    3570:	7a 83       	std	Y+2, r23	; 0x02
    3572:	8b 83       	std	Y+3, r24	; 0x03
    3574:	9c 83       	std	Y+4, r25	; 0x04
    3576:	2d 83       	std	Y+5, r18	; 0x05
    3578:	3e 83       	std	Y+6, r19	; 0x06
    357a:	4f 83       	std	Y+7, r20	; 0x07
    357c:	58 87       	std	Y+8, r21	; 0x08
    357e:	8e 01       	movw	r16, r28
    3580:	07 5f       	subi	r16, 0xF7	; 247
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	ce 01       	movw	r24, r28
    3586:	01 96       	adiw	r24, 0x01	; 1
    3588:	b8 01       	movw	r22, r16
    358a:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    358e:	81 e1       	ldi	r24, 0x11	; 17
    3590:	e8 2e       	mov	r14, r24
    3592:	f1 2c       	mov	r15, r1
    3594:	ec 0e       	add	r14, r28
    3596:	fd 1e       	adc	r15, r29
    3598:	ce 01       	movw	r24, r28
    359a:	05 96       	adiw	r24, 0x05	; 5
    359c:	b7 01       	movw	r22, r14
    359e:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    35a2:	89 85       	ldd	r24, Y+9	; 0x09
    35a4:	82 30       	cpi	r24, 0x02	; 2
    35a6:	40 f0       	brcs	.+16     	; 0x35b8 <__ltsf2+0x56>
    35a8:	89 89       	ldd	r24, Y+17	; 0x11
    35aa:	82 30       	cpi	r24, 0x02	; 2
    35ac:	28 f0       	brcs	.+10     	; 0x35b8 <__ltsf2+0x56>
    35ae:	c8 01       	movw	r24, r16
    35b0:	b7 01       	movw	r22, r14
    35b2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fpcmp_parts_f>
    35b6:	01 c0       	rjmp	.+2      	; 0x35ba <__ltsf2+0x58>
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	68 96       	adiw	r28, 0x18	; 24
    35bc:	e6 e0       	ldi	r30, 0x06	; 6
    35be:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x18>

000035c2 <__fixsfsi>:
    35c2:	ac e0       	ldi	r26, 0x0C	; 12
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e7 ee       	ldi	r30, 0xE7	; 231
    35c8:	fa e1       	ldi	r31, 0x1A	; 26
    35ca:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__prologue_saves__+0x20>
    35ce:	69 83       	std	Y+1, r22	; 0x01
    35d0:	7a 83       	std	Y+2, r23	; 0x02
    35d2:	8b 83       	std	Y+3, r24	; 0x03
    35d4:	9c 83       	std	Y+4, r25	; 0x04
    35d6:	ce 01       	movw	r24, r28
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	be 01       	movw	r22, r28
    35dc:	6b 5f       	subi	r22, 0xFB	; 251
    35de:	7f 4f       	sbci	r23, 0xFF	; 255
    35e0:	0e 94 01 1c 	call	0x3802	; 0x3802 <__unpack_f>
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	81 f1       	breq	.+96     	; 0x364a <__fixsfsi+0x88>
    35ea:	82 30       	cpi	r24, 0x02	; 2
    35ec:	70 f1       	brcs	.+92     	; 0x364a <__fixsfsi+0x88>
    35ee:	84 30       	cpi	r24, 0x04	; 4
    35f0:	21 f4       	brne	.+8      	; 0x35fa <__fixsfsi+0x38>
    35f2:	8e 81       	ldd	r24, Y+6	; 0x06
    35f4:	88 23       	and	r24, r24
    35f6:	69 f1       	breq	.+90     	; 0x3652 <__fixsfsi+0x90>
    35f8:	0a c0       	rjmp	.+20     	; 0x360e <__fixsfsi+0x4c>
    35fa:	2f 81       	ldd	r18, Y+7	; 0x07
    35fc:	38 85       	ldd	r19, Y+8	; 0x08
    35fe:	37 fd       	sbrc	r19, 7
    3600:	24 c0       	rjmp	.+72     	; 0x364a <__fixsfsi+0x88>
    3602:	6e 81       	ldd	r22, Y+6	; 0x06
    3604:	2f 31       	cpi	r18, 0x1F	; 31
    3606:	31 05       	cpc	r19, r1
    3608:	3c f0       	brlt	.+14     	; 0x3618 <__fixsfsi+0x56>
    360a:	66 23       	and	r22, r22
    360c:	11 f1       	breq	.+68     	; 0x3652 <__fixsfsi+0x90>
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	50 e8       	ldi	r21, 0x80	; 128
    3616:	21 c0       	rjmp	.+66     	; 0x365a <__fixsfsi+0x98>
    3618:	8e e1       	ldi	r24, 0x1E	; 30
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	82 1b       	sub	r24, r18
    361e:	93 0b       	sbc	r25, r19
    3620:	29 85       	ldd	r18, Y+9	; 0x09
    3622:	3a 85       	ldd	r19, Y+10	; 0x0a
    3624:	4b 85       	ldd	r20, Y+11	; 0x0b
    3626:	5c 85       	ldd	r21, Y+12	; 0x0c
    3628:	04 c0       	rjmp	.+8      	; 0x3632 <__fixsfsi+0x70>
    362a:	56 95       	lsr	r21
    362c:	47 95       	ror	r20
    362e:	37 95       	ror	r19
    3630:	27 95       	ror	r18
    3632:	8a 95       	dec	r24
    3634:	d2 f7       	brpl	.-12     	; 0x362a <__fixsfsi+0x68>
    3636:	66 23       	and	r22, r22
    3638:	81 f0       	breq	.+32     	; 0x365a <__fixsfsi+0x98>
    363a:	50 95       	com	r21
    363c:	40 95       	com	r20
    363e:	30 95       	com	r19
    3640:	21 95       	neg	r18
    3642:	3f 4f       	sbci	r19, 0xFF	; 255
    3644:	4f 4f       	sbci	r20, 0xFF	; 255
    3646:	5f 4f       	sbci	r21, 0xFF	; 255
    3648:	08 c0       	rjmp	.+16     	; 0x365a <__fixsfsi+0x98>
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	a9 01       	movw	r20, r18
    3650:	04 c0       	rjmp	.+8      	; 0x365a <__fixsfsi+0x98>
    3652:	2f ef       	ldi	r18, 0xFF	; 255
    3654:	3f ef       	ldi	r19, 0xFF	; 255
    3656:	4f ef       	ldi	r20, 0xFF	; 255
    3658:	5f e7       	ldi	r21, 0x7F	; 127
    365a:	b9 01       	movw	r22, r18
    365c:	ca 01       	movw	r24, r20
    365e:	2c 96       	adiw	r28, 0x0c	; 12
    3660:	e2 e0       	ldi	r30, 0x02	; 2
    3662:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__epilogue_restores__+0x20>

00003666 <__pack_f>:
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	fc 01       	movw	r30, r24
    3674:	24 81       	ldd	r18, Z+4	; 0x04
    3676:	35 81       	ldd	r19, Z+5	; 0x05
    3678:	46 81       	ldd	r20, Z+6	; 0x06
    367a:	57 81       	ldd	r21, Z+7	; 0x07
    367c:	61 81       	ldd	r22, Z+1	; 0x01
    367e:	80 81       	ld	r24, Z
    3680:	82 30       	cpi	r24, 0x02	; 2
    3682:	20 f4       	brcc	.+8      	; 0x368c <__pack_f+0x26>
    3684:	40 61       	ori	r20, 0x10	; 16
    3686:	ef ef       	ldi	r30, 0xFF	; 255
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	a3 c0       	rjmp	.+326    	; 0x37d2 <__pack_f+0x16c>
    368c:	84 30       	cpi	r24, 0x04	; 4
    368e:	09 f4       	brne	.+2      	; 0x3692 <__pack_f+0x2c>
    3690:	9b c0       	rjmp	.+310    	; 0x37c8 <__pack_f+0x162>
    3692:	82 30       	cpi	r24, 0x02	; 2
    3694:	09 f4       	brne	.+2      	; 0x3698 <__pack_f+0x32>
    3696:	92 c0       	rjmp	.+292    	; 0x37bc <__pack_f+0x156>
    3698:	21 15       	cp	r18, r1
    369a:	31 05       	cpc	r19, r1
    369c:	41 05       	cpc	r20, r1
    369e:	51 05       	cpc	r21, r1
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <__pack_f+0x3e>
    36a2:	8f c0       	rjmp	.+286    	; 0x37c2 <__pack_f+0x15c>
    36a4:	02 80       	ldd	r0, Z+2	; 0x02
    36a6:	f3 81       	ldd	r31, Z+3	; 0x03
    36a8:	e0 2d       	mov	r30, r0
    36aa:	8f ef       	ldi	r24, 0xFF	; 255
    36ac:	e2 38       	cpi	r30, 0x82	; 130
    36ae:	f8 07       	cpc	r31, r24
    36b0:	0c f0       	brlt	.+2      	; 0x36b4 <__pack_f+0x4e>
    36b2:	5a c0       	rjmp	.+180    	; 0x3768 <__pack_f+0x102>
    36b4:	c2 e8       	ldi	r28, 0x82	; 130
    36b6:	df ef       	ldi	r29, 0xFF	; 255
    36b8:	ce 1b       	sub	r28, r30
    36ba:	df 0b       	sbc	r29, r31
    36bc:	ca 31       	cpi	r28, 0x1A	; 26
    36be:	d1 05       	cpc	r29, r1
    36c0:	6c f5       	brge	.+90     	; 0x371c <__pack_f+0xb6>
    36c2:	79 01       	movw	r14, r18
    36c4:	8a 01       	movw	r16, r20
    36c6:	0c 2e       	mov	r0, r28
    36c8:	04 c0       	rjmp	.+8      	; 0x36d2 <__pack_f+0x6c>
    36ca:	16 95       	lsr	r17
    36cc:	07 95       	ror	r16
    36ce:	f7 94       	ror	r15
    36d0:	e7 94       	ror	r14
    36d2:	0a 94       	dec	r0
    36d4:	d2 f7       	brpl	.-12     	; 0x36ca <__pack_f+0x64>
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	a0 e0       	ldi	r26, 0x00	; 0
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	0c 2e       	mov	r0, r28
    36e0:	04 c0       	rjmp	.+8      	; 0x36ea <__pack_f+0x84>
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	aa 1f       	adc	r26, r26
    36e8:	bb 1f       	adc	r27, r27
    36ea:	0a 94       	dec	r0
    36ec:	d2 f7       	brpl	.-12     	; 0x36e2 <__pack_f+0x7c>
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	a1 09       	sbc	r26, r1
    36f2:	b1 09       	sbc	r27, r1
    36f4:	82 23       	and	r24, r18
    36f6:	93 23       	and	r25, r19
    36f8:	a4 23       	and	r26, r20
    36fa:	b5 23       	and	r27, r21
    36fc:	21 e0       	ldi	r18, 0x01	; 1
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	a1 05       	cpc	r26, r1
    3708:	b1 05       	cpc	r27, r1
    370a:	19 f4       	brne	.+6      	; 0x3712 <__pack_f+0xac>
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	a9 01       	movw	r20, r18
    3712:	2e 29       	or	r18, r14
    3714:	3f 29       	or	r19, r15
    3716:	40 2b       	or	r20, r16
    3718:	51 2b       	or	r21, r17
    371a:	03 c0       	rjmp	.+6      	; 0x3722 <__pack_f+0xbc>
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	a9 01       	movw	r20, r18
    3722:	da 01       	movw	r26, r20
    3724:	c9 01       	movw	r24, r18
    3726:	8f 77       	andi	r24, 0x7F	; 127
    3728:	90 70       	andi	r25, 0x00	; 0
    372a:	a0 70       	andi	r26, 0x00	; 0
    372c:	b0 70       	andi	r27, 0x00	; 0
    372e:	80 34       	cpi	r24, 0x40	; 64
    3730:	91 05       	cpc	r25, r1
    3732:	a1 05       	cpc	r26, r1
    3734:	b1 05       	cpc	r27, r1
    3736:	39 f4       	brne	.+14     	; 0x3746 <__pack_f+0xe0>
    3738:	27 ff       	sbrs	r18, 7
    373a:	09 c0       	rjmp	.+18     	; 0x374e <__pack_f+0xe8>
    373c:	20 5c       	subi	r18, 0xC0	; 192
    373e:	3f 4f       	sbci	r19, 0xFF	; 255
    3740:	4f 4f       	sbci	r20, 0xFF	; 255
    3742:	5f 4f       	sbci	r21, 0xFF	; 255
    3744:	04 c0       	rjmp	.+8      	; 0x374e <__pack_f+0xe8>
    3746:	21 5c       	subi	r18, 0xC1	; 193
    3748:	3f 4f       	sbci	r19, 0xFF	; 255
    374a:	4f 4f       	sbci	r20, 0xFF	; 255
    374c:	5f 4f       	sbci	r21, 0xFF	; 255
    374e:	e1 e0       	ldi	r30, 0x01	; 1
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	20 30       	cpi	r18, 0x00	; 0
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	38 07       	cpc	r19, r24
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	48 07       	cpc	r20, r24
    375c:	80 e4       	ldi	r24, 0x40	; 64
    375e:	58 07       	cpc	r21, r24
    3760:	28 f5       	brcc	.+74     	; 0x37ac <__pack_f+0x146>
    3762:	e0 e0       	ldi	r30, 0x00	; 0
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	22 c0       	rjmp	.+68     	; 0x37ac <__pack_f+0x146>
    3768:	e0 38       	cpi	r30, 0x80	; 128
    376a:	f1 05       	cpc	r31, r1
    376c:	6c f5       	brge	.+90     	; 0x37c8 <__pack_f+0x162>
    376e:	e1 58       	subi	r30, 0x81	; 129
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	da 01       	movw	r26, r20
    3774:	c9 01       	movw	r24, r18
    3776:	8f 77       	andi	r24, 0x7F	; 127
    3778:	90 70       	andi	r25, 0x00	; 0
    377a:	a0 70       	andi	r26, 0x00	; 0
    377c:	b0 70       	andi	r27, 0x00	; 0
    377e:	80 34       	cpi	r24, 0x40	; 64
    3780:	91 05       	cpc	r25, r1
    3782:	a1 05       	cpc	r26, r1
    3784:	b1 05       	cpc	r27, r1
    3786:	39 f4       	brne	.+14     	; 0x3796 <__pack_f+0x130>
    3788:	27 ff       	sbrs	r18, 7
    378a:	09 c0       	rjmp	.+18     	; 0x379e <__pack_f+0x138>
    378c:	20 5c       	subi	r18, 0xC0	; 192
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	4f 4f       	sbci	r20, 0xFF	; 255
    3792:	5f 4f       	sbci	r21, 0xFF	; 255
    3794:	04 c0       	rjmp	.+8      	; 0x379e <__pack_f+0x138>
    3796:	21 5c       	subi	r18, 0xC1	; 193
    3798:	3f 4f       	sbci	r19, 0xFF	; 255
    379a:	4f 4f       	sbci	r20, 0xFF	; 255
    379c:	5f 4f       	sbci	r21, 0xFF	; 255
    379e:	57 ff       	sbrs	r21, 7
    37a0:	05 c0       	rjmp	.+10     	; 0x37ac <__pack_f+0x146>
    37a2:	56 95       	lsr	r21
    37a4:	47 95       	ror	r20
    37a6:	37 95       	ror	r19
    37a8:	27 95       	ror	r18
    37aa:	31 96       	adiw	r30, 0x01	; 1
    37ac:	87 e0       	ldi	r24, 0x07	; 7
    37ae:	56 95       	lsr	r21
    37b0:	47 95       	ror	r20
    37b2:	37 95       	ror	r19
    37b4:	27 95       	ror	r18
    37b6:	8a 95       	dec	r24
    37b8:	d1 f7       	brne	.-12     	; 0x37ae <__pack_f+0x148>
    37ba:	0b c0       	rjmp	.+22     	; 0x37d2 <__pack_f+0x16c>
    37bc:	e0 e0       	ldi	r30, 0x00	; 0
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	05 c0       	rjmp	.+10     	; 0x37cc <__pack_f+0x166>
    37c2:	e0 e0       	ldi	r30, 0x00	; 0
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	05 c0       	rjmp	.+10     	; 0x37d2 <__pack_f+0x16c>
    37c8:	ef ef       	ldi	r30, 0xFF	; 255
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	a9 01       	movw	r20, r18
    37d2:	8e 2f       	mov	r24, r30
    37d4:	87 95       	ror	r24
    37d6:	88 27       	eor	r24, r24
    37d8:	87 95       	ror	r24
    37da:	94 2f       	mov	r25, r20
    37dc:	9f 77       	andi	r25, 0x7F	; 127
    37de:	67 95       	ror	r22
    37e0:	66 27       	eor	r22, r22
    37e2:	67 95       	ror	r22
    37e4:	e6 95       	lsr	r30
    37e6:	e2 2e       	mov	r14, r18
    37e8:	a9 2f       	mov	r26, r25
    37ea:	a8 2b       	or	r26, r24
    37ec:	fe 2f       	mov	r31, r30
    37ee:	f6 2b       	or	r31, r22
    37f0:	62 2f       	mov	r22, r18
    37f2:	73 2f       	mov	r23, r19
    37f4:	8a 2f       	mov	r24, r26
    37f6:	9f 2f       	mov	r25, r31
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	e6 e0       	ldi	r30, 0x06	; 6
    37fe:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x18>

00003802 <__unpack_f>:
    3802:	dc 01       	movw	r26, r24
    3804:	fb 01       	movw	r30, r22
    3806:	2c 91       	ld	r18, X
    3808:	11 96       	adiw	r26, 0x01	; 1
    380a:	3c 91       	ld	r19, X
    380c:	11 97       	sbiw	r26, 0x01	; 1
    380e:	12 96       	adiw	r26, 0x02	; 2
    3810:	8c 91       	ld	r24, X
    3812:	12 97       	sbiw	r26, 0x02	; 2
    3814:	48 2f       	mov	r20, r24
    3816:	4f 77       	andi	r20, 0x7F	; 127
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	98 2f       	mov	r25, r24
    381c:	99 1f       	adc	r25, r25
    381e:	99 27       	eor	r25, r25
    3820:	99 1f       	adc	r25, r25
    3822:	13 96       	adiw	r26, 0x03	; 3
    3824:	6c 91       	ld	r22, X
    3826:	13 97       	sbiw	r26, 0x03	; 3
    3828:	86 2f       	mov	r24, r22
    382a:	88 0f       	add	r24, r24
    382c:	89 2b       	or	r24, r25
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	66 1f       	adc	r22, r22
    3832:	66 27       	eor	r22, r22
    3834:	66 1f       	adc	r22, r22
    3836:	61 83       	std	Z+1, r22	; 0x01
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	39 f5       	brne	.+78     	; 0x388a <__unpack_f+0x88>
    383c:	21 15       	cp	r18, r1
    383e:	31 05       	cpc	r19, r1
    3840:	41 05       	cpc	r20, r1
    3842:	51 05       	cpc	r21, r1
    3844:	11 f4       	brne	.+4      	; 0x384a <__unpack_f+0x48>
    3846:	82 e0       	ldi	r24, 0x02	; 2
    3848:	29 c0       	rjmp	.+82     	; 0x389c <__unpack_f+0x9a>
    384a:	82 e8       	ldi	r24, 0x82	; 130
    384c:	9f ef       	ldi	r25, 0xFF	; 255
    384e:	93 83       	std	Z+3, r25	; 0x03
    3850:	82 83       	std	Z+2, r24	; 0x02
    3852:	67 e0       	ldi	r22, 0x07	; 7
    3854:	22 0f       	add	r18, r18
    3856:	33 1f       	adc	r19, r19
    3858:	44 1f       	adc	r20, r20
    385a:	55 1f       	adc	r21, r21
    385c:	6a 95       	dec	r22
    385e:	d1 f7       	brne	.-12     	; 0x3854 <__unpack_f+0x52>
    3860:	83 e0       	ldi	r24, 0x03	; 3
    3862:	80 83       	st	Z, r24
    3864:	09 c0       	rjmp	.+18     	; 0x3878 <__unpack_f+0x76>
    3866:	22 0f       	add	r18, r18
    3868:	33 1f       	adc	r19, r19
    386a:	44 1f       	adc	r20, r20
    386c:	55 1f       	adc	r21, r21
    386e:	82 81       	ldd	r24, Z+2	; 0x02
    3870:	93 81       	ldd	r25, Z+3	; 0x03
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	93 83       	std	Z+3, r25	; 0x03
    3876:	82 83       	std	Z+2, r24	; 0x02
    3878:	20 30       	cpi	r18, 0x00	; 0
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	38 07       	cpc	r19, r24
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	48 07       	cpc	r20, r24
    3882:	80 e4       	ldi	r24, 0x40	; 64
    3884:	58 07       	cpc	r21, r24
    3886:	78 f3       	brcs	.-34     	; 0x3866 <__unpack_f+0x64>
    3888:	20 c0       	rjmp	.+64     	; 0x38ca <__unpack_f+0xc8>
    388a:	8f 3f       	cpi	r24, 0xFF	; 255
    388c:	91 05       	cpc	r25, r1
    388e:	79 f4       	brne	.+30     	; 0x38ae <__unpack_f+0xac>
    3890:	21 15       	cp	r18, r1
    3892:	31 05       	cpc	r19, r1
    3894:	41 05       	cpc	r20, r1
    3896:	51 05       	cpc	r21, r1
    3898:	19 f4       	brne	.+6      	; 0x38a0 <__unpack_f+0x9e>
    389a:	84 e0       	ldi	r24, 0x04	; 4
    389c:	80 83       	st	Z, r24
    389e:	08 95       	ret
    38a0:	44 ff       	sbrs	r20, 4
    38a2:	03 c0       	rjmp	.+6      	; 0x38aa <__unpack_f+0xa8>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	80 83       	st	Z, r24
    38a8:	10 c0       	rjmp	.+32     	; 0x38ca <__unpack_f+0xc8>
    38aa:	10 82       	st	Z, r1
    38ac:	0e c0       	rjmp	.+28     	; 0x38ca <__unpack_f+0xc8>
    38ae:	8f 57       	subi	r24, 0x7F	; 127
    38b0:	90 40       	sbci	r25, 0x00	; 0
    38b2:	93 83       	std	Z+3, r25	; 0x03
    38b4:	82 83       	std	Z+2, r24	; 0x02
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	80 83       	st	Z, r24
    38ba:	87 e0       	ldi	r24, 0x07	; 7
    38bc:	22 0f       	add	r18, r18
    38be:	33 1f       	adc	r19, r19
    38c0:	44 1f       	adc	r20, r20
    38c2:	55 1f       	adc	r21, r21
    38c4:	8a 95       	dec	r24
    38c6:	d1 f7       	brne	.-12     	; 0x38bc <__unpack_f+0xba>
    38c8:	50 64       	ori	r21, 0x40	; 64
    38ca:	24 83       	std	Z+4, r18	; 0x04
    38cc:	35 83       	std	Z+5, r19	; 0x05
    38ce:	46 83       	std	Z+6, r20	; 0x06
    38d0:	57 83       	std	Z+7, r21	; 0x07
    38d2:	08 95       	ret

000038d4 <__fpcmp_parts_f>:
    38d4:	fc 01       	movw	r30, r24
    38d6:	db 01       	movw	r26, r22
    38d8:	90 81       	ld	r25, Z
    38da:	92 30       	cpi	r25, 0x02	; 2
    38dc:	08 f4       	brcc	.+2      	; 0x38e0 <__fpcmp_parts_f+0xc>
    38de:	49 c0       	rjmp	.+146    	; 0x3972 <__fpcmp_parts_f+0x9e>
    38e0:	8c 91       	ld	r24, X
    38e2:	82 30       	cpi	r24, 0x02	; 2
    38e4:	08 f4       	brcc	.+2      	; 0x38e8 <__fpcmp_parts_f+0x14>
    38e6:	45 c0       	rjmp	.+138    	; 0x3972 <__fpcmp_parts_f+0x9e>
    38e8:	94 30       	cpi	r25, 0x04	; 4
    38ea:	51 f4       	brne	.+20     	; 0x3900 <__fpcmp_parts_f+0x2c>
    38ec:	61 81       	ldd	r22, Z+1	; 0x01
    38ee:	84 30       	cpi	r24, 0x04	; 4
    38f0:	b1 f5       	brne	.+108    	; 0x395e <__fpcmp_parts_f+0x8a>
    38f2:	11 96       	adiw	r26, 0x01	; 1
    38f4:	2c 91       	ld	r18, X
    38f6:	11 97       	sbiw	r26, 0x01	; 1
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	26 1b       	sub	r18, r22
    38fc:	31 09       	sbc	r19, r1
    38fe:	41 c0       	rjmp	.+130    	; 0x3982 <__fpcmp_parts_f+0xae>
    3900:	84 30       	cpi	r24, 0x04	; 4
    3902:	21 f0       	breq	.+8      	; 0x390c <__fpcmp_parts_f+0x38>
    3904:	92 30       	cpi	r25, 0x02	; 2
    3906:	41 f4       	brne	.+16     	; 0x3918 <__fpcmp_parts_f+0x44>
    3908:	82 30       	cpi	r24, 0x02	; 2
    390a:	b1 f1       	breq	.+108    	; 0x3978 <__fpcmp_parts_f+0xa4>
    390c:	11 96       	adiw	r26, 0x01	; 1
    390e:	8c 91       	ld	r24, X
    3910:	11 97       	sbiw	r26, 0x01	; 1
    3912:	88 23       	and	r24, r24
    3914:	a1 f1       	breq	.+104    	; 0x397e <__fpcmp_parts_f+0xaa>
    3916:	2d c0       	rjmp	.+90     	; 0x3972 <__fpcmp_parts_f+0x9e>
    3918:	61 81       	ldd	r22, Z+1	; 0x01
    391a:	82 30       	cpi	r24, 0x02	; 2
    391c:	01 f1       	breq	.+64     	; 0x395e <__fpcmp_parts_f+0x8a>
    391e:	11 96       	adiw	r26, 0x01	; 1
    3920:	8c 91       	ld	r24, X
    3922:	11 97       	sbiw	r26, 0x01	; 1
    3924:	68 17       	cp	r22, r24
    3926:	d9 f4       	brne	.+54     	; 0x395e <__fpcmp_parts_f+0x8a>
    3928:	22 81       	ldd	r18, Z+2	; 0x02
    392a:	33 81       	ldd	r19, Z+3	; 0x03
    392c:	12 96       	adiw	r26, 0x02	; 2
    392e:	8d 91       	ld	r24, X+
    3930:	9c 91       	ld	r25, X
    3932:	13 97       	sbiw	r26, 0x03	; 3
    3934:	82 17       	cp	r24, r18
    3936:	93 07       	cpc	r25, r19
    3938:	94 f0       	brlt	.+36     	; 0x395e <__fpcmp_parts_f+0x8a>
    393a:	28 17       	cp	r18, r24
    393c:	39 07       	cpc	r19, r25
    393e:	bc f0       	brlt	.+46     	; 0x396e <__fpcmp_parts_f+0x9a>
    3940:	24 81       	ldd	r18, Z+4	; 0x04
    3942:	35 81       	ldd	r19, Z+5	; 0x05
    3944:	46 81       	ldd	r20, Z+6	; 0x06
    3946:	57 81       	ldd	r21, Z+7	; 0x07
    3948:	14 96       	adiw	r26, 0x04	; 4
    394a:	8d 91       	ld	r24, X+
    394c:	9d 91       	ld	r25, X+
    394e:	0d 90       	ld	r0, X+
    3950:	bc 91       	ld	r27, X
    3952:	a0 2d       	mov	r26, r0
    3954:	82 17       	cp	r24, r18
    3956:	93 07       	cpc	r25, r19
    3958:	a4 07       	cpc	r26, r20
    395a:	b5 07       	cpc	r27, r21
    395c:	18 f4       	brcc	.+6      	; 0x3964 <__fpcmp_parts_f+0x90>
    395e:	66 23       	and	r22, r22
    3960:	41 f0       	breq	.+16     	; 0x3972 <__fpcmp_parts_f+0x9e>
    3962:	0d c0       	rjmp	.+26     	; 0x397e <__fpcmp_parts_f+0xaa>
    3964:	28 17       	cp	r18, r24
    3966:	39 07       	cpc	r19, r25
    3968:	4a 07       	cpc	r20, r26
    396a:	5b 07       	cpc	r21, r27
    396c:	28 f4       	brcc	.+10     	; 0x3978 <__fpcmp_parts_f+0xa4>
    396e:	66 23       	and	r22, r22
    3970:	31 f0       	breq	.+12     	; 0x397e <__fpcmp_parts_f+0xaa>
    3972:	21 e0       	ldi	r18, 0x01	; 1
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	05 c0       	rjmp	.+10     	; 0x3982 <__fpcmp_parts_f+0xae>
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <__fpcmp_parts_f+0xae>
    397e:	2f ef       	ldi	r18, 0xFF	; 255
    3980:	3f ef       	ldi	r19, 0xFF	; 255
    3982:	c9 01       	movw	r24, r18
    3984:	08 95       	ret

00003986 <__divmodhi4>:
    3986:	97 fb       	bst	r25, 7
    3988:	09 2e       	mov	r0, r25
    398a:	07 26       	eor	r0, r23
    398c:	0a d0       	rcall	.+20     	; 0x39a2 <__divmodhi4_neg1>
    398e:	77 fd       	sbrc	r23, 7
    3990:	04 d0       	rcall	.+8      	; 0x399a <__divmodhi4_neg2>
    3992:	0c d0       	rcall	.+24     	; 0x39ac <__udivmodhi4>
    3994:	06 d0       	rcall	.+12     	; 0x39a2 <__divmodhi4_neg1>
    3996:	00 20       	and	r0, r0
    3998:	1a f4       	brpl	.+6      	; 0x39a0 <__divmodhi4_exit>

0000399a <__divmodhi4_neg2>:
    399a:	70 95       	com	r23
    399c:	61 95       	neg	r22
    399e:	7f 4f       	sbci	r23, 0xFF	; 255

000039a0 <__divmodhi4_exit>:
    39a0:	08 95       	ret

000039a2 <__divmodhi4_neg1>:
    39a2:	f6 f7       	brtc	.-4      	; 0x39a0 <__divmodhi4_exit>
    39a4:	90 95       	com	r25
    39a6:	81 95       	neg	r24
    39a8:	9f 4f       	sbci	r25, 0xFF	; 255
    39aa:	08 95       	ret

000039ac <__udivmodhi4>:
    39ac:	aa 1b       	sub	r26, r26
    39ae:	bb 1b       	sub	r27, r27
    39b0:	51 e1       	ldi	r21, 0x11	; 17
    39b2:	07 c0       	rjmp	.+14     	; 0x39c2 <__udivmodhi4_ep>

000039b4 <__udivmodhi4_loop>:
    39b4:	aa 1f       	adc	r26, r26
    39b6:	bb 1f       	adc	r27, r27
    39b8:	a6 17       	cp	r26, r22
    39ba:	b7 07       	cpc	r27, r23
    39bc:	10 f0       	brcs	.+4      	; 0x39c2 <__udivmodhi4_ep>
    39be:	a6 1b       	sub	r26, r22
    39c0:	b7 0b       	sbc	r27, r23

000039c2 <__udivmodhi4_ep>:
    39c2:	88 1f       	adc	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	5a 95       	dec	r21
    39c8:	a9 f7       	brne	.-22     	; 0x39b4 <__udivmodhi4_loop>
    39ca:	80 95       	com	r24
    39cc:	90 95       	com	r25
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	08 95       	ret

000039d4 <__prologue_saves__>:
    39d4:	2f 92       	push	r2
    39d6:	3f 92       	push	r3
    39d8:	4f 92       	push	r4
    39da:	5f 92       	push	r5
    39dc:	6f 92       	push	r6
    39de:	7f 92       	push	r7
    39e0:	8f 92       	push	r8
    39e2:	9f 92       	push	r9
    39e4:	af 92       	push	r10
    39e6:	bf 92       	push	r11
    39e8:	cf 92       	push	r12
    39ea:	df 92       	push	r13
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62
    39fc:	ca 1b       	sub	r28, r26
    39fe:	db 0b       	sbc	r29, r27
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	09 94       	ijmp

00003a0c <__epilogue_restores__>:
    3a0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3a0e:	39 88       	ldd	r3, Y+17	; 0x11
    3a10:	48 88       	ldd	r4, Y+16	; 0x10
    3a12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3a20:	c8 84       	ldd	r12, Y+8	; 0x08
    3a22:	df 80       	ldd	r13, Y+7	; 0x07
    3a24:	ee 80       	ldd	r14, Y+6	; 0x06
    3a26:	fd 80       	ldd	r15, Y+5	; 0x05
    3a28:	0c 81       	ldd	r16, Y+4	; 0x04
    3a2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3a2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a30:	ce 0f       	add	r28, r30
    3a32:	d1 1d       	adc	r29, r1
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	ed 01       	movw	r28, r26
    3a40:	08 95       	ret

00003a42 <_exit>:
    3a42:	f8 94       	cli

00003a44 <__stop_program>:
    3a44:	ff cf       	rjmp	.-2      	; 0x3a44 <__stop_program>
