
HOME_AUTOMATION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003924  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00003924  00003998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00003a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000041dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000221  00000000  00000000  0000437d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f8e  00000000  00000000  0000459e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f2  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002474  00000000  00000000  0000871e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  0000ab94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046d  00000000  00000000  0000ada4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000644  00000000  00000000  0000be36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000c47a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 41 00 	call	0x82	; 0x82 <main>
      7a:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <avr/delay.h>
#include "lcd.h"

int main(void)
{
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	df 93       	push	r29
      88:	cf 93       	push	r28
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	6e 97       	sbiw	r28, 0x1e	; 30
      90:	0f b6       	in	r0, 0x3f	; 63
      92:	f8 94       	cli
      94:	de bf       	out	0x3e, r29	; 62
      96:	0f be       	out	0x3f, r0	; 63
      98:	cd bf       	out	0x3d, r28	; 61
	uint8_t A=0;
      9a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t B;
	DDRC=255;
      9c:	84 e3       	ldi	r24, 0x34	; 52
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	2f ef       	ldi	r18, 0xFF	; 255
      a2:	fc 01       	movw	r30, r24
      a4:	20 83       	st	Z, r18
	DDRA=0;
      a6:	8a e3       	ldi	r24, 0x3A	; 58
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	fc 01       	movw	r30, r24
      ac:	10 82       	st	Z, r1
	LCDInit(LS_BLINK|LS_ULINE);
      ae:	83 e0       	ldi	r24, 0x03	; 3
      b0:	0e 94 07 11 	call	0x220e	; 0x220e <LCDInit>
	LCDClear();
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
	LCDWriteString("HOME AUTOMATION");
      bc:	80 e6       	ldi	r24, 0x60	; 96
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	aa ef       	ldi	r26, 0xFA	; 250
      ca:	b4 e4       	ldi	r27, 0x44	; 68
      cc:	8b 83       	std	Y+3, r24	; 0x03
      ce:	9c 83       	std	Y+4, r25	; 0x04
      d0:	ad 83       	std	Y+5, r26	; 0x05
      d2:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
      d4:	6b 81       	ldd	r22, Y+3	; 0x03
      d6:	7c 81       	ldd	r23, Y+4	; 0x04
      d8:	8d 81       	ldd	r24, Y+5	; 0x05
      da:	9e 81       	ldd	r25, Y+6	; 0x06
      dc:	20 e0       	ldi	r18, 0x00	; 0
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	4a e7       	ldi	r20, 0x7A	; 122
      e2:	53 e4       	ldi	r21, 0x43	; 67
      e4:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
      e8:	dc 01       	movw	r26, r24
      ea:	cb 01       	movw	r24, r22
      ec:	8f 83       	std	Y+7, r24	; 0x07
      ee:	98 87       	std	Y+8, r25	; 0x08
      f0:	a9 87       	std	Y+9, r26	; 0x09
      f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	6f 81       	ldd	r22, Y+7	; 0x07
      f8:	78 85       	ldd	r23, Y+8	; 0x08
      fa:	89 85       	ldd	r24, Y+9	; 0x09
      fc:	9a 85       	ldd	r25, Y+10	; 0x0a
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	40 e8       	ldi	r20, 0x80	; 128
     104:	5f e3       	ldi	r21, 0x3F	; 63
     106:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     10a:	88 23       	and	r24, r24
     10c:	0c f0       	brlt	.+2      	; 0x110 <main+0x8e>
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	11 23       	and	r17, r17
     112:	29 f0       	breq	.+10     	; 0x11e <main+0x9c>
		__ticks = 1;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 87       	std	Y+12, r25	; 0x0c
     11a:	8b 87       	std	Y+11, r24	; 0x0b
     11c:	46 c0       	rjmp	.+140    	; 0x1aa <main+0x128>
	else if (__tmp > 65535)
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	6f 81       	ldd	r22, Y+7	; 0x07
     122:	78 85       	ldd	r23, Y+8	; 0x08
     124:	89 85       	ldd	r24, Y+9	; 0x09
     126:	9a 85       	ldd	r25, Y+10	; 0x0a
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	3f ef       	ldi	r19, 0xFF	; 255
     12c:	4f e7       	ldi	r20, 0x7F	; 127
     12e:	57 e4       	ldi	r21, 0x47	; 71
     130:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     134:	18 16       	cp	r1, r24
     136:	0c f0       	brlt	.+2      	; 0x13a <main+0xb8>
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	11 23       	and	r17, r17
     13c:	61 f1       	breq	.+88     	; 0x196 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     13e:	6b 81       	ldd	r22, Y+3	; 0x03
     140:	7c 81       	ldd	r23, Y+4	; 0x04
     142:	8d 81       	ldd	r24, Y+5	; 0x05
     144:	9e 81       	ldd	r25, Y+6	; 0x06
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e2       	ldi	r20, 0x20	; 32
     14c:	51 e4       	ldi	r21, 0x41	; 65
     14e:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     152:	dc 01       	movw	r26, r24
     154:	cb 01       	movw	r24, r22
     156:	bc 01       	movw	r22, r24
     158:	cd 01       	movw	r24, r26
     15a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     15e:	dc 01       	movw	r26, r24
     160:	cb 01       	movw	r24, r22
     162:	9c 87       	std	Y+12, r25	; 0x0c
     164:	8b 87       	std	Y+11, r24	; 0x0b
     166:	12 c0       	rjmp	.+36     	; 0x18c <main+0x10a>
     168:	89 e1       	ldi	r24, 0x19	; 25
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	9e 87       	std	Y+14, r25	; 0x0e
     16e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     170:	8d 85       	ldd	r24, Y+13	; 0x0d
     172:	9e 85       	ldd	r25, Y+14	; 0x0e
     174:	8c 01       	movw	r16, r24
     176:	c8 01       	movw	r24, r16
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xf6>
     17c:	8c 01       	movw	r16, r24
     17e:	1e 87       	std	Y+14, r17	; 0x0e
     180:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     182:	8b 85       	ldd	r24, Y+11	; 0x0b
     184:	9c 85       	ldd	r25, Y+12	; 0x0c
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	9c 87       	std	Y+12, r25	; 0x0c
     18a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     18c:	8b 85       	ldd	r24, Y+11	; 0x0b
     18e:	9c 85       	ldd	r25, Y+12	; 0x0c
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	51 f7       	brne	.-44     	; 0x168 <main+0xe6>
     194:	17 c0       	rjmp	.+46     	; 0x1c4 <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     196:	6f 81       	ldd	r22, Y+7	; 0x07
     198:	78 85       	ldd	r23, Y+8	; 0x08
     19a:	89 85       	ldd	r24, Y+9	; 0x09
     19c:	9a 85       	ldd	r25, Y+10	; 0x0a
     19e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     1a2:	dc 01       	movw	r26, r24
     1a4:	cb 01       	movw	r24, r22
     1a6:	9c 87       	std	Y+12, r25	; 0x0c
     1a8:	8b 87       	std	Y+11, r24	; 0x0b
     1aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ae:	98 8b       	std	Y+16, r25	; 0x10
     1b0:	8f 87       	std	Y+15, r24	; 0x0f
     1b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     1b4:	98 89       	ldd	r25, Y+16	; 0x10
     1b6:	8c 01       	movw	r16, r24
     1b8:	f8 01       	movw	r30, r16
     1ba:	31 97       	sbiw	r30, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x138>
     1be:	8f 01       	movw	r16, r30
     1c0:	18 8b       	std	Y+16, r17	; 0x10
     1c2:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(2000);
	LCDClear();
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
	LCDWriteString("SCANNING");
     1cc:	80 e7       	ldi	r24, 0x70	; 112
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
	LCDWriteStringXY(0,1,"   SENSORS.....");
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCDGotoXY>
     1dc:	89 e7       	ldi	r24, 0x79	; 121
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	aa ef       	ldi	r26, 0xFA	; 250
     1ea:	b4 e4       	ldi	r27, 0x44	; 68
     1ec:	89 8b       	std	Y+17, r24	; 0x11
     1ee:	9a 8b       	std	Y+18, r25	; 0x12
     1f0:	ab 8b       	std	Y+19, r26	; 0x13
     1f2:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     1f4:	69 89       	ldd	r22, Y+17	; 0x11
     1f6:	7a 89       	ldd	r23, Y+18	; 0x12
     1f8:	8b 89       	ldd	r24, Y+19	; 0x13
     1fa:	9c 89       	ldd	r25, Y+20	; 0x14
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	4a e7       	ldi	r20, 0x7A	; 122
     202:	53 e4       	ldi	r21, 0x43	; 67
     204:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	8d 8b       	std	Y+21, r24	; 0x15
     20e:	9e 8b       	std	Y+22, r25	; 0x16
     210:	af 8b       	std	Y+23, r26	; 0x17
     212:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     214:	11 e0       	ldi	r17, 0x01	; 1
     216:	6d 89       	ldd	r22, Y+21	; 0x15
     218:	7e 89       	ldd	r23, Y+22	; 0x16
     21a:	8f 89       	ldd	r24, Y+23	; 0x17
     21c:	98 8d       	ldd	r25, Y+24	; 0x18
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e8       	ldi	r20, 0x80	; 128
     224:	5f e3       	ldi	r21, 0x3F	; 63
     226:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     22a:	88 23       	and	r24, r24
     22c:	0c f0       	brlt	.+2      	; 0x230 <main+0x1ae>
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	11 23       	and	r17, r17
     232:	29 f0       	breq	.+10     	; 0x23e <main+0x1bc>
		__ticks = 1;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	9a 8f       	std	Y+26, r25	; 0x1a
     23a:	89 8f       	std	Y+25, r24	; 0x19
     23c:	46 c0       	rjmp	.+140    	; 0x2ca <main+0x248>
	else if (__tmp > 65535)
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	6d 89       	ldd	r22, Y+21	; 0x15
     242:	7e 89       	ldd	r23, Y+22	; 0x16
     244:	8f 89       	ldd	r24, Y+23	; 0x17
     246:	98 8d       	ldd	r25, Y+24	; 0x18
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	3f ef       	ldi	r19, 0xFF	; 255
     24c:	4f e7       	ldi	r20, 0x7F	; 127
     24e:	57 e4       	ldi	r21, 0x47	; 71
     250:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     254:	18 16       	cp	r1, r24
     256:	0c f0       	brlt	.+2      	; 0x25a <main+0x1d8>
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	11 23       	and	r17, r17
     25c:	61 f1       	breq	.+88     	; 0x2b6 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25e:	69 89       	ldd	r22, Y+17	; 0x11
     260:	7a 89       	ldd	r23, Y+18	; 0x12
     262:	8b 89       	ldd	r24, Y+19	; 0x13
     264:	9c 89       	ldd	r25, Y+20	; 0x14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	bc 01       	movw	r22, r24
     278:	cd 01       	movw	r24, r26
     27a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     27e:	dc 01       	movw	r26, r24
     280:	cb 01       	movw	r24, r22
     282:	9a 8f       	std	Y+26, r25	; 0x1a
     284:	89 8f       	std	Y+25, r24	; 0x19
     286:	12 c0       	rjmp	.+36     	; 0x2ac <main+0x22a>
     288:	89 e1       	ldi	r24, 0x19	; 25
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9c 8f       	std	Y+28, r25	; 0x1c
     28e:	8b 8f       	std	Y+27, r24	; 0x1b
     290:	8b 8d       	ldd	r24, Y+27	; 0x1b
     292:	9c 8d       	ldd	r25, Y+28	; 0x1c
     294:	8c 01       	movw	r16, r24
     296:	c8 01       	movw	r24, r16
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x216>
     29c:	8c 01       	movw	r16, r24
     29e:	1c 8f       	std	Y+28, r17	; 0x1c
     2a0:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a2:	89 8d       	ldd	r24, Y+25	; 0x19
     2a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	9a 8f       	std	Y+26, r25	; 0x1a
     2aa:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ac:	89 8d       	ldd	r24, Y+25	; 0x19
     2ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	51 f7       	brne	.-44     	; 0x288 <main+0x206>
     2b4:	19 c0       	rjmp	.+50     	; 0x2e8 <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2b6:	6d 89       	ldd	r22, Y+21	; 0x15
     2b8:	7e 89       	ldd	r23, Y+22	; 0x16
     2ba:	8f 89       	ldd	r24, Y+23	; 0x17
     2bc:	98 8d       	ldd	r25, Y+24	; 0x18
     2be:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     2c2:	dc 01       	movw	r26, r24
     2c4:	cb 01       	movw	r24, r22
     2c6:	9a 8f       	std	Y+26, r25	; 0x1a
     2c8:	89 8f       	std	Y+25, r24	; 0x19
     2ca:	89 8d       	ldd	r24, Y+25	; 0x19
     2cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ce:	9e 8f       	std	Y+30, r25	; 0x1e
     2d0:	8d 8f       	std	Y+29, r24	; 0x1d
     2d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2d6:	8c 01       	movw	r16, r24
     2d8:	f8 01       	movw	r30, r16
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x258>
     2de:	8f 01       	movw	r16, r30
     2e0:	1e 8f       	std	Y+30, r17	; 0x1e
     2e2:	0d 8f       	std	Y+29, r16	; 0x1d
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <main+0x266>
	   LCDWriteString("DANGER!!!!");
	   break;
	     
	   }
	   
    }
     2e6:	00 00       	nop
	LCDWriteStringXY(0,1,"   SENSORS.....");
	_delay_ms(2000);
    while(1)
    {
		
       B=~PINA;
     2e8:	89 e3       	ldi	r24, 0x39	; 57
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	80 95       	com	r24
     2f2:	8a 83       	std	Y+2, r24	; 0x02
	   if(A!=B)
     2f4:	99 81       	ldd	r25, Y+1	; 0x01
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	98 17       	cp	r25, r24
     2fa:	a9 f3       	breq	.-22     	; 0x2e6 <main+0x264>
	   switch(B)
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	88 2f       	mov	r24, r24
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	84 38       	cpi	r24, 0x84	; 132
     304:	91 05       	cpc	r25, r1
     306:	09 f4       	brne	.+2      	; 0x30a <main+0x288>
     308:	4b c0       	rjmp	.+150    	; 0x3a0 <main+0x31e>
     30a:	85 38       	cpi	r24, 0x85	; 133
     30c:	91 05       	cpc	r25, r1
     30e:	54 f4       	brge	.+20     	; 0x324 <main+0x2a2>
     310:	81 38       	cpi	r24, 0x81	; 129
     312:	91 05       	cpc	r25, r1
     314:	49 f1       	breq	.+82     	; 0x368 <main+0x2e6>
     316:	82 38       	cpi	r24, 0x82	; 130
     318:	91 05       	cpc	r25, r1
     31a:	a1 f1       	breq	.+104    	; 0x384 <main+0x302>
     31c:	80 38       	cpi	r24, 0x80	; 128
     31e:	91 05       	cpc	r25, r1
     320:	71 f0       	breq	.+28     	; 0x33e <main+0x2bc>
     322:	7e c0       	rjmp	.+252    	; 0x420 <main+0x39e>
     324:	89 38       	cpi	r24, 0x89	; 137
     326:	91 05       	cpc	r25, r1
     328:	09 f4       	brne	.+2      	; 0x32c <main+0x2aa>
     32a:	64 c0       	rjmp	.+200    	; 0x3f4 <main+0x372>
     32c:	80 39       	cpi	r24, 0x90	; 144
     32e:	91 05       	cpc	r25, r1
     330:	09 f4       	brne	.+2      	; 0x334 <main+0x2b2>
     332:	52 c0       	rjmp	.+164    	; 0x3d8 <main+0x356>
     334:	88 38       	cpi	r24, 0x88	; 136
     336:	91 05       	cpc	r25, r1
     338:	09 f4       	brne	.+2      	; 0x33c <main+0x2ba>
     33a:	40 c0       	rjmp	.+128    	; 0x3bc <main+0x33a>
     33c:	71 c0       	rjmp	.+226    	; 0x420 <main+0x39e>
	   {
		case 0x80:
		PORTC=0x00;
     33e:	85 e3       	ldi	r24, 0x35	; 53
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	fc 01       	movw	r30, r24
     344:	10 82       	st	Z, r1
		LCDClear();
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("**SYSTEM IDLE**");
     34e:	89 e8       	ldi	r24, 0x89	; 137
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		LCDWriteStringXY(0,1,"***************");
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCDGotoXY>
     35e:	89 e9       	ldi	r24, 0x99	; 153
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		//_delay_ms(1000);
		break;
     366:	65 c0       	rjmp	.+202    	; 0x432 <main+0x3b0>
		//fire
		case 0x81:
		PORTC=0x01;
     368:	85 e3       	ldi	r24, 0x35	; 53
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
		LCDClear();
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("FIRE!! FIRE!!"); 
     37a:	89 ea       	ldi	r24, 0xA9	; 169
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		//_delay_ms(1000);
		break;
     382:	57 c0       	rjmp	.+174    	; 0x432 <main+0x3b0>
		//light
		case 0x82:
		PORTC=0x02;
     384:	85 e3       	ldi	r24, 0x35	; 53
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	22 e0       	ldi	r18, 0x02	; 2
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
		LCDClear();
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("LIGHTS ON!!");
     396:	87 eb       	ldi	r24, 0xB7	; 183
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		//_delay_ms(1000);
		break;
     39e:	49 c0       	rjmp	.+146    	; 0x432 <main+0x3b0>
		//LASER
		case 0x84:
		PORTC=0x04;
     3a0:	85 e3       	ldi	r24, 0x35	; 53
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	24 e0       	ldi	r18, 0x04	; 4
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
		LCDClear();
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("INTRUDER DETECTD");
     3b2:	83 ec       	ldi	r24, 0xC3	; 195
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		//_delay_ms(1000);
		break;
     3ba:	3b c0       	rjmp	.+118    	; 0x432 <main+0x3b0>
		//TOUCH
		case 0x88:
		PORTC=0x08;
     3bc:	85 e3       	ldi	r24, 0x35	; 53
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	28 e0       	ldi	r18, 0x08	; 8
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
		LCDClear();
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("TOUCH DETECTED");
     3ce:	84 ed       	ldi	r24, 0xD4	; 212
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		//_delay_ms(1000);
		break;
     3d6:	2d c0       	rjmp	.+90     	; 0x432 <main+0x3b0>
		//GADGET(FAN)
		case 0x90:
		PORTC=0x10;
     3d8:	85 e3       	ldi	r24, 0x35	; 53
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	20 e1       	ldi	r18, 0x10	; 16
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
		LCDClear();
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("GADGET ON!!");
     3ea:	83 ee       	ldi	r24, 0xE3	; 227
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		//_delay_ms(1000);
		break;
     3f2:	1f c0       	rjmp	.+62     	; 0x432 <main+0x3b0>
		//FLAME AND TOUCH
		case 0x89:
		PORTC=0x09;
     3f4:	85 e3       	ldi	r24, 0x35	; 53
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	29 e0       	ldi	r18, 0x09	; 9
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
		LCDClear();
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		LCDWriteString("FIRE!! FIRE!!");
     406:	89 ea       	ldi	r24, 0xA9	; 169
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		LCDWriteStringXY(0,1,"TOUCH DECTECTED");
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCDGotoXY>
     416:	8f ee       	ldi	r24, 0xEF	; 239
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
		break;		
     41e:	09 c0       	rjmp	.+18     	; 0x432 <main+0x3b0>
		default:
	   LCDClear();
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
	   LCDWriteString("DANGER!!!!");
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <LCDWriteString>
	   break;
     430:	00 00       	nop
	     
	   }
	   
    }
     432:	5a cf       	rjmp	.-332    	; 0x2e8 <main+0x266>

00000434 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	cd 57       	subi	r28, 0x7D	; 125
     442:	d0 40       	sbci	r29, 0x00	; 0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	9e 01       	movw	r18, r28
     450:	24 58       	subi	r18, 0x84	; 132
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	f9 01       	movw	r30, r18
     456:	80 83       	st	Z, r24
     458:	ce 01       	movw	r24, r28
     45a:	83 58       	subi	r24, 0x83	; 131
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	fc 01       	movw	r30, r24
     460:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     462:	ce 01       	movw	r24, r28
     464:	84 58       	subi	r24, 0x84	; 132
     466:	9f 4f       	sbci	r25, 0xFF	; 255
     468:	fc 01       	movw	r30, r24
     46a:	80 81       	ld	r24, Z
     46c:	82 95       	swap	r24
     46e:	8f 70       	andi	r24, 0x0F	; 15
     470:	89 83       	std	Y+1, r24	; 0x01
ln=(c & 0x0F);
     472:	ce 01       	movw	r24, r28
     474:	84 58       	subi	r24, 0x84	; 132
     476:	9f 4f       	sbci	r25, 0xFF	; 255
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	8f 70       	andi	r24, 0x0F	; 15
     47e:	8a 83       	std	Y+2, r24	; 0x02

if(isdata==0)
     480:	ce 01       	movw	r24, r28
     482:	83 58       	subi	r24, 0x83	; 131
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	88 23       	and	r24, r24
     48c:	51 f4       	brne	.+20     	; 0x4a2 <LCDByte+0x6e>
	CLEAR_RS();
     48e:	82 e3       	ldi	r24, 0x32	; 50
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	22 e3       	ldi	r18, 0x32	; 50
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	f9 01       	movw	r30, r18
     498:	20 81       	ld	r18, Z
     49a:	27 7f       	andi	r18, 0xF7	; 247
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
     4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <LCDByte+0x80>
else
	SET_RS();
     4a2:	82 e3       	ldi	r24, 0x32	; 50
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	22 e3       	ldi	r18, 0x32	; 50
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	28 60       	ori	r18, 0x08	; 8
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	bf e3       	ldi	r27, 0x3F	; 63
     4bc:	8c 83       	std	Y+4, r24	; 0x04
     4be:	9d 83       	std	Y+5, r25	; 0x05
     4c0:	ae 83       	std	Y+6, r26	; 0x06
     4c2:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     4c4:	6c 81       	ldd	r22, Y+4	; 0x04
     4c6:	7d 81       	ldd	r23, Y+5	; 0x05
     4c8:	8e 81       	ldd	r24, Y+6	; 0x06
     4ca:	9f 81       	ldd	r25, Y+7	; 0x07
     4cc:	2b ea       	ldi	r18, 0xAB	; 171
     4ce:	3a ea       	ldi	r19, 0xAA	; 170
     4d0:	4a ea       	ldi	r20, 0xAA	; 170
     4d2:	5e e3       	ldi	r21, 0x3E	; 62
     4d4:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	88 87       	std	Y+8, r24	; 0x08
     4de:	99 87       	std	Y+9, r25	; 0x09
     4e0:	aa 87       	std	Y+10, r26	; 0x0a
     4e2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	68 85       	ldd	r22, Y+8	; 0x08
     4e8:	79 85       	ldd	r23, Y+9	; 0x09
     4ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     4ec:	9b 85       	ldd	r25, Y+11	; 0x0b
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e8       	ldi	r20, 0x80	; 128
     4f4:	5f e3       	ldi	r21, 0x3F	; 63
     4f6:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     4fa:	88 23       	and	r24, r24
     4fc:	0c f0       	brlt	.+2      	; 0x500 <LCDByte+0xcc>
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	11 23       	and	r17, r17
     502:	19 f0       	breq	.+6      	; 0x50a <LCDByte+0xd6>
		__ticks = 1;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	8c 87       	std	Y+12, r24	; 0x0c
     508:	a3 c0       	rjmp	.+326    	; 0x650 <LCDByte+0x21c>
	else if (__tmp > 255)
     50a:	11 e0       	ldi	r17, 0x01	; 1
     50c:	68 85       	ldd	r22, Y+8	; 0x08
     50e:	79 85       	ldd	r23, Y+9	; 0x09
     510:	8a 85       	ldd	r24, Y+10	; 0x0a
     512:	9b 85       	ldd	r25, Y+11	; 0x0b
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4f e7       	ldi	r20, 0x7F	; 127
     51a:	53 e4       	ldi	r21, 0x43	; 67
     51c:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     520:	18 16       	cp	r1, r24
     522:	0c f0       	brlt	.+2      	; 0x526 <LCDByte+0xf2>
     524:	10 e0       	ldi	r17, 0x00	; 0
     526:	11 23       	and	r17, r17
     528:	09 f4       	brne	.+2      	; 0x52c <LCDByte+0xf8>
     52a:	89 c0       	rjmp	.+274    	; 0x63e <LCDByte+0x20a>
	{
		_delay_ms(__us / 1000.0);
     52c:	6c 81       	ldd	r22, Y+4	; 0x04
     52e:	7d 81       	ldd	r23, Y+5	; 0x05
     530:	8e 81       	ldd	r24, Y+6	; 0x06
     532:	9f 81       	ldd	r25, Y+7	; 0x07
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	4a e7       	ldi	r20, 0x7A	; 122
     53a:	54 e4       	ldi	r21, 0x44	; 68
     53c:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	8d 87       	std	Y+13, r24	; 0x0d
     546:	9e 87       	std	Y+14, r25	; 0x0e
     548:	af 87       	std	Y+15, r26	; 0x0f
     54a:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     54c:	6d 85       	ldd	r22, Y+13	; 0x0d
     54e:	7e 85       	ldd	r23, Y+14	; 0x0e
     550:	8f 85       	ldd	r24, Y+15	; 0x0f
     552:	98 89       	ldd	r25, Y+16	; 0x10
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	4a e7       	ldi	r20, 0x7A	; 122
     55a:	53 e4       	ldi	r21, 0x43	; 67
     55c:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	89 8b       	std	Y+17, r24	; 0x11
     566:	9a 8b       	std	Y+18, r25	; 0x12
     568:	ab 8b       	std	Y+19, r26	; 0x13
     56a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     56c:	11 e0       	ldi	r17, 0x01	; 1
     56e:	69 89       	ldd	r22, Y+17	; 0x11
     570:	7a 89       	ldd	r23, Y+18	; 0x12
     572:	8b 89       	ldd	r24, Y+19	; 0x13
     574:	9c 89       	ldd	r25, Y+20	; 0x14
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e8       	ldi	r20, 0x80	; 128
     57c:	5f e3       	ldi	r21, 0x3F	; 63
     57e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     582:	88 23       	and	r24, r24
     584:	0c f0       	brlt	.+2      	; 0x588 <LCDByte+0x154>
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	11 23       	and	r17, r17
     58a:	29 f0       	breq	.+10     	; 0x596 <LCDByte+0x162>
		__ticks = 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9e 8b       	std	Y+22, r25	; 0x16
     592:	8d 8b       	std	Y+21, r24	; 0x15
     594:	46 c0       	rjmp	.+140    	; 0x622 <LCDByte+0x1ee>
	else if (__tmp > 65535)
     596:	11 e0       	ldi	r17, 0x01	; 1
     598:	69 89       	ldd	r22, Y+17	; 0x11
     59a:	7a 89       	ldd	r23, Y+18	; 0x12
     59c:	8b 89       	ldd	r24, Y+19	; 0x13
     59e:	9c 89       	ldd	r25, Y+20	; 0x14
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	3f ef       	ldi	r19, 0xFF	; 255
     5a4:	4f e7       	ldi	r20, 0x7F	; 127
     5a6:	57 e4       	ldi	r21, 0x47	; 71
     5a8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     5ac:	18 16       	cp	r1, r24
     5ae:	0c f0       	brlt	.+2      	; 0x5b2 <LCDByte+0x17e>
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	11 23       	and	r17, r17
     5b4:	61 f1       	breq	.+88     	; 0x60e <LCDByte+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5b6:	6d 85       	ldd	r22, Y+13	; 0x0d
     5b8:	7e 85       	ldd	r23, Y+14	; 0x0e
     5ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     5bc:	98 89       	ldd	r25, Y+16	; 0x10
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e2       	ldi	r20, 0x20	; 32
     5c4:	51 e4       	ldi	r21, 0x41	; 65
     5c6:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	bc 01       	movw	r22, r24
     5d0:	cd 01       	movw	r24, r26
     5d2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	9e 8b       	std	Y+22, r25	; 0x16
     5dc:	8d 8b       	std	Y+21, r24	; 0x15
     5de:	12 c0       	rjmp	.+36     	; 0x604 <LCDByte+0x1d0>
     5e0:	89 e1       	ldi	r24, 0x19	; 25
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	98 8f       	std	Y+24, r25	; 0x18
     5e6:	8f 8b       	std	Y+23, r24	; 0x17
     5e8:	8f 89       	ldd	r24, Y+23	; 0x17
     5ea:	98 8d       	ldd	r25, Y+24	; 0x18
     5ec:	8c 01       	movw	r16, r24
     5ee:	c8 01       	movw	r24, r16
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCDByte+0x1bc>
     5f4:	8c 01       	movw	r16, r24
     5f6:	18 8f       	std	Y+24, r17	; 0x18
     5f8:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fa:	8d 89       	ldd	r24, Y+21	; 0x15
     5fc:	9e 89       	ldd	r25, Y+22	; 0x16
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	9e 8b       	std	Y+22, r25	; 0x16
     602:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     604:	8d 89       	ldd	r24, Y+21	; 0x15
     606:	9e 89       	ldd	r25, Y+22	; 0x16
     608:	00 97       	sbiw	r24, 0x00	; 0
     60a:	51 f7       	brne	.-44     	; 0x5e0 <LCDByte+0x1ac>
     60c:	28 c0       	rjmp	.+80     	; 0x65e <LCDByte+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     60e:	69 89       	ldd	r22, Y+17	; 0x11
     610:	7a 89       	ldd	r23, Y+18	; 0x12
     612:	8b 89       	ldd	r24, Y+19	; 0x13
     614:	9c 89       	ldd	r25, Y+20	; 0x14
     616:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	9e 8b       	std	Y+22, r25	; 0x16
     620:	8d 8b       	std	Y+21, r24	; 0x15
     622:	8d 89       	ldd	r24, Y+21	; 0x15
     624:	9e 89       	ldd	r25, Y+22	; 0x16
     626:	9a 8f       	std	Y+26, r25	; 0x1a
     628:	89 8f       	std	Y+25, r24	; 0x19
     62a:	89 8d       	ldd	r24, Y+25	; 0x19
     62c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     62e:	8c 01       	movw	r16, r24
     630:	f8 01       	movw	r30, r16
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <LCDByte+0x1fe>
     636:	8f 01       	movw	r16, r30
     638:	1a 8f       	std	Y+26, r17	; 0x1a
     63a:	09 8f       	std	Y+25, r16	; 0x19
     63c:	10 c0       	rjmp	.+32     	; 0x65e <LCDByte+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     63e:	68 85       	ldd	r22, Y+8	; 0x08
     640:	79 85       	ldd	r23, Y+9	; 0x09
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	9b 85       	ldd	r25, Y+11	; 0x0b
     646:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	8c 87       	std	Y+12, r24	; 0x0c
     650:	8c 85       	ldd	r24, Y+12	; 0x0c
     652:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     654:	8b 8d       	ldd	r24, Y+27	; 0x1b
     656:	18 2f       	mov	r17, r24
     658:	1a 95       	dec	r17
     65a:	f1 f7       	brne	.-4      	; 0x658 <LCDByte+0x224>
     65c:	1b 8f       	std	Y+27, r17	; 0x1b

_delay_us(0.500);		//tAS

SET_E();
     65e:	88 e3       	ldi	r24, 0x38	; 56
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	28 e3       	ldi	r18, 0x38	; 56
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	20 61       	ori	r18, 0x10	; 16
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     670:	88 e3       	ldi	r24, 0x38	; 56
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	80 81       	ld	r24, Z
     678:	98 2f       	mov	r25, r24
     67a:	90 7f       	andi	r25, 0xF0	; 240
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	89 2b       	or	r24, r25
     680:	8b 83       	std	Y+3, r24	; 0x03
LCD_DATA_PORT=temp;
     682:	88 e3       	ldi	r24, 0x38	; 56
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	2b 81       	ldd	r18, Y+3	; 0x03
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	a0 e8       	ldi	r26, 0x80	; 128
     692:	bf e3       	ldi	r27, 0x3F	; 63
     694:	8c 8f       	std	Y+28, r24	; 0x1c
     696:	9d 8f       	std	Y+29, r25	; 0x1d
     698:	ae 8f       	std	Y+30, r26	; 0x1e
     69a:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     69c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     69e:	7d 8d       	ldd	r23, Y+29	; 0x1d
     6a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6a4:	2b ea       	ldi	r18, 0xAB	; 171
     6a6:	3a ea       	ldi	r19, 0xAA	; 170
     6a8:	4a ea       	ldi	r20, 0xAA	; 170
     6aa:	5e e3       	ldi	r21, 0x3E	; 62
     6ac:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	88 a3       	std	Y+32, r24	; 0x20
     6b6:	99 a3       	std	Y+33, r25	; 0x21
     6b8:	aa a3       	std	Y+34, r26	; 0x22
     6ba:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     6bc:	11 e0       	ldi	r17, 0x01	; 1
     6be:	68 a1       	ldd	r22, Y+32	; 0x20
     6c0:	79 a1       	ldd	r23, Y+33	; 0x21
     6c2:	8a a1       	ldd	r24, Y+34	; 0x22
     6c4:	9b a1       	ldd	r25, Y+35	; 0x23
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5f e3       	ldi	r21, 0x3F	; 63
     6ce:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     6d2:	88 23       	and	r24, r24
     6d4:	0c f0       	brlt	.+2      	; 0x6d8 <LCDByte+0x2a4>
     6d6:	10 e0       	ldi	r17, 0x00	; 0
     6d8:	11 23       	and	r17, r17
     6da:	19 f0       	breq	.+6      	; 0x6e2 <LCDByte+0x2ae>
		__ticks = 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	8c a3       	std	Y+36, r24	; 0x24
     6e0:	a3 c0       	rjmp	.+326    	; 0x828 <LCDByte+0x3f4>
	else if (__tmp > 255)
     6e2:	11 e0       	ldi	r17, 0x01	; 1
     6e4:	68 a1       	ldd	r22, Y+32	; 0x20
     6e6:	79 a1       	ldd	r23, Y+33	; 0x21
     6e8:	8a a1       	ldd	r24, Y+34	; 0x22
     6ea:	9b a1       	ldd	r25, Y+35	; 0x23
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	4f e7       	ldi	r20, 0x7F	; 127
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	0c f0       	brlt	.+2      	; 0x6fe <LCDByte+0x2ca>
     6fc:	10 e0       	ldi	r17, 0x00	; 0
     6fe:	11 23       	and	r17, r17
     700:	09 f4       	brne	.+2      	; 0x704 <LCDByte+0x2d0>
     702:	89 c0       	rjmp	.+274    	; 0x816 <LCDByte+0x3e2>
	{
		_delay_ms(__us / 1000.0);
     704:	6c 8d       	ldd	r22, Y+28	; 0x1c
     706:	7d 8d       	ldd	r23, Y+29	; 0x1d
     708:	8e 8d       	ldd	r24, Y+30	; 0x1e
     70a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	4a e7       	ldi	r20, 0x7A	; 122
     712:	54 e4       	ldi	r21, 0x44	; 68
     714:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	8d a3       	std	Y+37, r24	; 0x25
     71e:	9e a3       	std	Y+38, r25	; 0x26
     720:	af a3       	std	Y+39, r26	; 0x27
     722:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     724:	6d a1       	ldd	r22, Y+37	; 0x25
     726:	7e a1       	ldd	r23, Y+38	; 0x26
     728:	8f a1       	ldd	r24, Y+39	; 0x27
     72a:	98 a5       	ldd	r25, Y+40	; 0x28
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	4a e7       	ldi	r20, 0x7A	; 122
     732:	53 e4       	ldi	r21, 0x43	; 67
     734:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     738:	dc 01       	movw	r26, r24
     73a:	cb 01       	movw	r24, r22
     73c:	89 a7       	std	Y+41, r24	; 0x29
     73e:	9a a7       	std	Y+42, r25	; 0x2a
     740:	ab a7       	std	Y+43, r26	; 0x2b
     742:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     744:	11 e0       	ldi	r17, 0x01	; 1
     746:	69 a5       	ldd	r22, Y+41	; 0x29
     748:	7a a5       	ldd	r23, Y+42	; 0x2a
     74a:	8b a5       	ldd	r24, Y+43	; 0x2b
     74c:	9c a5       	ldd	r25, Y+44	; 0x2c
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     75a:	88 23       	and	r24, r24
     75c:	0c f0       	brlt	.+2      	; 0x760 <LCDByte+0x32c>
     75e:	10 e0       	ldi	r17, 0x00	; 0
     760:	11 23       	and	r17, r17
     762:	29 f0       	breq	.+10     	; 0x76e <LCDByte+0x33a>
		__ticks = 1;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	9e a7       	std	Y+46, r25	; 0x2e
     76a:	8d a7       	std	Y+45, r24	; 0x2d
     76c:	46 c0       	rjmp	.+140    	; 0x7fa <LCDByte+0x3c6>
	else if (__tmp > 65535)
     76e:	11 e0       	ldi	r17, 0x01	; 1
     770:	69 a5       	ldd	r22, Y+41	; 0x29
     772:	7a a5       	ldd	r23, Y+42	; 0x2a
     774:	8b a5       	ldd	r24, Y+43	; 0x2b
     776:	9c a5       	ldd	r25, Y+44	; 0x2c
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	3f ef       	ldi	r19, 0xFF	; 255
     77c:	4f e7       	ldi	r20, 0x7F	; 127
     77e:	57 e4       	ldi	r21, 0x47	; 71
     780:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     784:	18 16       	cp	r1, r24
     786:	0c f0       	brlt	.+2      	; 0x78a <LCDByte+0x356>
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	11 23       	and	r17, r17
     78c:	61 f1       	breq	.+88     	; 0x7e6 <LCDByte+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78e:	6d a1       	ldd	r22, Y+37	; 0x25
     790:	7e a1       	ldd	r23, Y+38	; 0x26
     792:	8f a1       	ldd	r24, Y+39	; 0x27
     794:	98 a5       	ldd	r25, Y+40	; 0x28
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e2       	ldi	r20, 0x20	; 32
     79c:	51 e4       	ldi	r21, 0x41	; 65
     79e:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	bc 01       	movw	r22, r24
     7a8:	cd 01       	movw	r24, r26
     7aa:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	9e a7       	std	Y+46, r25	; 0x2e
     7b4:	8d a7       	std	Y+45, r24	; 0x2d
     7b6:	12 c0       	rjmp	.+36     	; 0x7dc <LCDByte+0x3a8>
     7b8:	89 e1       	ldi	r24, 0x19	; 25
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	98 ab       	std	Y+48, r25	; 0x30
     7be:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7c0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7c2:	98 a9       	ldd	r25, Y+48	; 0x30
     7c4:	8c 01       	movw	r16, r24
     7c6:	c8 01       	movw	r24, r16
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <LCDByte+0x394>
     7cc:	8c 01       	movw	r16, r24
     7ce:	18 ab       	std	Y+48, r17	; 0x30
     7d0:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d2:	8d a5       	ldd	r24, Y+45	; 0x2d
     7d4:	9e a5       	ldd	r25, Y+46	; 0x2e
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	9e a7       	std	Y+46, r25	; 0x2e
     7da:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7dc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7de:	9e a5       	ldd	r25, Y+46	; 0x2e
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	51 f7       	brne	.-44     	; 0x7b8 <LCDByte+0x384>
     7e4:	28 c0       	rjmp	.+80     	; 0x836 <LCDByte+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e6:	69 a5       	ldd	r22, Y+41	; 0x29
     7e8:	7a a5       	ldd	r23, Y+42	; 0x2a
     7ea:	8b a5       	ldd	r24, Y+43	; 0x2b
     7ec:	9c a5       	ldd	r25, Y+44	; 0x2c
     7ee:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	9e a7       	std	Y+46, r25	; 0x2e
     7f8:	8d a7       	std	Y+45, r24	; 0x2d
     7fa:	8d a5       	ldd	r24, Y+45	; 0x2d
     7fc:	9e a5       	ldd	r25, Y+46	; 0x2e
     7fe:	9a ab       	std	Y+50, r25	; 0x32
     800:	89 ab       	std	Y+49, r24	; 0x31
     802:	89 a9       	ldd	r24, Y+49	; 0x31
     804:	9a a9       	ldd	r25, Y+50	; 0x32
     806:	8c 01       	movw	r16, r24
     808:	f8 01       	movw	r30, r16
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <LCDByte+0x3d6>
     80e:	8f 01       	movw	r16, r30
     810:	1a ab       	std	Y+50, r17	; 0x32
     812:	09 ab       	std	Y+49, r16	; 0x31
     814:	10 c0       	rjmp	.+32     	; 0x836 <LCDByte+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     816:	68 a1       	ldd	r22, Y+32	; 0x20
     818:	79 a1       	ldd	r23, Y+33	; 0x21
     81a:	8a a1       	ldd	r24, Y+34	; 0x22
     81c:	9b a1       	ldd	r25, Y+35	; 0x23
     81e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	8c a3       	std	Y+36, r24	; 0x24
     828:	8c a1       	ldd	r24, Y+36	; 0x24
     82a:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     82c:	8b a9       	ldd	r24, Y+51	; 0x33
     82e:	18 2f       	mov	r17, r24
     830:	1a 95       	dec	r17
     832:	f1 f7       	brne	.-4      	; 0x830 <LCDByte+0x3fc>
     834:	1b ab       	std	Y+51, r17	; 0x33

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     836:	88 e3       	ldi	r24, 0x38	; 56
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	28 e3       	ldi	r18, 0x38	; 56
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	2f 7e       	andi	r18, 0xEF	; 239
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e8       	ldi	r26, 0x80	; 128
     84e:	bf e3       	ldi	r27, 0x3F	; 63
     850:	8c ab       	std	Y+52, r24	; 0x34
     852:	9d ab       	std	Y+53, r25	; 0x35
     854:	ae ab       	std	Y+54, r26	; 0x36
     856:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     858:	6c a9       	ldd	r22, Y+52	; 0x34
     85a:	7d a9       	ldd	r23, Y+53	; 0x35
     85c:	8e a9       	ldd	r24, Y+54	; 0x36
     85e:	9f a9       	ldd	r25, Y+55	; 0x37
     860:	2b ea       	ldi	r18, 0xAB	; 171
     862:	3a ea       	ldi	r19, 0xAA	; 170
     864:	4a ea       	ldi	r20, 0xAA	; 170
     866:	5e e3       	ldi	r21, 0x3E	; 62
     868:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	88 af       	std	Y+56, r24	; 0x38
     872:	99 af       	std	Y+57, r25	; 0x39
     874:	aa af       	std	Y+58, r26	; 0x3a
     876:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     878:	11 e0       	ldi	r17, 0x01	; 1
     87a:	68 ad       	ldd	r22, Y+56	; 0x38
     87c:	79 ad       	ldd	r23, Y+57	; 0x39
     87e:	8a ad       	ldd	r24, Y+58	; 0x3a
     880:	9b ad       	ldd	r25, Y+59	; 0x3b
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e8       	ldi	r20, 0x80	; 128
     888:	5f e3       	ldi	r21, 0x3F	; 63
     88a:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     88e:	88 23       	and	r24, r24
     890:	0c f0       	brlt	.+2      	; 0x894 <__stack+0x35>
     892:	10 e0       	ldi	r17, 0x00	; 0
     894:	11 23       	and	r17, r17
     896:	19 f0       	breq	.+6      	; 0x89e <__stack+0x3f>
		__ticks = 1;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	8c af       	std	Y+60, r24	; 0x3c
     89c:	f3 c0       	rjmp	.+486    	; 0xa84 <__stack+0x225>
	else if (__tmp > 255)
     89e:	11 e0       	ldi	r17, 0x01	; 1
     8a0:	68 ad       	ldd	r22, Y+56	; 0x38
     8a2:	79 ad       	ldd	r23, Y+57	; 0x39
     8a4:	8a ad       	ldd	r24, Y+58	; 0x3a
     8a6:	9b ad       	ldd	r25, Y+59	; 0x3b
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	4f e7       	ldi	r20, 0x7F	; 127
     8ae:	53 e4       	ldi	r21, 0x43	; 67
     8b0:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	0c f0       	brlt	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	10 e0       	ldi	r17, 0x00	; 0
     8ba:	11 23       	and	r17, r17
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__stack+0x61>
     8be:	d9 c0       	rjmp	.+434    	; 0xa72 <__stack+0x213>
	{
		_delay_ms(__us / 1000.0);
     8c0:	6c a9       	ldd	r22, Y+52	; 0x34
     8c2:	7d a9       	ldd	r23, Y+53	; 0x35
     8c4:	8e a9       	ldd	r24, Y+54	; 0x36
     8c6:	9f a9       	ldd	r25, Y+55	; 0x37
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	4a e7       	ldi	r20, 0x7A	; 122
     8ce:	54 e4       	ldi	r21, 0x44	; 68
     8d0:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	9e 01       	movw	r18, r28
     8da:	23 5c       	subi	r18, 0xC3	; 195
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	80 83       	st	Z, r24
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	a2 83       	std	Z+2, r26	; 0x02
     8e6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     8e8:	8e 01       	movw	r16, r28
     8ea:	0f 5b       	subi	r16, 0xBF	; 191
     8ec:	1f 4f       	sbci	r17, 0xFF	; 255
     8ee:	ce 01       	movw	r24, r28
     8f0:	cd 96       	adiw	r24, 0x3d	; 61
     8f2:	fc 01       	movw	r30, r24
     8f4:	60 81       	ld	r22, Z
     8f6:	71 81       	ldd	r23, Z+1	; 0x01
     8f8:	82 81       	ldd	r24, Z+2	; 0x02
     8fa:	93 81       	ldd	r25, Z+3	; 0x03
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	4a e7       	ldi	r20, 0x7A	; 122
     902:	53 e4       	ldi	r21, 0x43	; 67
     904:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	f8 01       	movw	r30, r16
     90e:	80 83       	st	Z, r24
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	a2 83       	std	Z+2, r26	; 0x02
     914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     916:	ce 01       	movw	r24, r28
     918:	8f 5b       	subi	r24, 0xBF	; 191
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	11 e0       	ldi	r17, 0x01	; 1
     91e:	fc 01       	movw	r30, r24
     920:	60 81       	ld	r22, Z
     922:	71 81       	ldd	r23, Z+1	; 0x01
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	93 81       	ldd	r25, Z+3	; 0x03
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e8       	ldi	r20, 0x80	; 128
     92e:	5f e3       	ldi	r21, 0x3F	; 63
     930:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     934:	88 23       	and	r24, r24
     936:	0c f0       	brlt	.+2      	; 0x93a <__stack+0xdb>
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	11 23       	and	r17, r17
     93c:	49 f0       	breq	.+18     	; 0x950 <__stack+0xf1>
		__ticks = 1;
     93e:	ce 01       	movw	r24, r28
     940:	8b 5b       	subi	r24, 0xBB	; 187
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	31 83       	std	Z+1, r19	; 0x01
     94c:	20 83       	st	Z, r18
     94e:	73 c0       	rjmp	.+230    	; 0xa36 <__stack+0x1d7>
	else if (__tmp > 65535)
     950:	ce 01       	movw	r24, r28
     952:	8f 5b       	subi	r24, 0xBF	; 191
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	11 e0       	ldi	r17, 0x01	; 1
     958:	fc 01       	movw	r30, r24
     95a:	60 81       	ld	r22, Z
     95c:	71 81       	ldd	r23, Z+1	; 0x01
     95e:	82 81       	ldd	r24, Z+2	; 0x02
     960:	93 81       	ldd	r25, Z+3	; 0x03
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	0c f0       	brlt	.+2      	; 0x974 <__stack+0x115>
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	11 23       	and	r17, r17
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x11b>
     978:	4c c0       	rjmp	.+152    	; 0xa12 <__stack+0x1b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     97a:	ce 01       	movw	r24, r28
     97c:	cd 96       	adiw	r24, 0x3d	; 61
     97e:	fc 01       	movw	r30, r24
     980:	60 81       	ld	r22, Z
     982:	71 81       	ldd	r23, Z+1	; 0x01
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e2       	ldi	r20, 0x20	; 32
     98e:	51 e4       	ldi	r21, 0x41	; 65
     990:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	8e 01       	movw	r16, r28
     99a:	0b 5b       	subi	r16, 0xBB	; 187
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	bc 01       	movw	r22, r24
     9a0:	cd 01       	movw	r24, r26
     9a2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	f8 01       	movw	r30, r16
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
     9b0:	27 c0       	rjmp	.+78     	; 0xa00 <__stack+0x1a1>
     9b2:	ce 01       	movw	r24, r28
     9b4:	89 5b       	subi	r24, 0xB9	; 185
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	29 e1       	ldi	r18, 0x19	; 25
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	fc 01       	movw	r30, r24
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9c2:	ce 01       	movw	r24, r28
     9c4:	89 5b       	subi	r24, 0xB9	; 185
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	8c 01       	movw	r16, r24
     9d0:	c8 01       	movw	r24, r16
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <__stack+0x173>
     9d6:	8c 01       	movw	r16, r24
     9d8:	ce 01       	movw	r24, r28
     9da:	89 5b       	subi	r24, 0xB9	; 185
     9dc:	9f 4f       	sbci	r25, 0xFF	; 255
     9de:	fc 01       	movw	r30, r24
     9e0:	11 83       	std	Z+1, r17	; 0x01
     9e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e4:	ce 01       	movw	r24, r28
     9e6:	8b 5b       	subi	r24, 0xBB	; 187
     9e8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ea:	9e 01       	movw	r18, r28
     9ec:	2b 5b       	subi	r18, 0xBB	; 187
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	31 81       	ldd	r19, Z+1	; 0x01
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	30 40       	sbci	r19, 0x00	; 0
     9fa:	fc 01       	movw	r30, r24
     9fc:	31 83       	std	Z+1, r19	; 0x01
     9fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a00:	ce 01       	movw	r24, r28
     a02:	8b 5b       	subi	r24, 0xBB	; 187
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	fc 01       	movw	r30, r24
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	89 f6       	brne	.-94     	; 0x9b2 <__stack+0x153>
     a10:	4c c0       	rjmp	.+152    	; 0xaaa <__stack+0x24b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a12:	8e 01       	movw	r16, r28
     a14:	0b 5b       	subi	r16, 0xBB	; 187
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	ce 01       	movw	r24, r28
     a1a:	8f 5b       	subi	r24, 0xBF	; 191
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	fc 01       	movw	r30, r24
     a20:	60 81       	ld	r22, Z
     a22:	71 81       	ldd	r23, Z+1	; 0x01
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	93 81       	ldd	r25, Z+3	; 0x03
     a28:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	f8 01       	movw	r30, r16
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	80 83       	st	Z, r24
     a36:	ce 01       	movw	r24, r28
     a38:	87 5b       	subi	r24, 0xB7	; 183
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	9e 01       	movw	r18, r28
     a3e:	2b 5b       	subi	r18, 0xBB	; 187
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	f9 01       	movw	r30, r18
     a44:	20 81       	ld	r18, Z
     a46:	31 81       	ldd	r19, Z+1	; 0x01
     a48:	fc 01       	movw	r30, r24
     a4a:	31 83       	std	Z+1, r19	; 0x01
     a4c:	20 83       	st	Z, r18
     a4e:	ce 01       	movw	r24, r28
     a50:	87 5b       	subi	r24, 0xB7	; 183
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	8c 01       	movw	r16, r24
     a5c:	c8 01       	movw	r24, r16
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <__stack+0x1ff>
     a62:	8c 01       	movw	r16, r24
     a64:	ce 01       	movw	r24, r28
     a66:	87 5b       	subi	r24, 0xB7	; 183
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	fc 01       	movw	r30, r24
     a6c:	11 83       	std	Z+1, r17	; 0x01
     a6e:	00 83       	st	Z, r16
     a70:	1c c0       	rjmp	.+56     	; 0xaaa <__stack+0x24b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a72:	68 ad       	ldd	r22, Y+56	; 0x38
     a74:	79 ad       	ldd	r23, Y+57	; 0x39
     a76:	8a ad       	ldd	r24, Y+58	; 0x3a
     a78:	9b ad       	ldd	r25, Y+59	; 0x3b
     a7a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	8c af       	std	Y+60, r24	; 0x3c
     a84:	ce 01       	movw	r24, r28
     a86:	85 5b       	subi	r24, 0xB5	; 181
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
     a8a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a90:	ce 01       	movw	r24, r28
     a92:	85 5b       	subi	r24, 0xB5	; 181
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	18 2f       	mov	r17, r24
     a9c:	1a 95       	dec	r17
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <__stack+0x23d>
     aa0:	ce 01       	movw	r24, r28
     aa2:	85 5b       	subi	r24, 0xB5	; 181
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	fc 01       	movw	r30, r24
     aa8:	10 83       	st	Z, r17

_delay_us(1);

//Send the lower nibble
SET_E();
     aaa:	88 e3       	ldi	r24, 0x38	; 56
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	28 e3       	ldi	r18, 0x38	; 56
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	20 61       	ori	r18, 0x10	; 16
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     abc:	88 e3       	ldi	r24, 0x38	; 56
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	98 2f       	mov	r25, r24
     ac6:	90 7f       	andi	r25, 0xF0	; 240
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	89 2b       	or	r24, r25
     acc:	8b 83       	std	Y+3, r24	; 0x03

LCD_DATA_PORT=temp;
     ace:	88 e3       	ldi	r24, 0x38	; 56
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2b 81       	ldd	r18, Y+3	; 0x03
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	9e 01       	movw	r18, r28
     ada:	24 5b       	subi	r18, 0xB4	; 180
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a0 e8       	ldi	r26, 0x80	; 128
     ae4:	bf e3       	ldi	r27, 0x3F	; 63
     ae6:	f9 01       	movw	r30, r18
     ae8:	80 83       	st	Z, r24
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	a2 83       	std	Z+2, r26	; 0x02
     aee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     af0:	8e 01       	movw	r16, r28
     af2:	00 5b       	subi	r16, 0xB0	; 176
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	ce 01       	movw	r24, r28
     af8:	84 5b       	subi	r24, 0xB4	; 180
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	fc 01       	movw	r30, r24
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	2b ea       	ldi	r18, 0xAB	; 171
     b08:	3a ea       	ldi	r19, 0xAA	; 170
     b0a:	4a ea       	ldi	r20, 0xAA	; 170
     b0c:	5e e3       	ldi	r21, 0x3E	; 62
     b0e:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	f8 01       	movw	r30, r16
     b18:	80 83       	st	Z, r24
     b1a:	91 83       	std	Z+1, r25	; 0x01
     b1c:	a2 83       	std	Z+2, r26	; 0x02
     b1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b20:	ce 01       	movw	r24, r28
     b22:	80 5b       	subi	r24, 0xB0	; 176
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	11 e0       	ldi	r17, 0x01	; 1
     b28:	fc 01       	movw	r30, r24
     b2a:	60 81       	ld	r22, Z
     b2c:	71 81       	ldd	r23, Z+1	; 0x01
     b2e:	82 81       	ldd	r24, Z+2	; 0x02
     b30:	93 81       	ldd	r25, Z+3	; 0x03
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e8       	ldi	r20, 0x80	; 128
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     b3e:	88 23       	and	r24, r24
     b40:	0c f0       	brlt	.+2      	; 0xb44 <__stack+0x2e5>
     b42:	10 e0       	ldi	r17, 0x00	; 0
     b44:	11 23       	and	r17, r17
     b46:	39 f0       	breq	.+14     	; 0xb56 <__stack+0x2f7>
		__ticks = 1;
     b48:	ce 01       	movw	r24, r28
     b4a:	8c 5a       	subi	r24, 0xAC	; 172
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	21 e0       	ldi	r18, 0x01	; 1
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	05 c1       	rjmp	.+522    	; 0xd60 <__stack+0x501>
	else if (__tmp > 255)
     b56:	ce 01       	movw	r24, r28
     b58:	80 5b       	subi	r24, 0xB0	; 176
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	11 e0       	ldi	r17, 0x01	; 1
     b5e:	fc 01       	movw	r30, r24
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	4f e7       	ldi	r20, 0x7F	; 127
     b6e:	53 e4       	ldi	r21, 0x43	; 67
     b70:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     b74:	18 16       	cp	r1, r24
     b76:	0c f0       	brlt	.+2      	; 0xb7a <__stack+0x31b>
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	11 23       	and	r17, r17
     b7c:	09 f4       	brne	.+2      	; 0xb80 <__stack+0x321>
     b7e:	df c0       	rjmp	.+446    	; 0xd3e <__stack+0x4df>
	{
		_delay_ms(__us / 1000.0);
     b80:	ce 01       	movw	r24, r28
     b82:	84 5b       	subi	r24, 0xB4	; 180
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	fc 01       	movw	r30, r24
     b88:	60 81       	ld	r22, Z
     b8a:	71 81       	ldd	r23, Z+1	; 0x01
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	93 81       	ldd	r25, Z+3	; 0x03
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a e7       	ldi	r20, 0x7A	; 122
     b96:	54 e4       	ldi	r21, 0x44	; 68
     b98:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	9e 01       	movw	r18, r28
     ba2:	2b 5a       	subi	r18, 0xAB	; 171
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	f9 01       	movw	r30, r18
     ba8:	80 83       	st	Z, r24
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	a2 83       	std	Z+2, r26	; 0x02
     bae:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	8e 01       	movw	r16, r28
     bb2:	07 5a       	subi	r16, 0xA7	; 167
     bb4:	1f 4f       	sbci	r17, 0xFF	; 255
     bb6:	ce 01       	movw	r24, r28
     bb8:	8b 5a       	subi	r24, 0xAB	; 171
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	fc 01       	movw	r30, r24
     bbe:	60 81       	ld	r22, Z
     bc0:	71 81       	ldd	r23, Z+1	; 0x01
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4a e7       	ldi	r20, 0x7A	; 122
     bcc:	53 e4       	ldi	r21, 0x43	; 67
     bce:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	f8 01       	movw	r30, r16
     bd8:	80 83       	st	Z, r24
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	a2 83       	std	Z+2, r26	; 0x02
     bde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     be0:	ce 01       	movw	r24, r28
     be2:	87 5a       	subi	r24, 0xA7	; 167
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	11 e0       	ldi	r17, 0x01	; 1
     be8:	fc 01       	movw	r30, r24
     bea:	60 81       	ld	r22, Z
     bec:	71 81       	ldd	r23, Z+1	; 0x01
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	93 81       	ldd	r25, Z+3	; 0x03
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e8       	ldi	r20, 0x80	; 128
     bf8:	5f e3       	ldi	r21, 0x3F	; 63
     bfa:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     bfe:	88 23       	and	r24, r24
     c00:	0c f0       	brlt	.+2      	; 0xc04 <__stack+0x3a5>
     c02:	10 e0       	ldi	r17, 0x00	; 0
     c04:	11 23       	and	r17, r17
     c06:	49 f0       	breq	.+18     	; 0xc1a <__stack+0x3bb>
		__ticks = 1;
     c08:	ce 01       	movw	r24, r28
     c0a:	83 5a       	subi	r24, 0xA3	; 163
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	31 83       	std	Z+1, r19	; 0x01
     c16:	20 83       	st	Z, r18
     c18:	74 c0       	rjmp	.+232    	; 0xd02 <__stack+0x4a3>
	else if (__tmp > 65535)
     c1a:	ce 01       	movw	r24, r28
     c1c:	87 5a       	subi	r24, 0xA7	; 167
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	11 e0       	ldi	r17, 0x01	; 1
     c22:	fc 01       	movw	r30, r24
     c24:	60 81       	ld	r22, Z
     c26:	71 81       	ldd	r23, Z+1	; 0x01
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	3f ef       	ldi	r19, 0xFF	; 255
     c30:	4f e7       	ldi	r20, 0x7F	; 127
     c32:	57 e4       	ldi	r21, 0x47	; 71
     c34:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     c38:	18 16       	cp	r1, r24
     c3a:	0c f0       	brlt	.+2      	; 0xc3e <__stack+0x3df>
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	11 23       	and	r17, r17
     c40:	09 f4       	brne	.+2      	; 0xc44 <__stack+0x3e5>
     c42:	4d c0       	rjmp	.+154    	; 0xcde <__stack+0x47f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c44:	ce 01       	movw	r24, r28
     c46:	8b 5a       	subi	r24, 0xAB	; 171
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	fc 01       	movw	r30, r24
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e2       	ldi	r20, 0x20	; 32
     c5a:	51 e4       	ldi	r21, 0x41	; 65
     c5c:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	8e 01       	movw	r16, r28
     c66:	03 5a       	subi	r16, 0xA3	; 163
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	f8 01       	movw	r30, r16
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
     c7c:	27 c0       	rjmp	.+78     	; 0xccc <__stack+0x46d>
     c7e:	ce 01       	movw	r24, r28
     c80:	81 5a       	subi	r24, 0xA1	; 161
     c82:	9f 4f       	sbci	r25, 0xFF	; 255
     c84:	29 e1       	ldi	r18, 0x19	; 25
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	31 83       	std	Z+1, r19	; 0x01
     c8c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8e:	ce 01       	movw	r24, r28
     c90:	81 5a       	subi	r24, 0xA1	; 161
     c92:	9f 4f       	sbci	r25, 0xFF	; 255
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	8c 01       	movw	r16, r24
     c9c:	c8 01       	movw	r24, r16
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <__stack+0x43f>
     ca2:	8c 01       	movw	r16, r24
     ca4:	ce 01       	movw	r24, r28
     ca6:	81 5a       	subi	r24, 0xA1	; 161
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	fc 01       	movw	r30, r24
     cac:	11 83       	std	Z+1, r17	; 0x01
     cae:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb0:	ce 01       	movw	r24, r28
     cb2:	83 5a       	subi	r24, 0xA3	; 163
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	9e 01       	movw	r18, r28
     cb8:	23 5a       	subi	r18, 0xA3	; 163
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	f9 01       	movw	r30, r18
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	30 40       	sbci	r19, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	31 83       	std	Z+1, r19	; 0x01
     cca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ccc:	ce 01       	movw	r24, r28
     cce:	83 5a       	subi	r24, 0xA3	; 163
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	89 f6       	brne	.-94     	; 0xc7e <__stack+0x41f>
     cdc:	58 c0       	rjmp	.+176    	; 0xd8e <__stack+0x52f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	8e 01       	movw	r16, r28
     ce0:	03 5a       	subi	r16, 0xA3	; 163
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	ce 01       	movw	r24, r28
     ce6:	87 5a       	subi	r24, 0xA7	; 167
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	fc 01       	movw	r30, r24
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	f8 01       	movw	r30, r16
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	80 83       	st	Z, r24
     d02:	ce 01       	movw	r24, r28
     d04:	8f 59       	subi	r24, 0x9F	; 159
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	9e 01       	movw	r18, r28
     d0a:	23 5a       	subi	r18, 0xA3	; 163
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	f9 01       	movw	r30, r18
     d10:	20 81       	ld	r18, Z
     d12:	31 81       	ldd	r19, Z+1	; 0x01
     d14:	fc 01       	movw	r30, r24
     d16:	31 83       	std	Z+1, r19	; 0x01
     d18:	20 83       	st	Z, r18
     d1a:	ce 01       	movw	r24, r28
     d1c:	8f 59       	subi	r24, 0x9F	; 159
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	8c 01       	movw	r16, r24
     d28:	c8 01       	movw	r24, r16
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <__stack+0x4cb>
     d2e:	8c 01       	movw	r16, r24
     d30:	ce 01       	movw	r24, r28
     d32:	8f 59       	subi	r24, 0x9F	; 159
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	fc 01       	movw	r30, r24
     d38:	11 83       	std	Z+1, r17	; 0x01
     d3a:	00 83       	st	Z, r16
     d3c:	28 c0       	rjmp	.+80     	; 0xd8e <__stack+0x52f>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d3e:	8e 01       	movw	r16, r28
     d40:	0c 5a       	subi	r16, 0xAC	; 172
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	ce 01       	movw	r24, r28
     d46:	80 5b       	subi	r24, 0xB0	; 176
     d48:	9f 4f       	sbci	r25, 0xFF	; 255
     d4a:	fc 01       	movw	r30, r24
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 83       	st	Z, r24
     d60:	ce 01       	movw	r24, r28
     d62:	8d 59       	subi	r24, 0x9D	; 157
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	9e 01       	movw	r18, r28
     d68:	2c 5a       	subi	r18, 0xAC	; 172
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	f9 01       	movw	r30, r18
     d6e:	20 81       	ld	r18, Z
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d74:	ce 01       	movw	r24, r28
     d76:	8d 59       	subi	r24, 0x9D	; 157
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	18 2f       	mov	r17, r24
     d80:	1a 95       	dec	r17
     d82:	f1 f7       	brne	.-4      	; 0xd80 <__stack+0x521>
     d84:	ce 01       	movw	r24, r28
     d86:	8d 59       	subi	r24, 0x9D	; 157
     d88:	9f 4f       	sbci	r25, 0xFF	; 255
     d8a:	fc 01       	movw	r30, r24
     d8c:	10 83       	st	Z, r17

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     d8e:	88 e3       	ldi	r24, 0x38	; 56
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	28 e3       	ldi	r18, 0x38	; 56
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	2f 7e       	andi	r18, 0xEF	; 239
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
     da0:	9e 01       	movw	r18, r28
     da2:	2c 59       	subi	r18, 0x9C	; 156
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e8       	ldi	r26, 0x80	; 128
     dac:	bf e3       	ldi	r27, 0x3F	; 63
     dae:	f9 01       	movw	r30, r18
     db0:	80 83       	st	Z, r24
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	a2 83       	std	Z+2, r26	; 0x02
     db6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     db8:	8e 01       	movw	r16, r28
     dba:	08 59       	subi	r16, 0x98	; 152
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	ce 01       	movw	r24, r28
     dc0:	8c 59       	subi	r24, 0x9C	; 156
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	fc 01       	movw	r30, r24
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	2b ea       	ldi	r18, 0xAB	; 171
     dd0:	3a ea       	ldi	r19, 0xAA	; 170
     dd2:	4a ea       	ldi	r20, 0xAA	; 170
     dd4:	5e e3       	ldi	r21, 0x3E	; 62
     dd6:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	f8 01       	movw	r30, r16
     de0:	80 83       	st	Z, r24
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	a2 83       	std	Z+2, r26	; 0x02
     de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     de8:	ce 01       	movw	r24, r28
     dea:	88 59       	subi	r24, 0x98	; 152
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	11 e0       	ldi	r17, 0x01	; 1
     df0:	fc 01       	movw	r30, r24
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     e06:	88 23       	and	r24, r24
     e08:	0c f0       	brlt	.+2      	; 0xe0c <__stack+0x5ad>
     e0a:	10 e0       	ldi	r17, 0x00	; 0
     e0c:	11 23       	and	r17, r17
     e0e:	39 f0       	breq	.+14     	; 0xe1e <__stack+0x5bf>
		__ticks = 1;
     e10:	ce 01       	movw	r24, r28
     e12:	84 59       	subi	r24, 0x94	; 148
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
     e1c:	05 c1       	rjmp	.+522    	; 0x1028 <__stack+0x7c9>
	else if (__tmp > 255)
     e1e:	ce 01       	movw	r24, r28
     e20:	88 59       	subi	r24, 0x98	; 152
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	11 e0       	ldi	r17, 0x01	; 1
     e26:	fc 01       	movw	r30, r24
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	53 e4       	ldi	r21, 0x43	; 67
     e38:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	0c f0       	brlt	.+2      	; 0xe42 <__stack+0x5e3>
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	11 23       	and	r17, r17
     e44:	09 f4       	brne	.+2      	; 0xe48 <__stack+0x5e9>
     e46:	df c0       	rjmp	.+446    	; 0x1006 <__stack+0x7a7>
	{
		_delay_ms(__us / 1000.0);
     e48:	ce 01       	movw	r24, r28
     e4a:	8c 59       	subi	r24, 0x9C	; 156
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	fc 01       	movw	r30, r24
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	4a e7       	ldi	r20, 0x7A	; 122
     e5e:	54 e4       	ldi	r21, 0x44	; 68
     e60:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 01       	movw	r18, r28
     e6a:	23 59       	subi	r18, 0x93	; 147
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	f9 01       	movw	r30, r18
     e70:	80 83       	st	Z, r24
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	a2 83       	std	Z+2, r26	; 0x02
     e76:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e78:	8e 01       	movw	r16, r28
     e7a:	0f 58       	subi	r16, 0x8F	; 143
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	ce 01       	movw	r24, r28
     e80:	83 59       	subi	r24, 0x93	; 147
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	fc 01       	movw	r30, r24
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a e7       	ldi	r20, 0x7A	; 122
     e94:	53 e4       	ldi	r21, 0x43	; 67
     e96:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	f8 01       	movw	r30, r16
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	a2 83       	std	Z+2, r26	; 0x02
     ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ea8:	ce 01       	movw	r24, r28
     eaa:	8f 58       	subi	r24, 0x8F	; 143
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	11 e0       	ldi	r17, 0x01	; 1
     eb0:	fc 01       	movw	r30, r24
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	0c f0       	brlt	.+2      	; 0xecc <__stack+0x66d>
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	11 23       	and	r17, r17
     ece:	49 f0       	breq	.+18     	; 0xee2 <__stack+0x683>
		__ticks = 1;
     ed0:	ce 01       	movw	r24, r28
     ed2:	8b 58       	subi	r24, 0x8B	; 139
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
     ee0:	74 c0       	rjmp	.+232    	; 0xfca <__stack+0x76b>
	else if (__tmp > 65535)
     ee2:	ce 01       	movw	r24, r28
     ee4:	8f 58       	subi	r24, 0x8F	; 143
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	11 e0       	ldi	r17, 0x01	; 1
     eea:	fc 01       	movw	r30, r24
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	4f e7       	ldi	r20, 0x7F	; 127
     efa:	57 e4       	ldi	r21, 0x47	; 71
     efc:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	0c f0       	brlt	.+2      	; 0xf06 <__stack+0x6a7>
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	11 23       	and	r17, r17
     f08:	09 f4       	brne	.+2      	; 0xf0c <__stack+0x6ad>
     f0a:	4d c0       	rjmp	.+154    	; 0xfa6 <__stack+0x747>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0c:	ce 01       	movw	r24, r28
     f0e:	83 59       	subi	r24, 0x93	; 147
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	fc 01       	movw	r30, r24
     f14:	60 81       	ld	r22, Z
     f16:	71 81       	ldd	r23, Z+1	; 0x01
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	93 81       	ldd	r25, Z+3	; 0x03
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e2       	ldi	r20, 0x20	; 32
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	8e 01       	movw	r16, r28
     f2e:	0b 58       	subi	r16, 0x8B	; 139
     f30:	1f 4f       	sbci	r17, 0xFF	; 255
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	f8 01       	movw	r30, r16
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <__stack+0x735>
     f46:	ce 01       	movw	r24, r28
     f48:	89 58       	subi	r24, 0x89	; 137
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	29 e1       	ldi	r18, 0x19	; 25
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	fc 01       	movw	r30, r24
     f52:	31 83       	std	Z+1, r19	; 0x01
     f54:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f56:	ce 01       	movw	r24, r28
     f58:	89 58       	subi	r24, 0x89	; 137
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	fc 01       	movw	r30, r24
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	8c 01       	movw	r16, r24
     f64:	c8 01       	movw	r24, r16
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <__stack+0x707>
     f6a:	8c 01       	movw	r16, r24
     f6c:	ce 01       	movw	r24, r28
     f6e:	89 58       	subi	r24, 0x89	; 137
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	fc 01       	movw	r30, r24
     f74:	11 83       	std	Z+1, r17	; 0x01
     f76:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	ce 01       	movw	r24, r28
     f7a:	8b 58       	subi	r24, 0x8B	; 139
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	9e 01       	movw	r18, r28
     f80:	2b 58       	subi	r18, 0x8B	; 139
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	f9 01       	movw	r30, r18
     f86:	20 81       	ld	r18, Z
     f88:	31 81       	ldd	r19, Z+1	; 0x01
     f8a:	21 50       	subi	r18, 0x01	; 1
     f8c:	30 40       	sbci	r19, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	31 83       	std	Z+1, r19	; 0x01
     f92:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	ce 01       	movw	r24, r28
     f96:	8b 58       	subi	r24, 0x8B	; 139
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	89 f6       	brne	.-94     	; 0xf46 <__stack+0x6e7>
     fa4:	58 c0       	rjmp	.+176    	; 0x1056 <__stack+0x7f7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	8e 01       	movw	r16, r28
     fa8:	0b 58       	subi	r16, 0x8B	; 139
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	ce 01       	movw	r24, r28
     fae:	8f 58       	subi	r24, 0x8F	; 143
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	fc 01       	movw	r30, r24
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	f8 01       	movw	r30, r16
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
     fca:	ce 01       	movw	r24, r28
     fcc:	87 58       	subi	r24, 0x87	; 135
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	9e 01       	movw	r18, r28
     fd2:	2b 58       	subi	r18, 0x8B	; 139
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	31 81       	ldd	r19, Z+1	; 0x01
     fdc:	fc 01       	movw	r30, r24
     fde:	31 83       	std	Z+1, r19	; 0x01
     fe0:	20 83       	st	Z, r18
     fe2:	ce 01       	movw	r24, r28
     fe4:	87 58       	subi	r24, 0x87	; 135
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	8c 01       	movw	r16, r24
     ff0:	c8 01       	movw	r24, r16
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <__stack+0x793>
     ff6:	8c 01       	movw	r16, r24
     ff8:	ce 01       	movw	r24, r28
     ffa:	87 58       	subi	r24, 0x87	; 135
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	fc 01       	movw	r30, r24
    1000:	11 83       	std	Z+1, r17	; 0x01
    1002:	00 83       	st	Z, r16
    1004:	28 c0       	rjmp	.+80     	; 0x1056 <__stack+0x7f7>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1006:	8e 01       	movw	r16, r28
    1008:	04 59       	subi	r16, 0x94	; 148
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	ce 01       	movw	r24, r28
    100e:	88 59       	subi	r24, 0x98	; 152
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	fc 01       	movw	r30, r24
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	f8 01       	movw	r30, r16
    1026:	80 83       	st	Z, r24
    1028:	ce 01       	movw	r24, r28
    102a:	85 58       	subi	r24, 0x85	; 133
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	9e 01       	movw	r18, r28
    1030:	24 59       	subi	r18, 0x94	; 148
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    103c:	ce 01       	movw	r24, r28
    103e:	85 58       	subi	r24, 0x85	; 133
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	18 2f       	mov	r17, r24
    1048:	1a 95       	dec	r17
    104a:	f1 f7       	brne	.-4      	; 0x1048 <__stack+0x7e9>
    104c:	ce 01       	movw	r24, r28
    104e:	85 58       	subi	r24, 0x85	; 133
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	fc 01       	movw	r30, r24
    1054:	10 83       	st	Z, r17

_delay_us(1);			//tEL

LCDBusyLoop();
    1056:	0e 94 39 08 	call	0x1072	; 0x1072 <LCDBusyLoop>
}
    105a:	c3 58       	subi	r28, 0x83	; 131
    105c:	df 4f       	sbci	r29, 0xFF	; 255
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <LCDBusyLoop>:

void LCDBusyLoop()
{
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	cb 5a       	subi	r28, 0xAB	; 171
    1080:	d0 40       	sbci	r29, 0x00	; 0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    108c:	19 82       	std	Y+1, r1	; 0x01

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
    108e:	87 e3       	ldi	r24, 0x37	; 55
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	27 e3       	ldi	r18, 0x37	; 55
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	20 81       	ld	r18, Z
    109a:	20 7f       	andi	r18, 0xF0	; 240
    109c:	fc 01       	movw	r30, r24
    109e:	20 83       	st	Z, r18

	//change LCD mode
	SET_RW();		//Read mode
    10a0:	82 e3       	ldi	r24, 0x32	; 50
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	22 e3       	ldi	r18, 0x32	; 50
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	f9 01       	movw	r30, r18
    10aa:	20 81       	ld	r18, Z
    10ac:	20 64       	ori	r18, 0x40	; 64
    10ae:	fc 01       	movw	r30, r24
    10b0:	20 83       	st	Z, r18
	CLEAR_RS();		//Read status
    10b2:	82 e3       	ldi	r24, 0x32	; 50
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	22 e3       	ldi	r18, 0x32	; 50
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	f9 01       	movw	r30, r18
    10bc:	20 81       	ld	r18, Z
    10be:	27 7f       	andi	r18, 0xF7	; 247
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	bf e3       	ldi	r27, 0x3F	; 63
    10cc:	8c 83       	std	Y+4, r24	; 0x04
    10ce:	9d 83       	std	Y+5, r25	; 0x05
    10d0:	ae 83       	std	Y+6, r26	; 0x06
    10d2:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    10d4:	6c 81       	ldd	r22, Y+4	; 0x04
    10d6:	7d 81       	ldd	r23, Y+5	; 0x05
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	9f 81       	ldd	r25, Y+7	; 0x07
    10dc:	2b ea       	ldi	r18, 0xAB	; 171
    10de:	3a ea       	ldi	r19, 0xAA	; 170
    10e0:	4a ea       	ldi	r20, 0xAA	; 170
    10e2:	5e e3       	ldi	r21, 0x3E	; 62
    10e4:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	88 87       	std	Y+8, r24	; 0x08
    10ee:	99 87       	std	Y+9, r25	; 0x09
    10f0:	aa 87       	std	Y+10, r26	; 0x0a
    10f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10f4:	11 e0       	ldi	r17, 0x01	; 1
    10f6:	68 85       	ldd	r22, Y+8	; 0x08
    10f8:	79 85       	ldd	r23, Y+9	; 0x09
    10fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    10fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	0c f0       	brlt	.+2      	; 0x1110 <LCDBusyLoop+0x9e>
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	11 23       	and	r17, r17
    1112:	19 f0       	breq	.+6      	; 0x111a <LCDBusyLoop+0xa8>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	8c 87       	std	Y+12, r24	; 0x0c
    1118:	a3 c0       	rjmp	.+326    	; 0x1260 <LCDBusyLoop+0x1ee>
	else if (__tmp > 255)
    111a:	11 e0       	ldi	r17, 0x01	; 1
    111c:	68 85       	ldd	r22, Y+8	; 0x08
    111e:	79 85       	ldd	r23, Y+9	; 0x09
    1120:	8a 85       	ldd	r24, Y+10	; 0x0a
    1122:	9b 85       	ldd	r25, Y+11	; 0x0b
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4f e7       	ldi	r20, 0x7F	; 127
    112a:	53 e4       	ldi	r21, 0x43	; 67
    112c:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1130:	18 16       	cp	r1, r24
    1132:	0c f0       	brlt	.+2      	; 0x1136 <LCDBusyLoop+0xc4>
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	11 23       	and	r17, r17
    1138:	09 f4       	brne	.+2      	; 0x113c <LCDBusyLoop+0xca>
    113a:	89 c0       	rjmp	.+274    	; 0x124e <LCDBusyLoop+0x1dc>
	{
		_delay_ms(__us / 1000.0);
    113c:	6c 81       	ldd	r22, Y+4	; 0x04
    113e:	7d 81       	ldd	r23, Y+5	; 0x05
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	9f 81       	ldd	r25, Y+7	; 0x07
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a e7       	ldi	r20, 0x7A	; 122
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8d 87       	std	Y+13, r24	; 0x0d
    1156:	9e 87       	std	Y+14, r25	; 0x0e
    1158:	af 87       	std	Y+15, r26	; 0x0f
    115a:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    115c:	6d 85       	ldd	r22, Y+13	; 0x0d
    115e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1160:	8f 85       	ldd	r24, Y+15	; 0x0f
    1162:	98 89       	ldd	r25, Y+16	; 0x10
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a e7       	ldi	r20, 0x7A	; 122
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	89 8b       	std	Y+17, r24	; 0x11
    1176:	9a 8b       	std	Y+18, r25	; 0x12
    1178:	ab 8b       	std	Y+19, r26	; 0x13
    117a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    117c:	11 e0       	ldi	r17, 0x01	; 1
    117e:	69 89       	ldd	r22, Y+17	; 0x11
    1180:	7a 89       	ldd	r23, Y+18	; 0x12
    1182:	8b 89       	ldd	r24, Y+19	; 0x13
    1184:	9c 89       	ldd	r25, Y+20	; 0x14
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	5f e3       	ldi	r21, 0x3F	; 63
    118e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1192:	88 23       	and	r24, r24
    1194:	0c f0       	brlt	.+2      	; 0x1198 <LCDBusyLoop+0x126>
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	11 23       	and	r17, r17
    119a:	29 f0       	breq	.+10     	; 0x11a6 <LCDBusyLoop+0x134>
		__ticks = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9e 8b       	std	Y+22, r25	; 0x16
    11a2:	8d 8b       	std	Y+21, r24	; 0x15
    11a4:	46 c0       	rjmp	.+140    	; 0x1232 <LCDBusyLoop+0x1c0>
	else if (__tmp > 65535)
    11a6:	11 e0       	ldi	r17, 0x01	; 1
    11a8:	69 89       	ldd	r22, Y+17	; 0x11
    11aa:	7a 89       	ldd	r23, Y+18	; 0x12
    11ac:	8b 89       	ldd	r24, Y+19	; 0x13
    11ae:	9c 89       	ldd	r25, Y+20	; 0x14
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	3f ef       	ldi	r19, 0xFF	; 255
    11b4:	4f e7       	ldi	r20, 0x7F	; 127
    11b6:	57 e4       	ldi	r21, 0x47	; 71
    11b8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	0c f0       	brlt	.+2      	; 0x11c2 <LCDBusyLoop+0x150>
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	11 23       	and	r17, r17
    11c4:	61 f1       	breq	.+88     	; 0x121e <LCDBusyLoop+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c6:	6d 85       	ldd	r22, Y+13	; 0x0d
    11c8:	7e 85       	ldd	r23, Y+14	; 0x0e
    11ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    11cc:	98 89       	ldd	r25, Y+16	; 0x10
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e2       	ldi	r20, 0x20	; 32
    11d4:	51 e4       	ldi	r21, 0x41	; 65
    11d6:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9e 8b       	std	Y+22, r25	; 0x16
    11ec:	8d 8b       	std	Y+21, r24	; 0x15
    11ee:	12 c0       	rjmp	.+36     	; 0x1214 <LCDBusyLoop+0x1a2>
    11f0:	89 e1       	ldi	r24, 0x19	; 25
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	98 8f       	std	Y+24, r25	; 0x18
    11f6:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11f8:	8f 89       	ldd	r24, Y+23	; 0x17
    11fa:	98 8d       	ldd	r25, Y+24	; 0x18
    11fc:	8c 01       	movw	r16, r24
    11fe:	c8 01       	movw	r24, r16
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <LCDBusyLoop+0x18e>
    1204:	8c 01       	movw	r16, r24
    1206:	18 8f       	std	Y+24, r17	; 0x18
    1208:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120a:	8d 89       	ldd	r24, Y+21	; 0x15
    120c:	9e 89       	ldd	r25, Y+22	; 0x16
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	9e 8b       	std	Y+22, r25	; 0x16
    1212:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1214:	8d 89       	ldd	r24, Y+21	; 0x15
    1216:	9e 89       	ldd	r25, Y+22	; 0x16
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	51 f7       	brne	.-44     	; 0x11f0 <LCDBusyLoop+0x17e>
    121c:	28 c0       	rjmp	.+80     	; 0x126e <LCDBusyLoop+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	69 89       	ldd	r22, Y+17	; 0x11
    1220:	7a 89       	ldd	r23, Y+18	; 0x12
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	9c 89       	ldd	r25, Y+20	; 0x14
    1226:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9e 8b       	std	Y+22, r25	; 0x16
    1230:	8d 8b       	std	Y+21, r24	; 0x15
    1232:	8d 89       	ldd	r24, Y+21	; 0x15
    1234:	9e 89       	ldd	r25, Y+22	; 0x16
    1236:	9a 8f       	std	Y+26, r25	; 0x1a
    1238:	89 8f       	std	Y+25, r24	; 0x19
    123a:	89 8d       	ldd	r24, Y+25	; 0x19
    123c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    123e:	8c 01       	movw	r16, r24
    1240:	f8 01       	movw	r30, r16
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCDBusyLoop+0x1d0>
    1246:	8f 01       	movw	r16, r30
    1248:	1a 8f       	std	Y+26, r17	; 0x1a
    124a:	09 8f       	std	Y+25, r16	; 0x19
    124c:	10 c0       	rjmp	.+32     	; 0x126e <LCDBusyLoop+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    124e:	68 85       	ldd	r22, Y+8	; 0x08
    1250:	79 85       	ldd	r23, Y+9	; 0x09
    1252:	8a 85       	ldd	r24, Y+10	; 0x0a
    1254:	9b 85       	ldd	r25, Y+11	; 0x0b
    1256:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8c 87       	std	Y+12, r24	; 0x0c
    1260:	8c 85       	ldd	r24, Y+12	; 0x0c
    1262:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1266:	18 2f       	mov	r17, r24
    1268:	1a 95       	dec	r17
    126a:	f1 f7       	brne	.-4      	; 0x1268 <LCDBusyLoop+0x1f6>
    126c:	1b 8f       	std	Y+27, r17	; 0x1b

	
	do
	{

		SET_E();
    126e:	88 e3       	ldi	r24, 0x38	; 56
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	28 e3       	ldi	r18, 0x38	; 56
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	f9 01       	movw	r30, r18
    1278:	20 81       	ld	r18, Z
    127a:	20 61       	ori	r18, 0x10	; 16
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	bf e3       	ldi	r27, 0x3F	; 63
    1288:	8c 8f       	std	Y+28, r24	; 0x1c
    128a:	9d 8f       	std	Y+29, r25	; 0x1d
    128c:	ae 8f       	std	Y+30, r26	; 0x1e
    128e:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1290:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1292:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1294:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1296:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1298:	2b ea       	ldi	r18, 0xAB	; 171
    129a:	3a ea       	ldi	r19, 0xAA	; 170
    129c:	4a ea       	ldi	r20, 0xAA	; 170
    129e:	5e e3       	ldi	r21, 0x3E	; 62
    12a0:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	88 a3       	std	Y+32, r24	; 0x20
    12aa:	99 a3       	std	Y+33, r25	; 0x21
    12ac:	aa a3       	std	Y+34, r26	; 0x22
    12ae:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    12b0:	11 e0       	ldi	r17, 0x01	; 1
    12b2:	68 a1       	ldd	r22, Y+32	; 0x20
    12b4:	79 a1       	ldd	r23, Y+33	; 0x21
    12b6:	8a a1       	ldd	r24, Y+34	; 0x22
    12b8:	9b a1       	ldd	r25, Y+35	; 0x23
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	0c f0       	brlt	.+2      	; 0x12cc <LCDBusyLoop+0x25a>
    12ca:	10 e0       	ldi	r17, 0x00	; 0
    12cc:	11 23       	and	r17, r17
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <LCDBusyLoop+0x264>
		__ticks = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	8c a3       	std	Y+36, r24	; 0x24
    12d4:	a3 c0       	rjmp	.+326    	; 0x141c <LCDBusyLoop+0x3aa>
	else if (__tmp > 255)
    12d6:	11 e0       	ldi	r17, 0x01	; 1
    12d8:	68 a1       	ldd	r22, Y+32	; 0x20
    12da:	79 a1       	ldd	r23, Y+33	; 0x21
    12dc:	8a a1       	ldd	r24, Y+34	; 0x22
    12de:	9b a1       	ldd	r25, Y+35	; 0x23
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	53 e4       	ldi	r21, 0x43	; 67
    12e8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <LCDBusyLoop+0x280>
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	11 23       	and	r17, r17
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <LCDBusyLoop+0x286>
    12f6:	89 c0       	rjmp	.+274    	; 0x140a <LCDBusyLoop+0x398>
	{
		_delay_ms(__us / 1000.0);
    12f8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    12fa:	7d 8d       	ldd	r23, Y+29	; 0x1d
    12fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a e7       	ldi	r20, 0x7A	; 122
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8d a3       	std	Y+37, r24	; 0x25
    1312:	9e a3       	std	Y+38, r25	; 0x26
    1314:	af a3       	std	Y+39, r26	; 0x27
    1316:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1318:	6d a1       	ldd	r22, Y+37	; 0x25
    131a:	7e a1       	ldd	r23, Y+38	; 0x26
    131c:	8f a1       	ldd	r24, Y+39	; 0x27
    131e:	98 a5       	ldd	r25, Y+40	; 0x28
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a e7       	ldi	r20, 0x7A	; 122
    1326:	53 e4       	ldi	r21, 0x43	; 67
    1328:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	89 a7       	std	Y+41, r24	; 0x29
    1332:	9a a7       	std	Y+42, r25	; 0x2a
    1334:	ab a7       	std	Y+43, r26	; 0x2b
    1336:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1338:	11 e0       	ldi	r17, 0x01	; 1
    133a:	69 a5       	ldd	r22, Y+41	; 0x29
    133c:	7a a5       	ldd	r23, Y+42	; 0x2a
    133e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1340:	9c a5       	ldd	r25, Y+44	; 0x2c
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	0c f0       	brlt	.+2      	; 0x1354 <LCDBusyLoop+0x2e2>
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	11 23       	and	r17, r17
    1356:	29 f0       	breq	.+10     	; 0x1362 <LCDBusyLoop+0x2f0>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9e a7       	std	Y+46, r25	; 0x2e
    135e:	8d a7       	std	Y+45, r24	; 0x2d
    1360:	46 c0       	rjmp	.+140    	; 0x13ee <LCDBusyLoop+0x37c>
	else if (__tmp > 65535)
    1362:	11 e0       	ldi	r17, 0x01	; 1
    1364:	69 a5       	ldd	r22, Y+41	; 0x29
    1366:	7a a5       	ldd	r23, Y+42	; 0x2a
    1368:	8b a5       	ldd	r24, Y+43	; 0x2b
    136a:	9c a5       	ldd	r25, Y+44	; 0x2c
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	0c f0       	brlt	.+2      	; 0x137e <LCDBusyLoop+0x30c>
    137c:	10 e0       	ldi	r17, 0x00	; 0
    137e:	11 23       	and	r17, r17
    1380:	61 f1       	breq	.+88     	; 0x13da <LCDBusyLoop+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	6d a1       	ldd	r22, Y+37	; 0x25
    1384:	7e a1       	ldd	r23, Y+38	; 0x26
    1386:	8f a1       	ldd	r24, Y+39	; 0x27
    1388:	98 a5       	ldd	r25, Y+40	; 0x28
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9e a7       	std	Y+46, r25	; 0x2e
    13a8:	8d a7       	std	Y+45, r24	; 0x2d
    13aa:	12 c0       	rjmp	.+36     	; 0x13d0 <LCDBusyLoop+0x35e>
    13ac:	89 e1       	ldi	r24, 0x19	; 25
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	98 ab       	std	Y+48, r25	; 0x30
    13b2:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b6:	98 a9       	ldd	r25, Y+48	; 0x30
    13b8:	8c 01       	movw	r16, r24
    13ba:	c8 01       	movw	r24, r16
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <LCDBusyLoop+0x34a>
    13c0:	8c 01       	movw	r16, r24
    13c2:	18 ab       	std	Y+48, r17	; 0x30
    13c4:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9e a7       	std	Y+46, r25	; 0x2e
    13ce:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    13d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	51 f7       	brne	.-44     	; 0x13ac <LCDBusyLoop+0x33a>
    13d8:	28 c0       	rjmp	.+80     	; 0x142a <LCDBusyLoop+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	69 a5       	ldd	r22, Y+41	; 0x29
    13dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    13de:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e a7       	std	Y+46, r25	; 0x2e
    13ec:	8d a7       	std	Y+45, r24	; 0x2d
    13ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f2:	9a ab       	std	Y+50, r25	; 0x32
    13f4:	89 ab       	std	Y+49, r24	; 0x31
    13f6:	89 a9       	ldd	r24, Y+49	; 0x31
    13f8:	9a a9       	ldd	r25, Y+50	; 0x32
    13fa:	8c 01       	movw	r16, r24
    13fc:	f8 01       	movw	r30, r16
    13fe:	31 97       	sbiw	r30, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <LCDBusyLoop+0x38c>
    1402:	8f 01       	movw	r16, r30
    1404:	1a ab       	std	Y+50, r17	; 0x32
    1406:	09 ab       	std	Y+49, r16	; 0x31
    1408:	10 c0       	rjmp	.+32     	; 0x142a <LCDBusyLoop+0x3b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    140a:	68 a1       	ldd	r22, Y+32	; 0x20
    140c:	79 a1       	ldd	r23, Y+33	; 0x21
    140e:	8a a1       	ldd	r24, Y+34	; 0x22
    1410:	9b a1       	ldd	r25, Y+35	; 0x23
    1412:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8c a3       	std	Y+36, r24	; 0x24
    141c:	8c a1       	ldd	r24, Y+36	; 0x24
    141e:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1420:	8b a9       	ldd	r24, Y+51	; 0x33
    1422:	18 2f       	mov	r17, r24
    1424:	1a 95       	dec	r17
    1426:	f1 f7       	brne	.-4      	; 0x1424 <LCDBusyLoop+0x3b2>
    1428:	1b ab       	std	Y+51, r17	; 0x33

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    142a:	86 e3       	ldi	r24, 0x36	; 54
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	89 83       	std	Y+1, r24	; 0x01
		status=status<<4;
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	82 95       	swap	r24
    1438:	80 7f       	andi	r24, 0xF0	; 240
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	bf e3       	ldi	r27, 0x3F	; 63
    1444:	8c ab       	std	Y+52, r24	; 0x34
    1446:	9d ab       	std	Y+53, r25	; 0x35
    1448:	ae ab       	std	Y+54, r26	; 0x36
    144a:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    144c:	6c a9       	ldd	r22, Y+52	; 0x34
    144e:	7d a9       	ldd	r23, Y+53	; 0x35
    1450:	8e a9       	ldd	r24, Y+54	; 0x36
    1452:	9f a9       	ldd	r25, Y+55	; 0x37
    1454:	2b ea       	ldi	r18, 0xAB	; 171
    1456:	3a ea       	ldi	r19, 0xAA	; 170
    1458:	4a ea       	ldi	r20, 0xAA	; 170
    145a:	5e e3       	ldi	r21, 0x3E	; 62
    145c:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	88 af       	std	Y+56, r24	; 0x38
    1466:	99 af       	std	Y+57, r25	; 0x39
    1468:	aa af       	std	Y+58, r26	; 0x3a
    146a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    146c:	11 e0       	ldi	r17, 0x01	; 1
    146e:	68 ad       	ldd	r22, Y+56	; 0x38
    1470:	79 ad       	ldd	r23, Y+57	; 0x39
    1472:	8a ad       	ldd	r24, Y+58	; 0x3a
    1474:	9b ad       	ldd	r25, Y+59	; 0x3b
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e8       	ldi	r20, 0x80	; 128
    147c:	5f e3       	ldi	r21, 0x3F	; 63
    147e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1482:	88 23       	and	r24, r24
    1484:	0c f0       	brlt	.+2      	; 0x1488 <LCDBusyLoop+0x416>
    1486:	10 e0       	ldi	r17, 0x00	; 0
    1488:	11 23       	and	r17, r17
    148a:	19 f0       	breq	.+6      	; 0x1492 <LCDBusyLoop+0x420>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	8c af       	std	Y+60, r24	; 0x3c
    1490:	f3 c0       	rjmp	.+486    	; 0x1678 <LCDBusyLoop+0x606>
	else if (__tmp > 255)
    1492:	11 e0       	ldi	r17, 0x01	; 1
    1494:	68 ad       	ldd	r22, Y+56	; 0x38
    1496:	79 ad       	ldd	r23, Y+57	; 0x39
    1498:	8a ad       	ldd	r24, Y+58	; 0x3a
    149a:	9b ad       	ldd	r25, Y+59	; 0x3b
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	53 e4       	ldi	r21, 0x43	; 67
    14a4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <LCDBusyLoop+0x43c>
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	11 23       	and	r17, r17
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <LCDBusyLoop+0x442>
    14b2:	d9 c0       	rjmp	.+434    	; 0x1666 <LCDBusyLoop+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    14b4:	6c a9       	ldd	r22, Y+52	; 0x34
    14b6:	7d a9       	ldd	r23, Y+53	; 0x35
    14b8:	8e a9       	ldd	r24, Y+54	; 0x36
    14ba:	9f a9       	ldd	r25, Y+55	; 0x37
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9e 01       	movw	r18, r28
    14ce:	23 5c       	subi	r18, 0xC3	; 195
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	f9 01       	movw	r30, r18
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	8e 01       	movw	r16, r28
    14de:	0f 5b       	subi	r16, 0xBF	; 191
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	ce 01       	movw	r24, r28
    14e4:	cd 96       	adiw	r24, 0x3d	; 61
    14e6:	fc 01       	movw	r30, r24
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a e7       	ldi	r20, 0x7A	; 122
    14f6:	53 e4       	ldi	r21, 0x43	; 67
    14f8:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150a:	ce 01       	movw	r24, r28
    150c:	8f 5b       	subi	r24, 0xBF	; 191
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	11 e0       	ldi	r17, 0x01	; 1
    1512:	fc 01       	movw	r30, r24
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1528:	88 23       	and	r24, r24
    152a:	0c f0       	brlt	.+2      	; 0x152e <LCDBusyLoop+0x4bc>
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	11 23       	and	r17, r17
    1530:	49 f0       	breq	.+18     	; 0x1544 <LCDBusyLoop+0x4d2>
		__ticks = 1;
    1532:	ce 01       	movw	r24, r28
    1534:	8b 5b       	subi	r24, 0xBB	; 187
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	21 e0       	ldi	r18, 0x01	; 1
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	fc 01       	movw	r30, r24
    153e:	31 83       	std	Z+1, r19	; 0x01
    1540:	20 83       	st	Z, r18
    1542:	73 c0       	rjmp	.+230    	; 0x162a <LCDBusyLoop+0x5b8>
	else if (__tmp > 65535)
    1544:	ce 01       	movw	r24, r28
    1546:	8f 5b       	subi	r24, 0xBF	; 191
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	11 e0       	ldi	r17, 0x01	; 1
    154c:	fc 01       	movw	r30, r24
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	0c f0       	brlt	.+2      	; 0x1568 <LCDBusyLoop+0x4f6>
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	11 23       	and	r17, r17
    156a:	09 f4       	brne	.+2      	; 0x156e <LCDBusyLoop+0x4fc>
    156c:	4c c0       	rjmp	.+152    	; 0x1606 <LCDBusyLoop+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156e:	ce 01       	movw	r24, r28
    1570:	cd 96       	adiw	r24, 0x3d	; 61
    1572:	fc 01       	movw	r30, r24
    1574:	60 81       	ld	r22, Z
    1576:	71 81       	ldd	r23, Z+1	; 0x01
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	93 81       	ldd	r25, Z+3	; 0x03
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8e 01       	movw	r16, r28
    158e:	0b 5b       	subi	r16, 0xBB	; 187
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	f8 01       	movw	r30, r16
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <LCDBusyLoop+0x582>
    15a6:	ce 01       	movw	r24, r28
    15a8:	89 5b       	subi	r24, 0xB9	; 185
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	29 e1       	ldi	r18, 0x19	; 25
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	fc 01       	movw	r30, r24
    15b2:	31 83       	std	Z+1, r19	; 0x01
    15b4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b6:	ce 01       	movw	r24, r28
    15b8:	89 5b       	subi	r24, 0xB9	; 185
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	8c 01       	movw	r16, r24
    15c4:	c8 01       	movw	r24, r16
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCDBusyLoop+0x554>
    15ca:	8c 01       	movw	r16, r24
    15cc:	ce 01       	movw	r24, r28
    15ce:	89 5b       	subi	r24, 0xB9	; 185
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	fc 01       	movw	r30, r24
    15d4:	11 83       	std	Z+1, r17	; 0x01
    15d6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	ce 01       	movw	r24, r28
    15da:	8b 5b       	subi	r24, 0xBB	; 187
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	9e 01       	movw	r18, r28
    15e0:	2b 5b       	subi	r18, 0xBB	; 187
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	f9 01       	movw	r30, r18
    15e6:	20 81       	ld	r18, Z
    15e8:	31 81       	ldd	r19, Z+1	; 0x01
    15ea:	21 50       	subi	r18, 0x01	; 1
    15ec:	30 40       	sbci	r19, 0x00	; 0
    15ee:	fc 01       	movw	r30, r24
    15f0:	31 83       	std	Z+1, r19	; 0x01
    15f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f4:	ce 01       	movw	r24, r28
    15f6:	8b 5b       	subi	r24, 0xBB	; 187
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	89 f6       	brne	.-94     	; 0x15a6 <LCDBusyLoop+0x534>
    1604:	4c c0       	rjmp	.+152    	; 0x169e <LCDBusyLoop+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	8e 01       	movw	r16, r28
    1608:	0b 5b       	subi	r16, 0xBB	; 187
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	ce 01       	movw	r24, r28
    160e:	8f 5b       	subi	r24, 0xBF	; 191
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	fc 01       	movw	r30, r24
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	f8 01       	movw	r30, r16
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
    162a:	ce 01       	movw	r24, r28
    162c:	87 5b       	subi	r24, 0xB7	; 183
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	9e 01       	movw	r18, r28
    1632:	2b 5b       	subi	r18, 0xBB	; 187
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	f9 01       	movw	r30, r18
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	fc 01       	movw	r30, r24
    163e:	31 83       	std	Z+1, r19	; 0x01
    1640:	20 83       	st	Z, r18
    1642:	ce 01       	movw	r24, r28
    1644:	87 5b       	subi	r24, 0xB7	; 183
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	8c 01       	movw	r16, r24
    1650:	c8 01       	movw	r24, r16
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LCDBusyLoop+0x5e0>
    1656:	8c 01       	movw	r16, r24
    1658:	ce 01       	movw	r24, r28
    165a:	87 5b       	subi	r24, 0xB7	; 183
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	fc 01       	movw	r30, r24
    1660:	11 83       	std	Z+1, r17	; 0x01
    1662:	00 83       	st	Z, r16
    1664:	1c c0       	rjmp	.+56     	; 0x169e <LCDBusyLoop+0x62c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1666:	68 ad       	ldd	r22, Y+56	; 0x38
    1668:	79 ad       	ldd	r23, Y+57	; 0x39
    166a:	8a ad       	ldd	r24, Y+58	; 0x3a
    166c:	9b ad       	ldd	r25, Y+59	; 0x3b
    166e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8c af       	std	Y+60, r24	; 0x3c
    1678:	ce 01       	movw	r24, r28
    167a:	85 5b       	subi	r24, 0xB5	; 181
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1684:	ce 01       	movw	r24, r28
    1686:	85 5b       	subi	r24, 0xB5	; 181
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	fc 01       	movw	r30, r24
    168c:	80 81       	ld	r24, Z
    168e:	18 2f       	mov	r17, r24
    1690:	1a 95       	dec	r17
    1692:	f1 f7       	brne	.-4      	; 0x1690 <LCDBusyLoop+0x61e>
    1694:	ce 01       	movw	r24, r28
    1696:	85 5b       	subi	r24, 0xB5	; 181
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	fc 01       	movw	r30, r24
    169c:	10 83       	st	Z, r17

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    169e:	88 e3       	ldi	r24, 0x38	; 56
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	28 e3       	ldi	r18, 0x38	; 56
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	f9 01       	movw	r30, r18
    16a8:	20 81       	ld	r18, Z
    16aa:	2f 7e       	andi	r18, 0xEF	; 239
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
    16b0:	9e 01       	movw	r18, r28
    16b2:	24 5b       	subi	r18, 0xB4	; 180
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e8       	ldi	r26, 0x80	; 128
    16bc:	bf e3       	ldi	r27, 0x3F	; 63
    16be:	f9 01       	movw	r30, r18
    16c0:	80 83       	st	Z, r24
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	a2 83       	std	Z+2, r26	; 0x02
    16c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    16c8:	8e 01       	movw	r16, r28
    16ca:	00 5b       	subi	r16, 0xB0	; 176
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	ce 01       	movw	r24, r28
    16d0:	84 5b       	subi	r24, 0xB4	; 180
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	fc 01       	movw	r30, r24
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	2b ea       	ldi	r18, 0xAB	; 171
    16e0:	3a ea       	ldi	r19, 0xAA	; 170
    16e2:	4a ea       	ldi	r20, 0xAA	; 170
    16e4:	5e e3       	ldi	r21, 0x3E	; 62
    16e6:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16f8:	ce 01       	movw	r24, r28
    16fa:	80 5b       	subi	r24, 0xB0	; 176
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	11 e0       	ldi	r17, 0x01	; 1
    1700:	fc 01       	movw	r30, r24
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <LCDBusyLoop+0x6aa>
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	11 23       	and	r17, r17
    171e:	39 f0       	breq	.+14     	; 0x172e <LCDBusyLoop+0x6bc>
		__ticks = 1;
    1720:	ce 01       	movw	r24, r28
    1722:	8c 5a       	subi	r24, 0xAC	; 172
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
    172c:	05 c1       	rjmp	.+522    	; 0x1938 <LCDBusyLoop+0x8c6>
	else if (__tmp > 255)
    172e:	ce 01       	movw	r24, r28
    1730:	80 5b       	subi	r24, 0xB0	; 176
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	11 e0       	ldi	r17, 0x01	; 1
    1736:	fc 01       	movw	r30, r24
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	53 e4       	ldi	r21, 0x43	; 67
    1748:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	0c f0       	brlt	.+2      	; 0x1752 <LCDBusyLoop+0x6e0>
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	11 23       	and	r17, r17
    1754:	09 f4       	brne	.+2      	; 0x1758 <LCDBusyLoop+0x6e6>
    1756:	df c0       	rjmp	.+446    	; 0x1916 <LCDBusyLoop+0x8a4>
	{
		_delay_ms(__us / 1000.0);
    1758:	ce 01       	movw	r24, r28
    175a:	84 5b       	subi	r24, 0xB4	; 180
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	fc 01       	movw	r30, r24
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a e7       	ldi	r20, 0x7A	; 122
    176e:	54 e4       	ldi	r21, 0x44	; 68
    1770:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 01       	movw	r18, r28
    177a:	2b 5a       	subi	r18, 0xAB	; 171
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	f9 01       	movw	r30, r18
    1780:	80 83       	st	Z, r24
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	a2 83       	std	Z+2, r26	; 0x02
    1786:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1788:	8e 01       	movw	r16, r28
    178a:	07 5a       	subi	r16, 0xA7	; 167
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	ce 01       	movw	r24, r28
    1790:	8b 5a       	subi	r24, 0xAB	; 171
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	fc 01       	movw	r30, r24
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a e7       	ldi	r20, 0x7A	; 122
    17a4:	53 e4       	ldi	r21, 0x43	; 67
    17a6:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	f8 01       	movw	r30, r16
    17b0:	80 83       	st	Z, r24
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	a2 83       	std	Z+2, r26	; 0x02
    17b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b8:	ce 01       	movw	r24, r28
    17ba:	87 5a       	subi	r24, 0xA7	; 167
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	11 e0       	ldi	r17, 0x01	; 1
    17c0:	fc 01       	movw	r30, r24
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	0c f0       	brlt	.+2      	; 0x17dc <LCDBusyLoop+0x76a>
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	11 23       	and	r17, r17
    17de:	49 f0       	breq	.+18     	; 0x17f2 <LCDBusyLoop+0x780>
		__ticks = 1;
    17e0:	ce 01       	movw	r24, r28
    17e2:	83 5a       	subi	r24, 0xA3	; 163
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	fc 01       	movw	r30, r24
    17ec:	31 83       	std	Z+1, r19	; 0x01
    17ee:	20 83       	st	Z, r18
    17f0:	74 c0       	rjmp	.+232    	; 0x18da <LCDBusyLoop+0x868>
	else if (__tmp > 65535)
    17f2:	ce 01       	movw	r24, r28
    17f4:	87 5a       	subi	r24, 0xA7	; 167
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	11 e0       	ldi	r17, 0x01	; 1
    17fa:	fc 01       	movw	r30, r24
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	0c f0       	brlt	.+2      	; 0x1816 <LCDBusyLoop+0x7a4>
    1814:	10 e0       	ldi	r17, 0x00	; 0
    1816:	11 23       	and	r17, r17
    1818:	09 f4       	brne	.+2      	; 0x181c <LCDBusyLoop+0x7aa>
    181a:	4d c0       	rjmp	.+154    	; 0x18b6 <LCDBusyLoop+0x844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	ce 01       	movw	r24, r28
    181e:	8b 5a       	subi	r24, 0xAB	; 171
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	fc 01       	movw	r30, r24
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8e 01       	movw	r16, r28
    183e:	03 5a       	subi	r16, 0xA3	; 163
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	27 c0       	rjmp	.+78     	; 0x18a4 <LCDBusyLoop+0x832>
    1856:	ce 01       	movw	r24, r28
    1858:	81 5a       	subi	r24, 0xA1	; 161
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	29 e1       	ldi	r18, 0x19	; 25
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	fc 01       	movw	r30, r24
    1862:	31 83       	std	Z+1, r19	; 0x01
    1864:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1866:	ce 01       	movw	r24, r28
    1868:	81 5a       	subi	r24, 0xA1	; 161
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	8c 01       	movw	r16, r24
    1874:	c8 01       	movw	r24, r16
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCDBusyLoop+0x804>
    187a:	8c 01       	movw	r16, r24
    187c:	ce 01       	movw	r24, r28
    187e:	81 5a       	subi	r24, 0xA1	; 161
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	fc 01       	movw	r30, r24
    1884:	11 83       	std	Z+1, r17	; 0x01
    1886:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	ce 01       	movw	r24, r28
    188a:	83 5a       	subi	r24, 0xA3	; 163
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	9e 01       	movw	r18, r28
    1890:	23 5a       	subi	r18, 0xA3	; 163
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	31 81       	ldd	r19, Z+1	; 0x01
    189a:	21 50       	subi	r18, 0x01	; 1
    189c:	30 40       	sbci	r19, 0x00	; 0
    189e:	fc 01       	movw	r30, r24
    18a0:	31 83       	std	Z+1, r19	; 0x01
    18a2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	ce 01       	movw	r24, r28
    18a6:	83 5a       	subi	r24, 0xA3	; 163
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	89 f6       	brne	.-94     	; 0x1856 <LCDBusyLoop+0x7e4>
    18b4:	58 c0       	rjmp	.+176    	; 0x1966 <LCDBusyLoop+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	8e 01       	movw	r16, r28
    18b8:	03 5a       	subi	r16, 0xA3	; 163
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	ce 01       	movw	r24, r28
    18be:	87 5a       	subi	r24, 0xA7	; 167
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	fc 01       	movw	r30, r24
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	f8 01       	movw	r30, r16
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
    18da:	ce 01       	movw	r24, r28
    18dc:	8f 59       	subi	r24, 0x9F	; 159
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	9e 01       	movw	r18, r28
    18e2:	23 5a       	subi	r18, 0xA3	; 163
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	f9 01       	movw	r30, r18
    18e8:	20 81       	ld	r18, Z
    18ea:	31 81       	ldd	r19, Z+1	; 0x01
    18ec:	fc 01       	movw	r30, r24
    18ee:	31 83       	std	Z+1, r19	; 0x01
    18f0:	20 83       	st	Z, r18
    18f2:	ce 01       	movw	r24, r28
    18f4:	8f 59       	subi	r24, 0x9F	; 159
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	8c 01       	movw	r16, r24
    1900:	c8 01       	movw	r24, r16
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCDBusyLoop+0x890>
    1906:	8c 01       	movw	r16, r24
    1908:	ce 01       	movw	r24, r28
    190a:	8f 59       	subi	r24, 0x9F	; 159
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	fc 01       	movw	r30, r24
    1910:	11 83       	std	Z+1, r17	; 0x01
    1912:	00 83       	st	Z, r16
    1914:	28 c0       	rjmp	.+80     	; 0x1966 <LCDBusyLoop+0x8f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1916:	8e 01       	movw	r16, r28
    1918:	0c 5a       	subi	r16, 0xAC	; 172
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	ce 01       	movw	r24, r28
    191e:	80 5b       	subi	r24, 0xB0	; 176
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	fc 01       	movw	r30, r24
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	f8 01       	movw	r30, r16
    1936:	80 83       	st	Z, r24
    1938:	ce 01       	movw	r24, r28
    193a:	8d 59       	subi	r24, 0x9D	; 157
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	9e 01       	movw	r18, r28
    1940:	2c 5a       	subi	r18, 0xAC	; 172
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	f9 01       	movw	r30, r18
    1946:	20 81       	ld	r18, Z
    1948:	fc 01       	movw	r30, r24
    194a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    194c:	ce 01       	movw	r24, r28
    194e:	8d 59       	subi	r24, 0x9D	; 157
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	18 2f       	mov	r17, r24
    1958:	1a 95       	dec	r17
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCDBusyLoop+0x8e6>
    195c:	ce 01       	movw	r24, r28
    195e:	8d 59       	subi	r24, 0x9D	; 157
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	fc 01       	movw	r30, r24
    1964:	10 83       	st	Z, r17
		_delay_us(1);	//tEL

		SET_E();
    1966:	88 e3       	ldi	r24, 0x38	; 56
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	28 e3       	ldi	r18, 0x38	; 56
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	f9 01       	movw	r30, r18
    1970:	20 81       	ld	r18, Z
    1972:	20 61       	ori	r18, 0x10	; 16
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
    1978:	9e 01       	movw	r18, r28
    197a:	2c 59       	subi	r18, 0x9C	; 156
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e0       	ldi	r26, 0x00	; 0
    1984:	bf e3       	ldi	r27, 0x3F	; 63
    1986:	f9 01       	movw	r30, r18
    1988:	80 83       	st	Z, r24
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	a2 83       	std	Z+2, r26	; 0x02
    198e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1990:	8e 01       	movw	r16, r28
    1992:	08 59       	subi	r16, 0x98	; 152
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	ce 01       	movw	r24, r28
    1998:	8c 59       	subi	r24, 0x9C	; 156
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	fc 01       	movw	r30, r24
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	2b ea       	ldi	r18, 0xAB	; 171
    19a8:	3a ea       	ldi	r19, 0xAA	; 170
    19aa:	4a ea       	ldi	r20, 0xAA	; 170
    19ac:	5e e3       	ldi	r21, 0x3E	; 62
    19ae:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	f8 01       	movw	r30, r16
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c0:	ce 01       	movw	r24, r28
    19c2:	88 59       	subi	r24, 0x98	; 152
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	11 e0       	ldi	r17, 0x01	; 1
    19c8:	fc 01       	movw	r30, r24
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	0c f0       	brlt	.+2      	; 0x19e4 <LCDBusyLoop+0x972>
    19e2:	10 e0       	ldi	r17, 0x00	; 0
    19e4:	11 23       	and	r17, r17
    19e6:	39 f0       	breq	.+14     	; 0x19f6 <LCDBusyLoop+0x984>
		__ticks = 1;
    19e8:	ce 01       	movw	r24, r28
    19ea:	84 59       	subi	r24, 0x94	; 148
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	21 e0       	ldi	r18, 0x01	; 1
    19f0:	fc 01       	movw	r30, r24
    19f2:	20 83       	st	Z, r18
    19f4:	05 c1       	rjmp	.+522    	; 0x1c00 <LCDBusyLoop+0xb8e>
	else if (__tmp > 255)
    19f6:	ce 01       	movw	r24, r28
    19f8:	88 59       	subi	r24, 0x98	; 152
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	11 e0       	ldi	r17, 0x01	; 1
    19fe:	fc 01       	movw	r30, r24
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	53 e4       	ldi	r21, 0x43	; 67
    1a10:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	0c f0       	brlt	.+2      	; 0x1a1a <LCDBusyLoop+0x9a8>
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	11 23       	and	r17, r17
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <LCDBusyLoop+0x9ae>
    1a1e:	df c0       	rjmp	.+446    	; 0x1bde <LCDBusyLoop+0xb6c>
	{
		_delay_ms(__us / 1000.0);
    1a20:	ce 01       	movw	r24, r28
    1a22:	8c 59       	subi	r24, 0x9C	; 156
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	fc 01       	movw	r30, r24
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a e7       	ldi	r20, 0x7A	; 122
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e 01       	movw	r18, r28
    1a42:	23 59       	subi	r18, 0x93	; 147
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	f9 01       	movw	r30, r18
    1a48:	80 83       	st	Z, r24
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	a2 83       	std	Z+2, r26	; 0x02
    1a4e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	8e 01       	movw	r16, r28
    1a52:	0f 58       	subi	r16, 0x8F	; 143
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	ce 01       	movw	r24, r28
    1a58:	83 59       	subi	r24, 0x93	; 147
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	53 e4       	ldi	r21, 0x43	; 67
    1a6e:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	f8 01       	movw	r30, r16
    1a78:	80 83       	st	Z, r24
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	a2 83       	std	Z+2, r26	; 0x02
    1a7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a80:	ce 01       	movw	r24, r28
    1a82:	8f 58       	subi	r24, 0x8F	; 143
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	11 e0       	ldi	r17, 0x01	; 1
    1a88:	fc 01       	movw	r30, r24
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	0c f0       	brlt	.+2      	; 0x1aa4 <LCDBusyLoop+0xa32>
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	11 23       	and	r17, r17
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <LCDBusyLoop+0xa48>
		__ticks = 1;
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	8b 58       	subi	r24, 0x8B	; 139
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	21 e0       	ldi	r18, 0x01	; 1
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	31 83       	std	Z+1, r19	; 0x01
    1ab6:	20 83       	st	Z, r18
    1ab8:	74 c0       	rjmp	.+232    	; 0x1ba2 <LCDBusyLoop+0xb30>
	else if (__tmp > 65535)
    1aba:	ce 01       	movw	r24, r28
    1abc:	8f 58       	subi	r24, 0x8F	; 143
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	11 e0       	ldi	r17, 0x01	; 1
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <LCDBusyLoop+0xa6c>
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	11 23       	and	r17, r17
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <LCDBusyLoop+0xa72>
    1ae2:	4d c0       	rjmp	.+154    	; 0x1b7e <LCDBusyLoop+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	83 59       	subi	r24, 0x93	; 147
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	fc 01       	movw	r30, r24
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8e 01       	movw	r16, r28
    1b06:	0b 58       	subi	r16, 0x8B	; 139
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	f8 01       	movw	r30, r16
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	27 c0       	rjmp	.+78     	; 0x1b6c <LCDBusyLoop+0xafa>
    1b1e:	ce 01       	movw	r24, r28
    1b20:	89 58       	subi	r24, 0x89	; 137
    1b22:	9f 4f       	sbci	r25, 0xFF	; 255
    1b24:	29 e1       	ldi	r18, 0x19	; 25
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	fc 01       	movw	r30, r24
    1b2a:	31 83       	std	Z+1, r19	; 0x01
    1b2c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2e:	ce 01       	movw	r24, r28
    1b30:	89 58       	subi	r24, 0x89	; 137
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	fc 01       	movw	r30, r24
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	8c 01       	movw	r16, r24
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCDBusyLoop+0xacc>
    1b42:	8c 01       	movw	r16, r24
    1b44:	ce 01       	movw	r24, r28
    1b46:	89 58       	subi	r24, 0x89	; 137
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	11 83       	std	Z+1, r17	; 0x01
    1b4e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	ce 01       	movw	r24, r28
    1b52:	8b 58       	subi	r24, 0x8B	; 139
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	9e 01       	movw	r18, r28
    1b58:	2b 58       	subi	r18, 0x8B	; 139
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	20 81       	ld	r18, Z
    1b60:	31 81       	ldd	r19, Z+1	; 0x01
    1b62:	21 50       	subi	r18, 0x01	; 1
    1b64:	30 40       	sbci	r19, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	31 83       	std	Z+1, r19	; 0x01
    1b6a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	8b 58       	subi	r24, 0x8B	; 139
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	fc 01       	movw	r30, r24
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	89 f6       	brne	.-94     	; 0x1b1e <LCDBusyLoop+0xaac>
    1b7c:	58 c0       	rjmp	.+176    	; 0x1c2e <LCDBusyLoop+0xbbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	8e 01       	movw	r16, r28
    1b80:	0b 58       	subi	r16, 0x8B	; 139
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	8f 58       	subi	r24, 0x8F	; 143
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	87 58       	subi	r24, 0x87	; 135
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	9e 01       	movw	r18, r28
    1baa:	2b 58       	subi	r18, 0x8B	; 139
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	f9 01       	movw	r30, r18
    1bb0:	20 81       	ld	r18, Z
    1bb2:	31 81       	ldd	r19, Z+1	; 0x01
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	31 83       	std	Z+1, r19	; 0x01
    1bb8:	20 83       	st	Z, r18
    1bba:	ce 01       	movw	r24, r28
    1bbc:	87 58       	subi	r24, 0x87	; 135
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	8c 01       	movw	r16, r24
    1bc8:	c8 01       	movw	r24, r16
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCDBusyLoop+0xb58>
    1bce:	8c 01       	movw	r16, r24
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	87 58       	subi	r24, 0x87	; 135
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	11 83       	std	Z+1, r17	; 0x01
    1bda:	00 83       	st	Z, r16
    1bdc:	28 c0       	rjmp	.+80     	; 0x1c2e <LCDBusyLoop+0xbbc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bde:	8e 01       	movw	r16, r28
    1be0:	04 59       	subi	r16, 0x94	; 148
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	ce 01       	movw	r24, r28
    1be6:	88 59       	subi	r24, 0x98	; 152
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	fc 01       	movw	r30, r24
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	80 83       	st	Z, r24
    1c00:	ce 01       	movw	r24, r28
    1c02:	85 58       	subi	r24, 0x85	; 133
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	9e 01       	movw	r18, r28
    1c08:	24 59       	subi	r18, 0x94	; 148
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	20 81       	ld	r18, Z
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c14:	ce 01       	movw	r24, r28
    1c16:	85 58       	subi	r24, 0x85	; 133
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	80 81       	ld	r24, Z
    1c1e:	18 2f       	mov	r17, r24
    1c20:	1a 95       	dec	r17
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCDBusyLoop+0xbae>
    1c24:	ce 01       	movw	r24, r28
    1c26:	85 58       	subi	r24, 0x85	; 133
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	10 83       	st	Z, r17
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    1c2e:	86 e3       	ldi	r24, 0x36	; 54
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	fc 01       	movw	r30, r24
    1c34:	80 81       	ld	r24, Z
    1c36:	8a 83       	std	Y+2, r24	; 0x02
		temp&=0x0F;
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	8f 70       	andi	r24, 0x0F	; 15
    1c3c:	8a 83       	std	Y+2, r24	; 0x02

		status=status|temp;
    1c3e:	99 81       	ldd	r25, Y+1	; 0x01
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	89 2b       	or	r24, r25
    1c44:	89 83       	std	Y+1, r24	; 0x01

		busy=status & 0b10000000;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	80 78       	andi	r24, 0x80	; 128
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	9e 01       	movw	r18, r28
    1c4e:	24 58       	subi	r18, 0x84	; 132
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1c64:	8e 01       	movw	r16, r28
    1c66:	00 58       	subi	r16, 0x80	; 128
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	84 58       	subi	r24, 0x84	; 132
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	fc 01       	movw	r30, r24
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	2b ea       	ldi	r18, 0xAB	; 171
    1c7c:	3a ea       	ldi	r19, 0xAA	; 170
    1c7e:	4a ea       	ldi	r20, 0xAA	; 170
    1c80:	5e e3       	ldi	r21, 0x3E	; 62
    1c82:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	80 83       	st	Z, r24
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	a2 83       	std	Z+2, r26	; 0x02
    1c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c94:	ce 01       	movw	r24, r28
    1c96:	80 58       	subi	r24, 0x80	; 128
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	11 e0       	ldi	r17, 0x01	; 1
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <LCDBusyLoop+0xc46>
    1cb6:	10 e0       	ldi	r17, 0x00	; 0
    1cb8:	11 23       	and	r17, r17
    1cba:	39 f0       	breq	.+14     	; 0x1cca <LCDBusyLoop+0xc58>
		__ticks = 1;
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	8c 57       	subi	r24, 0x7C	; 124
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	21 e0       	ldi	r18, 0x01	; 1
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	20 83       	st	Z, r18
    1cc8:	05 c1       	rjmp	.+522    	; 0x1ed4 <LCDBusyLoop+0xe62>
	else if (__tmp > 255)
    1cca:	ce 01       	movw	r24, r28
    1ccc:	80 58       	subi	r24, 0x80	; 128
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	11 e0       	ldi	r17, 0x01	; 1
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	53 e4       	ldi	r21, 0x43	; 67
    1ce4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	0c f0       	brlt	.+2      	; 0x1cee <LCDBusyLoop+0xc7c>
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	11 23       	and	r17, r17
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <LCDBusyLoop+0xc82>
    1cf2:	df c0       	rjmp	.+446    	; 0x1eb2 <LCDBusyLoop+0xe40>
	{
		_delay_ms(__us / 1000.0);
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	84 58       	subi	r24, 0x84	; 132
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9e 01       	movw	r18, r28
    1d16:	2b 57       	subi	r18, 0x7B	; 123
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	80 83       	st	Z, r24
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	a2 83       	std	Z+2, r26	; 0x02
    1d22:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	8e 01       	movw	r16, r28
    1d26:	07 57       	subi	r16, 0x77	; 119
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	8b 57       	subi	r24, 0x7B	; 123
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	fc 01       	movw	r30, r24
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a e7       	ldi	r20, 0x7A	; 122
    1d40:	53 e4       	ldi	r21, 0x43	; 67
    1d42:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d54:	ce 01       	movw	r24, r28
    1d56:	87 57       	subi	r24, 0x77	; 119
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	11 e0       	ldi	r17, 0x01	; 1
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	0c f0       	brlt	.+2      	; 0x1d78 <LCDBusyLoop+0xd06>
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	11 23       	and	r17, r17
    1d7a:	49 f0       	breq	.+18     	; 0x1d8e <LCDBusyLoop+0xd1c>
		__ticks = 1;
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	83 57       	subi	r24, 0x73	; 115
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	fc 01       	movw	r30, r24
    1d88:	31 83       	std	Z+1, r19	; 0x01
    1d8a:	20 83       	st	Z, r18
    1d8c:	74 c0       	rjmp	.+232    	; 0x1e76 <LCDBusyLoop+0xe04>
	else if (__tmp > 65535)
    1d8e:	ce 01       	movw	r24, r28
    1d90:	87 57       	subi	r24, 0x77	; 119
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	11 e0       	ldi	r17, 0x01	; 1
    1d96:	fc 01       	movw	r30, r24
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <LCDBusyLoop+0xd40>
    1db0:	10 e0       	ldi	r17, 0x00	; 0
    1db2:	11 23       	and	r17, r17
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <LCDBusyLoop+0xd46>
    1db6:	4d c0       	rjmp	.+154    	; 0x1e52 <LCDBusyLoop+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	ce 01       	movw	r24, r28
    1dba:	8b 57       	subi	r24, 0x7B	; 123
    1dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8e 01       	movw	r16, r28
    1dda:	03 57       	subi	r16, 0x73	; 115
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	f8 01       	movw	r30, r16
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
    1df0:	27 c0       	rjmp	.+78     	; 0x1e40 <LCDBusyLoop+0xdce>
    1df2:	ce 01       	movw	r24, r28
    1df4:	81 57       	subi	r24, 0x71	; 113
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	29 e1       	ldi	r18, 0x19	; 25
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	31 83       	std	Z+1, r19	; 0x01
    1e00:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e02:	ce 01       	movw	r24, r28
    1e04:	81 57       	subi	r24, 0x71	; 113
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	fc 01       	movw	r30, r24
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	8c 01       	movw	r16, r24
    1e10:	c8 01       	movw	r24, r16
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCDBusyLoop+0xda0>
    1e16:	8c 01       	movw	r16, r24
    1e18:	ce 01       	movw	r24, r28
    1e1a:	81 57       	subi	r24, 0x71	; 113
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	fc 01       	movw	r30, r24
    1e20:	11 83       	std	Z+1, r17	; 0x01
    1e22:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	ce 01       	movw	r24, r28
    1e26:	83 57       	subi	r24, 0x73	; 115
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	23 57       	subi	r18, 0x73	; 115
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	f9 01       	movw	r30, r18
    1e32:	20 81       	ld	r18, Z
    1e34:	31 81       	ldd	r19, Z+1	; 0x01
    1e36:	21 50       	subi	r18, 0x01	; 1
    1e38:	30 40       	sbci	r19, 0x00	; 0
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	31 83       	std	Z+1, r19	; 0x01
    1e3e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	ce 01       	movw	r24, r28
    1e42:	83 57       	subi	r24, 0x73	; 115
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	fc 01       	movw	r30, r24
    1e48:	80 81       	ld	r24, Z
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	89 f6       	brne	.-94     	; 0x1df2 <LCDBusyLoop+0xd80>
    1e50:	58 c0       	rjmp	.+176    	; 0x1f02 <LCDBusyLoop+0xe90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	8e 01       	movw	r16, r28
    1e54:	03 57       	subi	r16, 0x73	; 115
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	ce 01       	movw	r24, r28
    1e5a:	87 57       	subi	r24, 0x77	; 119
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	fc 01       	movw	r30, r24
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	f8 01       	movw	r30, r16
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    1e76:	ce 01       	movw	r24, r28
    1e78:	8f 56       	subi	r24, 0x6F	; 111
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	9e 01       	movw	r18, r28
    1e7e:	23 57       	subi	r18, 0x73	; 115
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	f9 01       	movw	r30, r18
    1e84:	20 81       	ld	r18, Z
    1e86:	31 81       	ldd	r19, Z+1	; 0x01
    1e88:	fc 01       	movw	r30, r24
    1e8a:	31 83       	std	Z+1, r19	; 0x01
    1e8c:	20 83       	st	Z, r18
    1e8e:	ce 01       	movw	r24, r28
    1e90:	8f 56       	subi	r24, 0x6F	; 111
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	fc 01       	movw	r30, r24
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCDBusyLoop+0xe2c>
    1ea2:	8c 01       	movw	r16, r24
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	8f 56       	subi	r24, 0x6F	; 111
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	fc 01       	movw	r30, r24
    1eac:	11 83       	std	Z+1, r17	; 0x01
    1eae:	00 83       	st	Z, r16
    1eb0:	28 c0       	rjmp	.+80     	; 0x1f02 <LCDBusyLoop+0xe90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eb2:	8e 01       	movw	r16, r28
    1eb4:	0c 57       	subi	r16, 0x7C	; 124
    1eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb8:	ce 01       	movw	r24, r28
    1eba:	80 58       	subi	r24, 0x80	; 128
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	80 83       	st	Z, r24
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	8d 56       	subi	r24, 0x6D	; 109
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	9e 01       	movw	r18, r28
    1edc:	2c 57       	subi	r18, 0x7C	; 124
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	20 81       	ld	r18, Z
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ee8:	ce 01       	movw	r24, r28
    1eea:	8d 56       	subi	r24, 0x6D	; 109
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	fc 01       	movw	r30, r24
    1ef0:	80 81       	ld	r24, Z
    1ef2:	18 2f       	mov	r17, r24
    1ef4:	1a 95       	dec	r17
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCDBusyLoop+0xe82>
    1ef8:	ce 01       	movw	r24, r28
    1efa:	8d 56       	subi	r24, 0x6D	; 109
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	fc 01       	movw	r30, r24
    1f00:	10 83       	st	Z, r17

		_delay_us(0.5);
		CLEAR_E();
    1f02:	88 e3       	ldi	r24, 0x38	; 56
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	28 e3       	ldi	r18, 0x38	; 56
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	20 81       	ld	r18, Z
    1f0e:	2f 7e       	andi	r18, 0xEF	; 239
    1f10:	fc 01       	movw	r30, r24
    1f12:	20 83       	st	Z, r18
    1f14:	9e 01       	movw	r18, r28
    1f16:	2c 56       	subi	r18, 0x6C	; 108
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	f9 01       	movw	r30, r18
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	08 56       	subi	r16, 0x68	; 104
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	ce 01       	movw	r24, r28
    1f34:	8c 56       	subi	r24, 0x6C	; 108
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	fc 01       	movw	r30, r24
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	2b ea       	ldi	r18, 0xAB	; 171
    1f44:	3a ea       	ldi	r19, 0xAA	; 170
    1f46:	4a ea       	ldi	r20, 0xAA	; 170
    1f48:	5e e3       	ldi	r21, 0x3E	; 62
    1f4a:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 83       	st	Z, r24
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	a2 83       	std	Z+2, r26	; 0x02
    1f5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	88 56       	subi	r24, 0x68	; 104
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	11 e0       	ldi	r17, 0x01	; 1
    1f64:	fc 01       	movw	r30, r24
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e8       	ldi	r20, 0x80	; 128
    1f74:	5f e3       	ldi	r21, 0x3F	; 63
    1f76:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <LCDBusyLoop+0xf0e>
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	11 23       	and	r17, r17
    1f82:	39 f0       	breq	.+14     	; 0x1f92 <LCDBusyLoop+0xf20>
		__ticks = 1;
    1f84:	ce 01       	movw	r24, r28
    1f86:	84 56       	subi	r24, 0x64	; 100
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	21 e0       	ldi	r18, 0x01	; 1
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	20 83       	st	Z, r18
    1f90:	05 c1       	rjmp	.+522    	; 0x219c <LCDBusyLoop+0x112a>
	else if (__tmp > 255)
    1f92:	ce 01       	movw	r24, r28
    1f94:	88 56       	subi	r24, 0x68	; 104
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	11 e0       	ldi	r17, 0x01	; 1
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	53 e4       	ldi	r21, 0x43	; 67
    1fac:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	0c f0       	brlt	.+2      	; 0x1fb6 <LCDBusyLoop+0xf44>
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
    1fb6:	11 23       	and	r17, r17
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <LCDBusyLoop+0xf4a>
    1fba:	df c0       	rjmp	.+446    	; 0x217a <LCDBusyLoop+0x1108>
	{
		_delay_ms(__us / 1000.0);
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	8c 56       	subi	r24, 0x6C	; 108
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 01       	movw	r18, r28
    1fde:	23 56       	subi	r18, 0x63	; 99
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	8e 01       	movw	r16, r28
    1fee:	0f 55       	subi	r16, 0x5F	; 95
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	83 56       	subi	r24, 0x63	; 99
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	f8 01       	movw	r30, r16
    2014:	80 83       	st	Z, r24
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	a2 83       	std	Z+2, r26	; 0x02
    201a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    201c:	ce 01       	movw	r24, r28
    201e:	8f 55       	subi	r24, 0x5F	; 95
    2020:	9f 4f       	sbci	r25, 0xFF	; 255
    2022:	11 e0       	ldi	r17, 0x01	; 1
    2024:	fc 01       	movw	r30, r24
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <LCDBusyLoop+0xfce>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	11 23       	and	r17, r17
    2042:	49 f0       	breq	.+18     	; 0x2056 <LCDBusyLoop+0xfe4>
		__ticks = 1;
    2044:	ce 01       	movw	r24, r28
    2046:	8b 55       	subi	r24, 0x5B	; 91
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	21 e0       	ldi	r18, 0x01	; 1
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	fc 01       	movw	r30, r24
    2050:	31 83       	std	Z+1, r19	; 0x01
    2052:	20 83       	st	Z, r18
    2054:	74 c0       	rjmp	.+232    	; 0x213e <LCDBusyLoop+0x10cc>
	else if (__tmp > 65535)
    2056:	ce 01       	movw	r24, r28
    2058:	8f 55       	subi	r24, 0x5F	; 95
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	11 e0       	ldi	r17, 0x01	; 1
    205e:	fc 01       	movw	r30, r24
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	0c f0       	brlt	.+2      	; 0x207a <LCDBusyLoop+0x1008>
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	11 23       	and	r17, r17
    207c:	09 f4       	brne	.+2      	; 0x2080 <LCDBusyLoop+0x100e>
    207e:	4d c0       	rjmp	.+154    	; 0x211a <LCDBusyLoop+0x10a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2080:	ce 01       	movw	r24, r28
    2082:	83 56       	subi	r24, 0x63	; 99
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	fc 01       	movw	r30, r24
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8e 01       	movw	r16, r28
    20a2:	0b 55       	subi	r16, 0x5B	; 91
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	27 c0       	rjmp	.+78     	; 0x2108 <LCDBusyLoop+0x1096>
    20ba:	ce 01       	movw	r24, r28
    20bc:	89 55       	subi	r24, 0x59	; 89
    20be:	9f 4f       	sbci	r25, 0xFF	; 255
    20c0:	29 e1       	ldi	r18, 0x19	; 25
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	fc 01       	movw	r30, r24
    20c6:	31 83       	std	Z+1, r19	; 0x01
    20c8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ca:	ce 01       	movw	r24, r28
    20cc:	89 55       	subi	r24, 0x59	; 89
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	fc 01       	movw	r30, r24
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	8c 01       	movw	r16, r24
    20d8:	c8 01       	movw	r24, r16
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <LCDBusyLoop+0x1068>
    20de:	8c 01       	movw	r16, r24
    20e0:	ce 01       	movw	r24, r28
    20e2:	89 55       	subi	r24, 0x59	; 89
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	fc 01       	movw	r30, r24
    20e8:	11 83       	std	Z+1, r17	; 0x01
    20ea:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	ce 01       	movw	r24, r28
    20ee:	8b 55       	subi	r24, 0x5B	; 91
    20f0:	9f 4f       	sbci	r25, 0xFF	; 255
    20f2:	9e 01       	movw	r18, r28
    20f4:	2b 55       	subi	r18, 0x5B	; 91
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	f9 01       	movw	r30, r18
    20fa:	20 81       	ld	r18, Z
    20fc:	31 81       	ldd	r19, Z+1	; 0x01
    20fe:	21 50       	subi	r18, 0x01	; 1
    2100:	30 40       	sbci	r19, 0x00	; 0
    2102:	fc 01       	movw	r30, r24
    2104:	31 83       	std	Z+1, r19	; 0x01
    2106:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	ce 01       	movw	r24, r28
    210a:	8b 55       	subi	r24, 0x5B	; 91
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	fc 01       	movw	r30, r24
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	89 f6       	brne	.-94     	; 0x20ba <LCDBusyLoop+0x1048>
    2118:	58 c0       	rjmp	.+176    	; 0x21ca <LCDBusyLoop+0x1158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	8e 01       	movw	r16, r28
    211c:	0b 55       	subi	r16, 0x5B	; 91
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	ce 01       	movw	r24, r28
    2122:	8f 55       	subi	r24, 0x5F	; 95
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	fc 01       	movw	r30, r24
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	f8 01       	movw	r30, r16
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	ce 01       	movw	r24, r28
    2140:	87 55       	subi	r24, 0x57	; 87
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	9e 01       	movw	r18, r28
    2146:	2b 55       	subi	r18, 0x5B	; 91
    2148:	3f 4f       	sbci	r19, 0xFF	; 255
    214a:	f9 01       	movw	r30, r18
    214c:	20 81       	ld	r18, Z
    214e:	31 81       	ldd	r19, Z+1	; 0x01
    2150:	fc 01       	movw	r30, r24
    2152:	31 83       	std	Z+1, r19	; 0x01
    2154:	20 83       	st	Z, r18
    2156:	ce 01       	movw	r24, r28
    2158:	87 55       	subi	r24, 0x57	; 87
    215a:	9f 4f       	sbci	r25, 0xFF	; 255
    215c:	fc 01       	movw	r30, r24
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	8c 01       	movw	r16, r24
    2164:	c8 01       	movw	r24, r16
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCDBusyLoop+0x10f4>
    216a:	8c 01       	movw	r16, r24
    216c:	ce 01       	movw	r24, r28
    216e:	87 55       	subi	r24, 0x57	; 87
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	fc 01       	movw	r30, r24
    2174:	11 83       	std	Z+1, r17	; 0x01
    2176:	00 83       	st	Z, r16
    2178:	28 c0       	rjmp	.+80     	; 0x21ca <LCDBusyLoop+0x1158>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    217a:	8e 01       	movw	r16, r28
    217c:	04 56       	subi	r16, 0x64	; 100
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	ce 01       	movw	r24, r28
    2182:	88 56       	subi	r24, 0x68	; 104
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	fc 01       	movw	r30, r24
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	f8 01       	movw	r30, r16
    219a:	80 83       	st	Z, r24
    219c:	ce 01       	movw	r24, r28
    219e:	85 55       	subi	r24, 0x55	; 85
    21a0:	9f 4f       	sbci	r25, 0xFF	; 255
    21a2:	9e 01       	movw	r18, r28
    21a4:	24 56       	subi	r18, 0x64	; 100
    21a6:	3f 4f       	sbci	r19, 0xFF	; 255
    21a8:	f9 01       	movw	r30, r18
    21aa:	20 81       	ld	r18, Z
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21b0:	ce 01       	movw	r24, r28
    21b2:	85 55       	subi	r24, 0x55	; 85
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	fc 01       	movw	r30, r24
    21b8:	80 81       	ld	r24, Z
    21ba:	18 2f       	mov	r17, r24
    21bc:	1a 95       	dec	r17
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCDBusyLoop+0x114a>
    21c0:	ce 01       	movw	r24, r28
    21c2:	85 55       	subi	r24, 0x55	; 85
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	fc 01       	movw	r30, r24
    21c8:	10 83       	st	Z, r17
		_delay_us(1);	//tEL
	}while(busy);
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	88 23       	and	r24, r24
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <LCDBusyLoop+0x1160>
    21d0:	4e c8       	rjmp	.-3940   	; 0x126e <LCDBusyLoop+0x1fc>

	CLEAR_RW();		//write mode
    21d2:	82 e3       	ldi	r24, 0x32	; 50
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	22 e3       	ldi	r18, 0x32	; 50
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	f9 01       	movw	r30, r18
    21dc:	20 81       	ld	r18, Z
    21de:	2f 7b       	andi	r18, 0xBF	; 191
    21e0:	fc 01       	movw	r30, r24
    21e2:	20 83       	st	Z, r18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    21e4:	87 e3       	ldi	r24, 0x37	; 55
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	27 e3       	ldi	r18, 0x37	; 55
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	f9 01       	movw	r30, r18
    21ee:	20 81       	ld	r18, Z
    21f0:	2f 60       	ori	r18, 0x0F	; 15
    21f2:	fc 01       	movw	r30, r24
    21f4:	20 83       	st	Z, r18

}
    21f6:	c5 55       	subi	r28, 0x55	; 85
    21f8:	df 4f       	sbci	r29, 0xFF	; 255
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <LCDInit>:

void LCDInit(uint8_t style)
{
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	c8 55       	subi	r28, 0x58	; 88
    221c:	d0 40       	sbci	r29, 0x00	; 0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	9e 01       	movw	r18, r28
    222a:	28 5a       	subi	r18, 0xA8	; 168
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	f9 01       	movw	r30, r18
    2230:	80 83       	st	Z, r24
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a0 ef       	ldi	r26, 0xF0	; 240
    2238:	b1 e4       	ldi	r27, 0x41	; 65
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	ac 83       	std	Y+4, r26	; 0x04
    2240:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2242:	6a 81       	ldd	r22, Y+2	; 0x02
    2244:	7b 81       	ldd	r23, Y+3	; 0x03
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	9d 81       	ldd	r25, Y+5	; 0x05
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	4a e7       	ldi	r20, 0x7A	; 122
    2250:	53 e4       	ldi	r21, 0x43	; 67
    2252:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	8e 83       	std	Y+6, r24	; 0x06
    225c:	9f 83       	std	Y+7, r25	; 0x07
    225e:	a8 87       	std	Y+8, r26	; 0x08
    2260:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    2262:	11 e0       	ldi	r17, 0x01	; 1
    2264:	6e 81       	ldd	r22, Y+6	; 0x06
    2266:	7f 81       	ldd	r23, Y+7	; 0x07
    2268:	88 85       	ldd	r24, Y+8	; 0x08
    226a:	99 85       	ldd	r25, Y+9	; 0x09
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	0c f0       	brlt	.+2      	; 0x227e <LCDInit+0x70>
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	11 23       	and	r17, r17
    2280:	29 f0       	breq	.+10     	; 0x228c <LCDInit+0x7e>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9b 87       	std	Y+11, r25	; 0x0b
    2288:	8a 87       	std	Y+10, r24	; 0x0a
    228a:	46 c0       	rjmp	.+140    	; 0x2318 <LCDInit+0x10a>
	else if (__tmp > 65535)
    228c:	11 e0       	ldi	r17, 0x01	; 1
    228e:	6e 81       	ldd	r22, Y+6	; 0x06
    2290:	7f 81       	ldd	r23, Y+7	; 0x07
    2292:	88 85       	ldd	r24, Y+8	; 0x08
    2294:	99 85       	ldd	r25, Y+9	; 0x09
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	0c f0       	brlt	.+2      	; 0x22a8 <LCDInit+0x9a>
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    22a8:	11 23       	and	r17, r17
    22aa:	61 f1       	breq	.+88     	; 0x2304 <LCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6a 81       	ldd	r22, Y+2	; 0x02
    22ae:	7b 81       	ldd	r23, Y+3	; 0x03
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	9d 81       	ldd	r25, Y+5	; 0x05
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9b 87       	std	Y+11, r25	; 0x0b
    22d2:	8a 87       	std	Y+10, r24	; 0x0a
    22d4:	12 c0       	rjmp	.+36     	; 0x22fa <LCDInit+0xec>
    22d6:	89 e1       	ldi	r24, 0x19	; 25
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9d 87       	std	Y+13, r25	; 0x0d
    22dc:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22de:	8c 85       	ldd	r24, Y+12	; 0x0c
    22e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    22e2:	8c 01       	movw	r16, r24
    22e4:	c8 01       	movw	r24, r16
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCDInit+0xd8>
    22ea:	8c 01       	movw	r16, r24
    22ec:	1d 87       	std	Y+13, r17	; 0x0d
    22ee:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9b 87       	std	Y+11, r25	; 0x0b
    22f8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    22fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	51 f7       	brne	.-44     	; 0x22d6 <LCDInit+0xc8>
    2302:	17 c0       	rjmp	.+46     	; 0x2332 <LCDInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	6e 81       	ldd	r22, Y+6	; 0x06
    2306:	7f 81       	ldd	r23, Y+7	; 0x07
    2308:	88 85       	ldd	r24, Y+8	; 0x08
    230a:	99 85       	ldd	r25, Y+9	; 0x09
    230c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9b 87       	std	Y+11, r25	; 0x0b
    2316:	8a 87       	std	Y+10, r24	; 0x0a
    2318:	8a 85       	ldd	r24, Y+10	; 0x0a
    231a:	9b 85       	ldd	r25, Y+11	; 0x0b
    231c:	9f 87       	std	Y+15, r25	; 0x0f
    231e:	8e 87       	std	Y+14, r24	; 0x0e
    2320:	8e 85       	ldd	r24, Y+14	; 0x0e
    2322:	9f 85       	ldd	r25, Y+15	; 0x0f
    2324:	8c 01       	movw	r16, r24
    2326:	f8 01       	movw	r30, r16
    2328:	31 97       	sbiw	r30, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCDInit+0x11a>
    232c:	8f 01       	movw	r16, r30
    232e:	1f 87       	std	Y+15, r17	; 0x0f
    2330:	0e 87       	std	Y+14, r16	; 0x0e
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    2332:	87 e3       	ldi	r24, 0x37	; 55
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	27 e3       	ldi	r18, 0x37	; 55
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	f9 01       	movw	r30, r18
    233c:	20 81       	ld	r18, Z
    233e:	2f 60       	ori	r18, 0x0F	; 15
    2340:	fc 01       	movw	r30, r24
    2342:	20 83       	st	Z, r18
	LCD_E_DDR|=(1<<LCD_E_POS);
    2344:	87 e3       	ldi	r24, 0x37	; 55
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	27 e3       	ldi	r18, 0x37	; 55
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	f9 01       	movw	r30, r18
    234e:	20 81       	ld	r18, Z
    2350:	20 61       	ori	r18, 0x10	; 16
    2352:	fc 01       	movw	r30, r24
    2354:	20 83       	st	Z, r18
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    2356:	81 e3       	ldi	r24, 0x31	; 49
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	21 e3       	ldi	r18, 0x31	; 49
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	f9 01       	movw	r30, r18
    2360:	20 81       	ld	r18, Z
    2362:	28 60       	ori	r18, 0x08	; 8
    2364:	fc 01       	movw	r30, r24
    2366:	20 83       	st	Z, r18
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    2368:	81 e3       	ldi	r24, 0x31	; 49
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	21 e3       	ldi	r18, 0x31	; 49
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	f9 01       	movw	r30, r18
    2372:	20 81       	ld	r18, Z
    2374:	20 64       	ori	r18, 0x40	; 64
    2376:	fc 01       	movw	r30, r24
    2378:	20 83       	st	Z, r18

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    237a:	88 e3       	ldi	r24, 0x38	; 56
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	28 e3       	ldi	r18, 0x38	; 56
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	f9 01       	movw	r30, r18
    2384:	20 81       	ld	r18, Z
    2386:	20 7f       	andi	r18, 0xF0	; 240
    2388:	fc 01       	movw	r30, r24
    238a:	20 83       	st	Z, r18
	CLEAR_E();
    238c:	88 e3       	ldi	r24, 0x38	; 56
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	28 e3       	ldi	r18, 0x38	; 56
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	f9 01       	movw	r30, r18
    2396:	20 81       	ld	r18, Z
    2398:	2f 7e       	andi	r18, 0xEF	; 239
    239a:	fc 01       	movw	r30, r24
    239c:	20 83       	st	Z, r18
	CLEAR_RW();
    239e:	82 e3       	ldi	r24, 0x32	; 50
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	22 e3       	ldi	r18, 0x32	; 50
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	f9 01       	movw	r30, r18
    23a8:	20 81       	ld	r18, Z
    23aa:	2f 7b       	andi	r18, 0xBF	; 191
    23ac:	fc 01       	movw	r30, r24
    23ae:	20 83       	st	Z, r18
	CLEAR_RS();
    23b0:	82 e3       	ldi	r24, 0x32	; 50
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	22 e3       	ldi	r18, 0x32	; 50
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	f9 01       	movw	r30, r18
    23ba:	20 81       	ld	r18, Z
    23bc:	27 7f       	andi	r18, 0xF7	; 247
    23be:	fc 01       	movw	r30, r24
    23c0:	20 83       	st	Z, r18
    23c2:	8a e9       	ldi	r24, 0x9A	; 154
    23c4:	99 e9       	ldi	r25, 0x99	; 153
    23c6:	a9 e9       	ldi	r26, 0x99	; 153
    23c8:	be e3       	ldi	r27, 0x3E	; 62
    23ca:	88 8b       	std	Y+16, r24	; 0x10
    23cc:	99 8b       	std	Y+17, r25	; 0x11
    23ce:	aa 8b       	std	Y+18, r26	; 0x12
    23d0:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    23d2:	68 89       	ldd	r22, Y+16	; 0x10
    23d4:	79 89       	ldd	r23, Y+17	; 0x11
    23d6:	8a 89       	ldd	r24, Y+18	; 0x12
    23d8:	9b 89       	ldd	r25, Y+19	; 0x13
    23da:	2b ea       	ldi	r18, 0xAB	; 171
    23dc:	3a ea       	ldi	r19, 0xAA	; 170
    23de:	4a ea       	ldi	r20, 0xAA	; 170
    23e0:	5e e3       	ldi	r21, 0x3E	; 62
    23e2:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8c 8b       	std	Y+20, r24	; 0x14
    23ec:	9d 8b       	std	Y+21, r25	; 0x15
    23ee:	ae 8b       	std	Y+22, r26	; 0x16
    23f0:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    23f2:	11 e0       	ldi	r17, 0x01	; 1
    23f4:	6c 89       	ldd	r22, Y+20	; 0x14
    23f6:	7d 89       	ldd	r23, Y+21	; 0x15
    23f8:	8e 89       	ldd	r24, Y+22	; 0x16
    23fa:	9f 89       	ldd	r25, Y+23	; 0x17
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	0c f0       	brlt	.+2      	; 0x240e <LCDInit+0x200>
    240c:	10 e0       	ldi	r17, 0x00	; 0
    240e:	11 23       	and	r17, r17
    2410:	19 f0       	breq	.+6      	; 0x2418 <LCDInit+0x20a>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	88 8f       	std	Y+24, r24	; 0x18
    2416:	a3 c0       	rjmp	.+326    	; 0x255e <LCDInit+0x350>
	else if (__tmp > 255)
    2418:	11 e0       	ldi	r17, 0x01	; 1
    241a:	6c 89       	ldd	r22, Y+20	; 0x14
    241c:	7d 89       	ldd	r23, Y+21	; 0x15
    241e:	8e 89       	ldd	r24, Y+22	; 0x16
    2420:	9f 89       	ldd	r25, Y+23	; 0x17
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	53 e4       	ldi	r21, 0x43	; 67
    242a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	0c f0       	brlt	.+2      	; 0x2434 <LCDInit+0x226>
    2432:	10 e0       	ldi	r17, 0x00	; 0
    2434:	11 23       	and	r17, r17
    2436:	09 f4       	brne	.+2      	; 0x243a <LCDInit+0x22c>
    2438:	89 c0       	rjmp	.+274    	; 0x254c <LCDInit+0x33e>
	{
		_delay_ms(__us / 1000.0);
    243a:	68 89       	ldd	r22, Y+16	; 0x10
    243c:	79 89       	ldd	r23, Y+17	; 0x11
    243e:	8a 89       	ldd	r24, Y+18	; 0x12
    2440:	9b 89       	ldd	r25, Y+19	; 0x13
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a e7       	ldi	r20, 0x7A	; 122
    2448:	54 e4       	ldi	r21, 0x44	; 68
    244a:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	89 8f       	std	Y+25, r24	; 0x19
    2454:	9a 8f       	std	Y+26, r25	; 0x1a
    2456:	ab 8f       	std	Y+27, r26	; 0x1b
    2458:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    245a:	69 8d       	ldd	r22, Y+25	; 0x19
    245c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a e7       	ldi	r20, 0x7A	; 122
    2468:	53 e4       	ldi	r21, 0x43	; 67
    246a:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	8d 8f       	std	Y+29, r24	; 0x1d
    2474:	9e 8f       	std	Y+30, r25	; 0x1e
    2476:	af 8f       	std	Y+31, r26	; 0x1f
    2478:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    247a:	11 e0       	ldi	r17, 0x01	; 1
    247c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    247e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2480:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2482:	98 a1       	ldd	r25, Y+32	; 0x20
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	0c f0       	brlt	.+2      	; 0x2496 <LCDInit+0x288>
    2494:	10 e0       	ldi	r17, 0x00	; 0
    2496:	11 23       	and	r17, r17
    2498:	29 f0       	breq	.+10     	; 0x24a4 <LCDInit+0x296>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9a a3       	std	Y+34, r25	; 0x22
    24a0:	89 a3       	std	Y+33, r24	; 0x21
    24a2:	46 c0       	rjmp	.+140    	; 0x2530 <LCDInit+0x322>
	else if (__tmp > 65535)
    24a4:	11 e0       	ldi	r17, 0x01	; 1
    24a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    24aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ac:	98 a1       	ldd	r25, Y+32	; 0x20
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	0c f0       	brlt	.+2      	; 0x24c0 <LCDInit+0x2b2>
    24be:	10 e0       	ldi	r17, 0x00	; 0
    24c0:	11 23       	and	r17, r17
    24c2:	61 f1       	breq	.+88     	; 0x251c <LCDInit+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	69 8d       	ldd	r22, Y+25	; 0x19
    24c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9a a3       	std	Y+34, r25	; 0x22
    24ea:	89 a3       	std	Y+33, r24	; 0x21
    24ec:	12 c0       	rjmp	.+36     	; 0x2512 <LCDInit+0x304>
    24ee:	89 e1       	ldi	r24, 0x19	; 25
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c a3       	std	Y+36, r25	; 0x24
    24f4:	8b a3       	std	Y+35, r24	; 0x23
    24f6:	8b a1       	ldd	r24, Y+35	; 0x23
    24f8:	9c a1       	ldd	r25, Y+36	; 0x24
    24fa:	8c 01       	movw	r16, r24
    24fc:	c8 01       	movw	r24, r16
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCDInit+0x2f0>
    2502:	8c 01       	movw	r16, r24
    2504:	1c a3       	std	Y+36, r17	; 0x24
    2506:	0b a3       	std	Y+35, r16	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	9a a1       	ldd	r25, Y+34	; 0x22
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	9a a3       	std	Y+34, r25	; 0x22
    2510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	89 a1       	ldd	r24, Y+33	; 0x21
    2514:	9a a1       	ldd	r25, Y+34	; 0x22
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	51 f7       	brne	.-44     	; 0x24ee <LCDInit+0x2e0>
    251a:	28 c0       	rjmp	.+80     	; 0x256c <LCDInit+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    251e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2520:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2522:	98 a1       	ldd	r25, Y+32	; 0x20
    2524:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9a a3       	std	Y+34, r25	; 0x22
    252e:	89 a3       	std	Y+33, r24	; 0x21
    2530:	89 a1       	ldd	r24, Y+33	; 0x21
    2532:	9a a1       	ldd	r25, Y+34	; 0x22
    2534:	9e a3       	std	Y+38, r25	; 0x26
    2536:	8d a3       	std	Y+37, r24	; 0x25
    2538:	8d a1       	ldd	r24, Y+37	; 0x25
    253a:	9e a1       	ldd	r25, Y+38	; 0x26
    253c:	8c 01       	movw	r16, r24
    253e:	f8 01       	movw	r30, r16
    2540:	31 97       	sbiw	r30, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <LCDInit+0x332>
    2544:	8f 01       	movw	r16, r30
    2546:	1e a3       	std	Y+38, r17	; 0x26
    2548:	0d a3       	std	Y+37, r16	; 0x25
    254a:	10 c0       	rjmp	.+32     	; 0x256c <LCDInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    254c:	6c 89       	ldd	r22, Y+20	; 0x14
    254e:	7d 89       	ldd	r23, Y+21	; 0x15
    2550:	8e 89       	ldd	r24, Y+22	; 0x16
    2552:	9f 89       	ldd	r25, Y+23	; 0x17
    2554:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	88 8f       	std	Y+24, r24	; 0x18
    255e:	88 8d       	ldd	r24, Y+24	; 0x18
    2560:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2562:	8f a1       	ldd	r24, Y+39	; 0x27
    2564:	18 2f       	mov	r17, r24
    2566:	1a 95       	dec	r17
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCDInit+0x358>
    256a:	1f a3       	std	Y+39, r17	; 0x27

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    256c:	88 e3       	ldi	r24, 0x38	; 56
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	28 e3       	ldi	r18, 0x38	; 56
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	f9 01       	movw	r30, r18
    2576:	20 81       	ld	r18, Z
    2578:	20 61       	ori	r18, 0x10	; 16
    257a:	fc 01       	movw	r30, r24
    257c:	20 83       	st	Z, r18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    257e:	88 e3       	ldi	r24, 0x38	; 56
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	28 e3       	ldi	r18, 0x38	; 56
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	f9 01       	movw	r30, r18
    2588:	20 81       	ld	r18, Z
    258a:	22 60       	ori	r18, 0x02	; 2
    258c:	fc 01       	movw	r30, r24
    258e:	20 83       	st	Z, r18
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e8       	ldi	r26, 0x80	; 128
    2596:	bf e3       	ldi	r27, 0x3F	; 63
    2598:	88 a7       	std	Y+40, r24	; 0x28
    259a:	99 a7       	std	Y+41, r25	; 0x29
    259c:	aa a7       	std	Y+42, r26	; 0x2a
    259e:	bb a7       	std	Y+43, r27	; 0x2b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    25a0:	68 a5       	ldd	r22, Y+40	; 0x28
    25a2:	79 a5       	ldd	r23, Y+41	; 0x29
    25a4:	8a a5       	ldd	r24, Y+42	; 0x2a
    25a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    25a8:	2b ea       	ldi	r18, 0xAB	; 171
    25aa:	3a ea       	ldi	r19, 0xAA	; 170
    25ac:	4a ea       	ldi	r20, 0xAA	; 170
    25ae:	5e e3       	ldi	r21, 0x3E	; 62
    25b0:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	8c a7       	std	Y+44, r24	; 0x2c
    25ba:	9d a7       	std	Y+45, r25	; 0x2d
    25bc:	ae a7       	std	Y+46, r26	; 0x2e
    25be:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    25c0:	11 e0       	ldi	r17, 0x01	; 1
    25c2:	6c a5       	ldd	r22, Y+44	; 0x2c
    25c4:	7d a5       	ldd	r23, Y+45	; 0x2d
    25c6:	8e a5       	ldd	r24, Y+46	; 0x2e
    25c8:	9f a5       	ldd	r25, Y+47	; 0x2f
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <LCDInit+0x3ce>
    25da:	10 e0       	ldi	r17, 0x00	; 0
    25dc:	11 23       	and	r17, r17
    25de:	19 f0       	breq	.+6      	; 0x25e6 <LCDInit+0x3d8>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	88 ab       	std	Y+48, r24	; 0x30
    25e4:	a3 c0       	rjmp	.+326    	; 0x272c <LCDInit+0x51e>
	else if (__tmp > 255)
    25e6:	11 e0       	ldi	r17, 0x01	; 1
    25e8:	6c a5       	ldd	r22, Y+44	; 0x2c
    25ea:	7d a5       	ldd	r23, Y+45	; 0x2d
    25ec:	8e a5       	ldd	r24, Y+46	; 0x2e
    25ee:	9f a5       	ldd	r25, Y+47	; 0x2f
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	53 e4       	ldi	r21, 0x43	; 67
    25f8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	0c f0       	brlt	.+2      	; 0x2602 <LCDInit+0x3f4>
    2600:	10 e0       	ldi	r17, 0x00	; 0
    2602:	11 23       	and	r17, r17
    2604:	09 f4       	brne	.+2      	; 0x2608 <LCDInit+0x3fa>
    2606:	89 c0       	rjmp	.+274    	; 0x271a <LCDInit+0x50c>
	{
		_delay_ms(__us / 1000.0);
    2608:	68 a5       	ldd	r22, Y+40	; 0x28
    260a:	79 a5       	ldd	r23, Y+41	; 0x29
    260c:	8a a5       	ldd	r24, Y+42	; 0x2a
    260e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a e7       	ldi	r20, 0x7A	; 122
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	89 ab       	std	Y+49, r24	; 0x31
    2622:	9a ab       	std	Y+50, r25	; 0x32
    2624:	ab ab       	std	Y+51, r26	; 0x33
    2626:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2628:	69 a9       	ldd	r22, Y+49	; 0x31
    262a:	7a a9       	ldd	r23, Y+50	; 0x32
    262c:	8b a9       	ldd	r24, Y+51	; 0x33
    262e:	9c a9       	ldd	r25, Y+52	; 0x34
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	53 e4       	ldi	r21, 0x43	; 67
    2638:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8d ab       	std	Y+53, r24	; 0x35
    2642:	9e ab       	std	Y+54, r25	; 0x36
    2644:	af ab       	std	Y+55, r26	; 0x37
    2646:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    2648:	11 e0       	ldi	r17, 0x01	; 1
    264a:	6d a9       	ldd	r22, Y+53	; 0x35
    264c:	7e a9       	ldd	r23, Y+54	; 0x36
    264e:	8f a9       	ldd	r24, Y+55	; 0x37
    2650:	98 ad       	ldd	r25, Y+56	; 0x38
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	0c f0       	brlt	.+2      	; 0x2664 <LCDInit+0x456>
    2662:	10 e0       	ldi	r17, 0x00	; 0
    2664:	11 23       	and	r17, r17
    2666:	29 f0       	breq	.+10     	; 0x2672 <LCDInit+0x464>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9a af       	std	Y+58, r25	; 0x3a
    266e:	89 af       	std	Y+57, r24	; 0x39
    2670:	46 c0       	rjmp	.+140    	; 0x26fe <LCDInit+0x4f0>
	else if (__tmp > 65535)
    2672:	11 e0       	ldi	r17, 0x01	; 1
    2674:	6d a9       	ldd	r22, Y+53	; 0x35
    2676:	7e a9       	ldd	r23, Y+54	; 0x36
    2678:	8f a9       	ldd	r24, Y+55	; 0x37
    267a:	98 ad       	ldd	r25, Y+56	; 0x38
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	0c f0       	brlt	.+2      	; 0x268e <LCDInit+0x480>
    268c:	10 e0       	ldi	r17, 0x00	; 0
    268e:	11 23       	and	r17, r17
    2690:	61 f1       	breq	.+88     	; 0x26ea <LCDInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	69 a9       	ldd	r22, Y+49	; 0x31
    2694:	7a a9       	ldd	r23, Y+50	; 0x32
    2696:	8b a9       	ldd	r24, Y+51	; 0x33
    2698:	9c a9       	ldd	r25, Y+52	; 0x34
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9a af       	std	Y+58, r25	; 0x3a
    26b8:	89 af       	std	Y+57, r24	; 0x39
    26ba:	12 c0       	rjmp	.+36     	; 0x26e0 <LCDInit+0x4d2>
    26bc:	89 e1       	ldi	r24, 0x19	; 25
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c af       	std	Y+60, r25	; 0x3c
    26c2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    26c8:	8c 01       	movw	r16, r24
    26ca:	c8 01       	movw	r24, r16
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCDInit+0x4be>
    26d0:	8c 01       	movw	r16, r24
    26d2:	1c af       	std	Y+60, r17	; 0x3c
    26d4:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	89 ad       	ldd	r24, Y+57	; 0x39
    26d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9a af       	std	Y+58, r25	; 0x3a
    26de:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	89 ad       	ldd	r24, Y+57	; 0x39
    26e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	51 f7       	brne	.-44     	; 0x26bc <LCDInit+0x4ae>
    26e8:	28 c0       	rjmp	.+80     	; 0x273a <LCDInit+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	6d a9       	ldd	r22, Y+53	; 0x35
    26ec:	7e a9       	ldd	r23, Y+54	; 0x36
    26ee:	8f a9       	ldd	r24, Y+55	; 0x37
    26f0:	98 ad       	ldd	r25, Y+56	; 0x38
    26f2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9a af       	std	Y+58, r25	; 0x3a
    26fc:	89 af       	std	Y+57, r24	; 0x39
    26fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2700:	9a ad       	ldd	r25, Y+58	; 0x3a
    2702:	9e af       	std	Y+62, r25	; 0x3e
    2704:	8d af       	std	Y+61, r24	; 0x3d
    2706:	8d ad       	ldd	r24, Y+61	; 0x3d
    2708:	9e ad       	ldd	r25, Y+62	; 0x3e
    270a:	8c 01       	movw	r16, r24
    270c:	f8 01       	movw	r30, r16
    270e:	31 97       	sbiw	r30, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCDInit+0x500>
    2712:	8f 01       	movw	r16, r30
    2714:	1e af       	std	Y+62, r17	; 0x3e
    2716:	0d af       	std	Y+61, r16	; 0x3d
    2718:	10 c0       	rjmp	.+32     	; 0x273a <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    271a:	6c a5       	ldd	r22, Y+44	; 0x2c
    271c:	7d a5       	ldd	r23, Y+45	; 0x2d
    271e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2720:	9f a5       	ldd	r25, Y+47	; 0x2f
    2722:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	88 ab       	std	Y+48, r24	; 0x30
    272c:	88 a9       	ldd	r24, Y+48	; 0x30
    272e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2730:	8f ad       	ldd	r24, Y+63	; 0x3f
    2732:	18 2f       	mov	r17, r24
    2734:	1a 95       	dec	r17
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCDInit+0x526>
    2738:	1f af       	std	Y+63, r17	; 0x3f
	_delay_us(1);
	CLEAR_E();
    273a:	88 e3       	ldi	r24, 0x38	; 56
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	28 e3       	ldi	r18, 0x38	; 56
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	f9 01       	movw	r30, r18
    2744:	20 81       	ld	r18, Z
    2746:	2f 7e       	andi	r18, 0xEF	; 239
    2748:	fc 01       	movw	r30, r24
    274a:	20 83       	st	Z, r18
    274c:	9e 01       	movw	r18, r28
    274e:	20 5c       	subi	r18, 0xC0	; 192
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e8       	ldi	r26, 0x80	; 128
    2758:	bf e3       	ldi	r27, 0x3F	; 63
    275a:	f9 01       	movw	r30, r18
    275c:	80 83       	st	Z, r24
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	a2 83       	std	Z+2, r26	; 0x02
    2762:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    2764:	8e 01       	movw	r16, r28
    2766:	0c 5b       	subi	r16, 0xBC	; 188
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	ce 01       	movw	r24, r28
    276c:	80 5c       	subi	r24, 0xC0	; 192
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	fc 01       	movw	r30, r24
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	2b ea       	ldi	r18, 0xAB	; 171
    277c:	3a ea       	ldi	r19, 0xAA	; 170
    277e:	4a ea       	ldi	r20, 0xAA	; 170
    2780:	5e e3       	ldi	r21, 0x3E	; 62
    2782:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	f8 01       	movw	r30, r16
    278c:	80 83       	st	Z, r24
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	a2 83       	std	Z+2, r26	; 0x02
    2792:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2794:	ce 01       	movw	r24, r28
    2796:	8c 5b       	subi	r24, 0xBC	; 188
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	11 e0       	ldi	r17, 0x01	; 1
    279c:	fc 01       	movw	r30, r24
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <LCDInit+0x5aa>
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	11 23       	and	r17, r17
    27ba:	39 f0       	breq	.+14     	; 0x27ca <LCDInit+0x5bc>
		__ticks = 1;
    27bc:	ce 01       	movw	r24, r28
    27be:	88 5b       	subi	r24, 0xB8	; 184
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	21 e0       	ldi	r18, 0x01	; 1
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
    27c8:	05 c1       	rjmp	.+522    	; 0x29d4 <LCDInit+0x7c6>
	else if (__tmp > 255)
    27ca:	ce 01       	movw	r24, r28
    27cc:	8c 5b       	subi	r24, 0xBC	; 188
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	11 e0       	ldi	r17, 0x01	; 1
    27d2:	fc 01       	movw	r30, r24
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	53 e4       	ldi	r21, 0x43	; 67
    27e4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	0c f0       	brlt	.+2      	; 0x27ee <LCDInit+0x5e0>
    27ec:	10 e0       	ldi	r17, 0x00	; 0
    27ee:	11 23       	and	r17, r17
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <LCDInit+0x5e6>
    27f2:	df c0       	rjmp	.+446    	; 0x29b2 <LCDInit+0x7a4>
	{
		_delay_ms(__us / 1000.0);
    27f4:	ce 01       	movw	r24, r28
    27f6:	80 5c       	subi	r24, 0xC0	; 192
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	fc 01       	movw	r30, r24
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a e7       	ldi	r20, 0x7A	; 122
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 12 19 	call	0x3224	; 0x3224 <__divsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 01       	movw	r18, r28
    2816:	27 5b       	subi	r18, 0xB7	; 183
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	f9 01       	movw	r30, r18
    281c:	80 83       	st	Z, r24
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	a2 83       	std	Z+2, r26	; 0x02
    2822:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2824:	8e 01       	movw	r16, r28
    2826:	03 5b       	subi	r16, 0xB3	; 179
    2828:	1f 4f       	sbci	r17, 0xFF	; 255
    282a:	ce 01       	movw	r24, r28
    282c:	87 5b       	subi	r24, 0xB7	; 183
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	fc 01       	movw	r30, r24
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a e7       	ldi	r20, 0x7A	; 122
    2840:	53 e4       	ldi	r21, 0x43	; 67
    2842:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	a2 83       	std	Z+2, r26	; 0x02
    2852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2854:	ce 01       	movw	r24, r28
    2856:	83 5b       	subi	r24, 0xB3	; 179
    2858:	9f 4f       	sbci	r25, 0xFF	; 255
    285a:	11 e0       	ldi	r17, 0x01	; 1
    285c:	fc 01       	movw	r30, r24
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e8       	ldi	r20, 0x80	; 128
    286c:	5f e3       	ldi	r21, 0x3F	; 63
    286e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ltsf2>
    2872:	88 23       	and	r24, r24
    2874:	0c f0       	brlt	.+2      	; 0x2878 <LCDInit+0x66a>
    2876:	10 e0       	ldi	r17, 0x00	; 0
    2878:	11 23       	and	r17, r17
    287a:	49 f0       	breq	.+18     	; 0x288e <LCDInit+0x680>
		__ticks = 1;
    287c:	ce 01       	movw	r24, r28
    287e:	8f 5a       	subi	r24, 0xAF	; 175
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	21 e0       	ldi	r18, 0x01	; 1
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	fc 01       	movw	r30, r24
    2888:	31 83       	std	Z+1, r19	; 0x01
    288a:	20 83       	st	Z, r18
    288c:	74 c0       	rjmp	.+232    	; 0x2976 <LCDInit+0x768>
	else if (__tmp > 65535)
    288e:	ce 01       	movw	r24, r28
    2890:	83 5b       	subi	r24, 0xB3	; 179
    2892:	9f 4f       	sbci	r25, 0xFF	; 255
    2894:	11 e0       	ldi	r17, 0x01	; 1
    2896:	fc 01       	movw	r30, r24
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	0c f0       	brlt	.+2      	; 0x28b2 <LCDInit+0x6a4>
    28b0:	10 e0       	ldi	r17, 0x00	; 0
    28b2:	11 23       	and	r17, r17
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <LCDInit+0x6aa>
    28b6:	4d c0       	rjmp	.+154    	; 0x2952 <LCDInit+0x744>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	ce 01       	movw	r24, r28
    28ba:	87 5b       	subi	r24, 0xB7	; 183
    28bc:	9f 4f       	sbci	r25, 0xFF	; 255
    28be:	fc 01       	movw	r30, r24
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8e 01       	movw	r16, r28
    28da:	0f 5a       	subi	r16, 0xAF	; 175
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	f8 01       	movw	r30, r16
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	27 c0       	rjmp	.+78     	; 0x2940 <LCDInit+0x732>
    28f2:	ce 01       	movw	r24, r28
    28f4:	8d 5a       	subi	r24, 0xAD	; 173
    28f6:	9f 4f       	sbci	r25, 0xFF	; 255
    28f8:	29 e1       	ldi	r18, 0x19	; 25
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	fc 01       	movw	r30, r24
    28fe:	31 83       	std	Z+1, r19	; 0x01
    2900:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2902:	ce 01       	movw	r24, r28
    2904:	8d 5a       	subi	r24, 0xAD	; 173
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	fc 01       	movw	r30, r24
    290a:	80 81       	ld	r24, Z
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	8c 01       	movw	r16, r24
    2910:	c8 01       	movw	r24, r16
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <LCDInit+0x704>
    2916:	8c 01       	movw	r16, r24
    2918:	ce 01       	movw	r24, r28
    291a:	8d 5a       	subi	r24, 0xAD	; 173
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	fc 01       	movw	r30, r24
    2920:	11 83       	std	Z+1, r17	; 0x01
    2922:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	ce 01       	movw	r24, r28
    2926:	8f 5a       	subi	r24, 0xAF	; 175
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	9e 01       	movw	r18, r28
    292c:	2f 5a       	subi	r18, 0xAF	; 175
    292e:	3f 4f       	sbci	r19, 0xFF	; 255
    2930:	f9 01       	movw	r30, r18
    2932:	20 81       	ld	r18, Z
    2934:	31 81       	ldd	r19, Z+1	; 0x01
    2936:	21 50       	subi	r18, 0x01	; 1
    2938:	30 40       	sbci	r19, 0x00	; 0
    293a:	fc 01       	movw	r30, r24
    293c:	31 83       	std	Z+1, r19	; 0x01
    293e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	ce 01       	movw	r24, r28
    2942:	8f 5a       	subi	r24, 0xAF	; 175
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	fc 01       	movw	r30, r24
    2948:	80 81       	ld	r24, Z
    294a:	91 81       	ldd	r25, Z+1	; 0x01
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	89 f6       	brne	.-94     	; 0x28f2 <LCDInit+0x6e4>
    2950:	58 c0       	rjmp	.+176    	; 0x2a02 <LCDInit+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	8e 01       	movw	r16, r28
    2954:	0f 5a       	subi	r16, 0xAF	; 175
    2956:	1f 4f       	sbci	r17, 0xFF	; 255
    2958:	ce 01       	movw	r24, r28
    295a:	83 5b       	subi	r24, 0xB3	; 179
    295c:	9f 4f       	sbci	r25, 0xFF	; 255
    295e:	fc 01       	movw	r30, r24
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	f8 01       	movw	r30, r16
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
    2976:	ce 01       	movw	r24, r28
    2978:	8b 5a       	subi	r24, 0xAB	; 171
    297a:	9f 4f       	sbci	r25, 0xFF	; 255
    297c:	9e 01       	movw	r18, r28
    297e:	2f 5a       	subi	r18, 0xAF	; 175
    2980:	3f 4f       	sbci	r19, 0xFF	; 255
    2982:	f9 01       	movw	r30, r18
    2984:	20 81       	ld	r18, Z
    2986:	31 81       	ldd	r19, Z+1	; 0x01
    2988:	fc 01       	movw	r30, r24
    298a:	31 83       	std	Z+1, r19	; 0x01
    298c:	20 83       	st	Z, r18
    298e:	ce 01       	movw	r24, r28
    2990:	8b 5a       	subi	r24, 0xAB	; 171
    2992:	9f 4f       	sbci	r25, 0xFF	; 255
    2994:	fc 01       	movw	r30, r24
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	8c 01       	movw	r16, r24
    299c:	c8 01       	movw	r24, r16
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <LCDInit+0x790>
    29a2:	8c 01       	movw	r16, r24
    29a4:	ce 01       	movw	r24, r28
    29a6:	8b 5a       	subi	r24, 0xAB	; 171
    29a8:	9f 4f       	sbci	r25, 0xFF	; 255
    29aa:	fc 01       	movw	r30, r24
    29ac:	11 83       	std	Z+1, r17	; 0x01
    29ae:	00 83       	st	Z, r16
    29b0:	28 c0       	rjmp	.+80     	; 0x2a02 <LCDInit+0x7f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29b2:	8e 01       	movw	r16, r28
    29b4:	08 5b       	subi	r16, 0xB8	; 184
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	ce 01       	movw	r24, r28
    29ba:	8c 5b       	subi	r24, 0xBC	; 188
    29bc:	9f 4f       	sbci	r25, 0xFF	; 255
    29be:	fc 01       	movw	r30, r24
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	80 83       	st	Z, r24
    29d4:	ce 01       	movw	r24, r28
    29d6:	89 5a       	subi	r24, 0xA9	; 169
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	9e 01       	movw	r18, r28
    29dc:	28 5b       	subi	r18, 0xB8	; 184
    29de:	3f 4f       	sbci	r19, 0xFF	; 255
    29e0:	f9 01       	movw	r30, r18
    29e2:	20 81       	ld	r18, Z
    29e4:	fc 01       	movw	r30, r24
    29e6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29e8:	ce 01       	movw	r24, r28
    29ea:	89 5a       	subi	r24, 0xA9	; 169
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	fc 01       	movw	r30, r24
    29f0:	80 81       	ld	r24, Z
    29f2:	18 2f       	mov	r17, r24
    29f4:	1a 95       	dec	r17
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <LCDInit+0x7e6>
    29f8:	ce 01       	movw	r24, r28
    29fa:	89 5a       	subi	r24, 0xA9	; 169
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	fc 01       	movw	r30, r24
    2a00:	10 83       	st	Z, r17
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    2a02:	0e 94 39 08 	call	0x1072	; 0x1072 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    2a06:	ce 01       	movw	r24, r28
    2a08:	88 5a       	subi	r24, 0xA8	; 168
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	80 81       	ld	r24, Z
    2a10:	8c 60       	ori	r24, 0x0C	; 12
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    2a18:	88 e2       	ldi	r24, 0x28	; 40
    2a1a:	60 e0       	ldi	r22, 0x00	; 0
    2a1c:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    2a20:	80 e4       	ldi	r24, 0x40	; 64
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    2a28:	19 82       	std	Y+1, r1	; 0x01
    2a2a:	0d c0       	rjmp	.+26     	; 0x2a46 <LCDInit+0x838>
		LCDData(__cgram[__i]);
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	88 2f       	mov	r24, r24
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	86 5f       	subi	r24, 0xF6	; 246
    2a34:	9e 4f       	sbci	r25, 0xFE	; 254
    2a36:	fc 01       	movw	r30, r24
    2a38:	80 81       	ld	r24, Z
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	80 34       	cpi	r24, 0x40	; 64
    2a4a:	80 f3       	brcs	.-32     	; 0x2a2c <LCDInit+0x81e>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCDGotoXY>

}
    2a54:	c8 5a       	subi	r28, 0xA8	; 168
    2a56:	df 4f       	sbci	r29, 0xFF	; 255
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	08 95       	ret

00002a6c <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <LCDWriteString+0x6>
    2a72:	0f 92       	push	r0
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	9b 83       	std	Y+3, r25	; 0x03
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    2a7c:	34 c0       	rjmp	.+104    	; 0x2ae6 <LCDWriteString+0x7a>
 {
 	//Custom Char Support
	if(*msg=='%')
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	fc 01       	movw	r30, r24
    2a84:	80 81       	ld	r24, Z
    2a86:	85 32       	cpi	r24, 0x25	; 37
    2a88:	11 f5       	brne	.+68     	; 0x2ace <LCDWriteString+0x62>
	{
		msg++;
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	01 96       	adiw	r24, 0x01	; 1
    2a90:	9b 83       	std	Y+3, r25	; 0x03
    2a92:	8a 83       	std	Y+2, r24	; 0x02
		int8_t cc=*msg-'0';
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	fc 01       	movw	r30, r24
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 53       	subi	r24, 0x30	; 48
    2a9e:	89 83       	std	Y+1, r24	; 0x01

		if(cc>=0 && cc<=7)
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	88 23       	and	r24, r24
    2aa4:	44 f0       	brlt	.+16     	; 0x2ab6 <LCDWriteString+0x4a>
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	88 30       	cpi	r24, 0x08	; 8
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <LCDWriteString+0x4a>
		{
			LCDData(cc);
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
    2ab4:	13 c0       	rjmp	.+38     	; 0x2adc <LCDWriteString+0x70>
		}
		else
		{
			LCDData('%');
    2ab6:	85 e2       	ldi	r24, 0x25	; 37
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
			LCDData(*msg);
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	80 81       	ld	r24, Z
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
    2acc:	07 c0       	rjmp	.+14     	; 0x2adc <LCDWriteString+0x70>
		}
	}
	else
	{
		LCDData(*msg);
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	80 81       	ld	r24, Z
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
	}
	msg++;
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	9b 83       	std	Y+3, r25	; 0x03
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aea:	fc 01       	movw	r30, r24
    2aec:	80 81       	ld	r24, Z
    2aee:	88 23       	and	r24, r24
    2af0:	31 f6       	brne	.-116    	; 0x2a7e <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	2d 97       	sbiw	r28, 0x0d	; 13
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	9b 87       	std	Y+11, r25	; 0x0b
    2b14:	8a 87       	std	Y+10, r24	; 0x0a
    2b16:	7d 87       	std	Y+13, r23	; 0x0d
    2b18:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    2b1a:	25 e0       	ldi	r18, 0x05	; 5
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	05 96       	adiw	r24, 0x05	; 5
    2b20:	fc 01       	movw	r30, r24
    2b22:	32 2f       	mov	r19, r18
    2b24:	11 92       	st	Z+, r1
    2b26:	3a 95       	dec	r19
    2b28:	e9 f7       	brne	.-6      	; 0x2b24 <LCDWriteInt+0x26>
	int i=4,j=0;
    2b2a:	84 e0       	ldi	r24, 0x04	; 4
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9a 83       	std	Y+2, r25	; 0x02
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	1c 82       	std	Y+4, r1	; 0x04
    2b34:	1b 82       	std	Y+3, r1	; 0x03
	while(val)
    2b36:	20 c0       	rjmp	.+64     	; 0x2b78 <LCDWriteInt+0x7a>
	{
	str[i]=val%10;
    2b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b3c:	2a e0       	ldi	r18, 0x0A	; 10
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	b9 01       	movw	r22, r18
    2b42:	0e 94 32 1c 	call	0x3864	; 0x3864 <__divmodhi4>
    2b46:	48 2f       	mov	r20, r24
    2b48:	9e 01       	movw	r18, r28
    2b4a:	2b 5f       	subi	r18, 0xFB	; 251
    2b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	fc 01       	movw	r30, r24
    2b58:	40 83       	st	Z, r20
	val=val/10;
    2b5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b5e:	2a e0       	ldi	r18, 0x0A	; 10
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	b9 01       	movw	r22, r18
    2b64:	0e 94 32 1c 	call	0x3864	; 0x3864 <__divmodhi4>
    2b68:	9b 01       	movw	r18, r22
    2b6a:	3b 87       	std	Y+11, r19	; 0x0b
    2b6c:	2a 87       	std	Y+10, r18	; 0x0a
	i--;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    2b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	e1 f6       	brne	.-72     	; 0x2b38 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    2b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b82:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b84:	ff ef       	ldi	r31, 0xFF	; 255
    2b86:	8f 3f       	cpi	r24, 0xFF	; 255
    2b88:	9f 07       	cpc	r25, r31
    2b8a:	91 f4       	brne	.+36     	; 0x2bb0 <LCDWriteInt+0xb2>
		while(str[j]==0) j++;
    2b8c:	05 c0       	rjmp	.+10     	; 0x2b98 <LCDWriteInt+0x9a>
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
    2b98:	9e 01       	movw	r18, r28
    2b9a:	2b 5f       	subi	r18, 0xFB	; 251
    2b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	82 0f       	add	r24, r18
    2ba4:	93 1f       	adc	r25, r19
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 23       	and	r24, r24
    2bac:	81 f3       	breq	.-32     	; 0x2b8e <LCDWriteInt+0x90>
    2bae:	0a c0       	rjmp	.+20     	; 0x2bc4 <LCDWriteInt+0xc6>
	else
		j=5-field_length;
    2bb0:	25 e0       	ldi	r18, 0x05	; 5
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bb8:	a9 01       	movw	r20, r18
    2bba:	48 1b       	sub	r20, r24
    2bbc:	59 0b       	sbc	r21, r25
    2bbe:	ca 01       	movw	r24, r20
    2bc0:	9c 83       	std	Y+4, r25	; 0x04
    2bc2:	8b 83       	std	Y+3, r24	; 0x03

	if(val<0) LCDData('-');
    2bc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc8:	99 23       	and	r25, r25
    2bca:	24 f4       	brge	.+8      	; 0x2bd4 <LCDWriteInt+0xd6>
    2bcc:	8d e2       	ldi	r24, 0x2D	; 45
    2bce:	61 e0       	ldi	r22, 0x01	; 1
    2bd0:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
	for(i=j;i<5;i++)
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	12 c0       	rjmp	.+36     	; 0x2c02 <LCDWriteInt+0x104>
	{
	LCDData(48+str[i]);
    2bde:	9e 01       	movw	r18, r28
    2be0:	2b 5f       	subi	r18, 0xFB	; 251
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	82 0f       	add	r24, r18
    2bea:	93 1f       	adc	r25, r19
    2bec:	fc 01       	movw	r30, r24
    2bee:	80 81       	ld	r24, Z
    2bf0:	80 5d       	subi	r24, 0xD0	; 208
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	01 96       	adiw	r24, 0x01	; 1
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	85 30       	cpi	r24, 0x05	; 5
    2c08:	91 05       	cpc	r25, r1
    2c0a:	4c f3       	brlt	.-46     	; 0x2bde <LCDWriteInt+0xe0>
	{
	LCDData(48+str[i]);
	}
}
    2c0c:	2d 96       	adiw	r28, 0x0d	; 13
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <LCDGotoXY+0x6>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	6a 83       	std	Y+2, r22	; 0x02
 	if(x>=20) return;
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	84 31       	cpi	r24, 0x14	; 20
    2c30:	28 f5       	brcc	.+74     	; 0x2c7c <LCDGotoXY+0x5e>

	#ifdef LCD_TYPE_204
	
	switch(y)
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	51 f0       	breq	.+20     	; 0x2c52 <LCDGotoXY+0x34>
    2c3e:	82 30       	cpi	r24, 0x02	; 2
    2c40:	91 05       	cpc	r25, r1
    2c42:	9c f0       	brlt	.+38     	; 0x2c6a <LCDGotoXY+0x4c>
    2c44:	82 30       	cpi	r24, 0x02	; 2
    2c46:	91 05       	cpc	r25, r1
    2c48:	41 f0       	breq	.+16     	; 0x2c5a <LCDGotoXY+0x3c>
    2c4a:	83 30       	cpi	r24, 0x03	; 3
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	49 f0       	breq	.+18     	; 0x2c62 <LCDGotoXY+0x44>
    2c50:	0d c0       	rjmp	.+26     	; 0x2c6c <LCDGotoXY+0x4e>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	89 83       	std	Y+1, r24	; 0x01
			break;
    2c58:	09 c0       	rjmp	.+18     	; 0x2c6c <LCDGotoXY+0x4e>
		case 2:
			x+=0x14;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	8c 5e       	subi	r24, 0xEC	; 236
    2c5e:	89 83       	std	Y+1, r24	; 0x01
			break;
    2c60:	05 c0       	rjmp	.+10     	; 0x2c6c <LCDGotoXY+0x4e>
		case 3:
			x+=0x54;
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	8c 5a       	subi	r24, 0xAC	; 172
    2c66:	89 83       	std	Y+1, r24	; 0x01
			break;
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <LCDGotoXY+0x4e>
	#ifdef LCD_TYPE_204
	
	switch(y)
	{
		case 0:
			break;
    2c6a:	00 00       	nop
			break;
	}

	#endif

	x|=0b10000000;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	80 68       	ori	r24, 0x80	; 128
    2c70:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	60 e0       	ldi	r22, 0x00	; 0
    2c76:	0e 94 1a 02 	call	0x434	; 0x434 <LCDByte>
    2c7a:	01 c0       	rjmp	.+2      	; 0x2c7e <LCDGotoXY+0x60>
	LCDData(48+str[i]);
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
    2c7c:	00 00       	nop

	#endif

	x|=0b10000000;
  	LCDCmd(x);
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <__fixunssfsi>:
    2c88:	ef 92       	push	r14
    2c8a:	ff 92       	push	r15
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	7b 01       	movw	r14, r22
    2c92:	8c 01       	movw	r16, r24
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	5f e4       	ldi	r21, 0x4F	; 79
    2c9c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__gesf2>
    2ca0:	87 fd       	sbrc	r24, 7
    2ca2:	11 c0       	rjmp	.+34     	; 0x2cc6 <__fixunssfsi+0x3e>
    2ca4:	c8 01       	movw	r24, r16
    2ca6:	b7 01       	movw	r22, r14
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	5f e4       	ldi	r21, 0x4F	; 79
    2cb0:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__subsf3>
    2cb4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__fixsfsi>
    2cb8:	9b 01       	movw	r18, r22
    2cba:	ac 01       	movw	r20, r24
    2cbc:	20 50       	subi	r18, 0x00	; 0
    2cbe:	30 40       	sbci	r19, 0x00	; 0
    2cc0:	40 40       	sbci	r20, 0x00	; 0
    2cc2:	50 48       	sbci	r21, 0x80	; 128
    2cc4:	06 c0       	rjmp	.+12     	; 0x2cd2 <__fixunssfsi+0x4a>
    2cc6:	c8 01       	movw	r24, r16
    2cc8:	b7 01       	movw	r22, r14
    2cca:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__fixsfsi>
    2cce:	9b 01       	movw	r18, r22
    2cd0:	ac 01       	movw	r20, r24
    2cd2:	b9 01       	movw	r22, r18
    2cd4:	ca 01       	movw	r24, r20
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	08 95       	ret

00002ce0 <_fpadd_parts>:
    2ce0:	a0 e0       	ldi	r26, 0x00	; 0
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e6 e7       	ldi	r30, 0x76	; 118
    2ce6:	f6 e1       	ldi	r31, 0x16	; 22
    2ce8:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__prologue_saves__+0x8>
    2cec:	fc 01       	movw	r30, r24
    2cee:	ea 01       	movw	r28, r20
    2cf0:	80 81       	ld	r24, Z
    2cf2:	82 30       	cpi	r24, 0x02	; 2
    2cf4:	08 f4       	brcc	.+2      	; 0x2cf8 <_fpadd_parts+0x18>
    2cf6:	38 c1       	rjmp	.+624    	; 0x2f68 <_fpadd_parts+0x288>
    2cf8:	db 01       	movw	r26, r22
    2cfa:	9c 91       	ld	r25, X
    2cfc:	92 30       	cpi	r25, 0x02	; 2
    2cfe:	08 f4       	brcc	.+2      	; 0x2d02 <_fpadd_parts+0x22>
    2d00:	30 c1       	rjmp	.+608    	; 0x2f62 <_fpadd_parts+0x282>
    2d02:	84 30       	cpi	r24, 0x04	; 4
    2d04:	59 f4       	brne	.+22     	; 0x2d1c <_fpadd_parts+0x3c>
    2d06:	94 30       	cpi	r25, 0x04	; 4
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <_fpadd_parts+0x2c>
    2d0a:	2e c1       	rjmp	.+604    	; 0x2f68 <_fpadd_parts+0x288>
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	11 96       	adiw	r26, 0x01	; 1
    2d10:	8c 91       	ld	r24, X
    2d12:	11 97       	sbiw	r26, 0x01	; 1
    2d14:	98 17       	cp	r25, r24
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <_fpadd_parts+0x3a>
    2d18:	21 c1       	rjmp	.+578    	; 0x2f5c <_fpadd_parts+0x27c>
    2d1a:	26 c1       	rjmp	.+588    	; 0x2f68 <_fpadd_parts+0x288>
    2d1c:	94 30       	cpi	r25, 0x04	; 4
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <_fpadd_parts+0x42>
    2d20:	20 c1       	rjmp	.+576    	; 0x2f62 <_fpadd_parts+0x282>
    2d22:	92 30       	cpi	r25, 0x02	; 2
    2d24:	b1 f4       	brne	.+44     	; 0x2d52 <_fpadd_parts+0x72>
    2d26:	82 30       	cpi	r24, 0x02	; 2
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <_fpadd_parts+0x4c>
    2d2a:	1e c1       	rjmp	.+572    	; 0x2f68 <_fpadd_parts+0x288>
    2d2c:	ca 01       	movw	r24, r20
    2d2e:	af 01       	movw	r20, r30
    2d30:	28 e0       	ldi	r18, 0x08	; 8
    2d32:	da 01       	movw	r26, r20
    2d34:	0d 90       	ld	r0, X+
    2d36:	ad 01       	movw	r20, r26
    2d38:	dc 01       	movw	r26, r24
    2d3a:	0d 92       	st	X+, r0
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	21 50       	subi	r18, 0x01	; 1
    2d40:	c1 f7       	brne	.-16     	; 0x2d32 <_fpadd_parts+0x52>
    2d42:	db 01       	movw	r26, r22
    2d44:	11 96       	adiw	r26, 0x01	; 1
    2d46:	8c 91       	ld	r24, X
    2d48:	11 97       	sbiw	r26, 0x01	; 1
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	89 23       	and	r24, r25
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	0a c1       	rjmp	.+532    	; 0x2f66 <_fpadd_parts+0x286>
    2d52:	82 30       	cpi	r24, 0x02	; 2
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <_fpadd_parts+0x78>
    2d56:	05 c1       	rjmp	.+522    	; 0x2f62 <_fpadd_parts+0x282>
    2d58:	c2 80       	ldd	r12, Z+2	; 0x02
    2d5a:	d3 80       	ldd	r13, Z+3	; 0x03
    2d5c:	db 01       	movw	r26, r22
    2d5e:	12 96       	adiw	r26, 0x02	; 2
    2d60:	6d 90       	ld	r6, X+
    2d62:	7c 90       	ld	r7, X
    2d64:	13 97       	sbiw	r26, 0x03	; 3
    2d66:	24 81       	ldd	r18, Z+4	; 0x04
    2d68:	35 81       	ldd	r19, Z+5	; 0x05
    2d6a:	46 81       	ldd	r20, Z+6	; 0x06
    2d6c:	57 81       	ldd	r21, Z+7	; 0x07
    2d6e:	14 96       	adiw	r26, 0x04	; 4
    2d70:	ed 90       	ld	r14, X+
    2d72:	fd 90       	ld	r15, X+
    2d74:	0d 91       	ld	r16, X+
    2d76:	1c 91       	ld	r17, X
    2d78:	17 97       	sbiw	r26, 0x07	; 7
    2d7a:	c6 01       	movw	r24, r12
    2d7c:	86 19       	sub	r24, r6
    2d7e:	97 09       	sbc	r25, r7
    2d80:	5c 01       	movw	r10, r24
    2d82:	97 ff       	sbrs	r25, 7
    2d84:	04 c0       	rjmp	.+8      	; 0x2d8e <_fpadd_parts+0xae>
    2d86:	aa 24       	eor	r10, r10
    2d88:	bb 24       	eor	r11, r11
    2d8a:	a8 1a       	sub	r10, r24
    2d8c:	b9 0a       	sbc	r11, r25
    2d8e:	b0 e2       	ldi	r27, 0x20	; 32
    2d90:	ab 16       	cp	r10, r27
    2d92:	b1 04       	cpc	r11, r1
    2d94:	0c f0       	brlt	.+2      	; 0x2d98 <_fpadd_parts+0xb8>
    2d96:	61 c0       	rjmp	.+194    	; 0x2e5a <_fpadd_parts+0x17a>
    2d98:	18 16       	cp	r1, r24
    2d9a:	19 06       	cpc	r1, r25
    2d9c:	6c f5       	brge	.+90     	; 0x2df8 <_fpadd_parts+0x118>
    2d9e:	37 01       	movw	r6, r14
    2da0:	48 01       	movw	r8, r16
    2da2:	0a 2c       	mov	r0, r10
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <_fpadd_parts+0xce>
    2da6:	96 94       	lsr	r9
    2da8:	87 94       	ror	r8
    2daa:	77 94       	ror	r7
    2dac:	67 94       	ror	r6
    2dae:	0a 94       	dec	r0
    2db0:	d2 f7       	brpl	.-12     	; 0x2da6 <_fpadd_parts+0xc6>
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e0       	ldi	r26, 0x00	; 0
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	0a 2c       	mov	r0, r10
    2dbc:	04 c0       	rjmp	.+8      	; 0x2dc6 <_fpadd_parts+0xe6>
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	aa 1f       	adc	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	0a 94       	dec	r0
    2dc8:	d2 f7       	brpl	.-12     	; 0x2dbe <_fpadd_parts+0xde>
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	a1 09       	sbc	r26, r1
    2dce:	b1 09       	sbc	r27, r1
    2dd0:	8e 21       	and	r24, r14
    2dd2:	9f 21       	and	r25, r15
    2dd4:	a0 23       	and	r26, r16
    2dd6:	b1 23       	and	r27, r17
    2dd8:	ee 24       	eor	r14, r14
    2dda:	ff 24       	eor	r15, r15
    2ddc:	87 01       	movw	r16, r14
    2dde:	e3 94       	inc	r14
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	a1 05       	cpc	r26, r1
    2de4:	b1 05       	cpc	r27, r1
    2de6:	19 f4       	brne	.+6      	; 0x2dee <_fpadd_parts+0x10e>
    2de8:	ee 24       	eor	r14, r14
    2dea:	ff 24       	eor	r15, r15
    2dec:	87 01       	movw	r16, r14
    2dee:	e6 28       	or	r14, r6
    2df0:	f7 28       	or	r15, r7
    2df2:	08 29       	or	r16, r8
    2df4:	19 29       	or	r17, r9
    2df6:	3c c0       	rjmp	.+120    	; 0x2e70 <_fpadd_parts+0x190>
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	d1 f1       	breq	.+116    	; 0x2e70 <_fpadd_parts+0x190>
    2dfc:	ca 0c       	add	r12, r10
    2dfe:	db 1c       	adc	r13, r11
    2e00:	39 01       	movw	r6, r18
    2e02:	4a 01       	movw	r8, r20
    2e04:	0a 2c       	mov	r0, r10
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <_fpadd_parts+0x130>
    2e08:	96 94       	lsr	r9
    2e0a:	87 94       	ror	r8
    2e0c:	77 94       	ror	r7
    2e0e:	67 94       	ror	r6
    2e10:	0a 94       	dec	r0
    2e12:	d2 f7       	brpl	.-12     	; 0x2e08 <_fpadd_parts+0x128>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	a0 e0       	ldi	r26, 0x00	; 0
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	0a 2c       	mov	r0, r10
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <_fpadd_parts+0x148>
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	aa 1f       	adc	r26, r26
    2e26:	bb 1f       	adc	r27, r27
    2e28:	0a 94       	dec	r0
    2e2a:	d2 f7       	brpl	.-12     	; 0x2e20 <_fpadd_parts+0x140>
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	a1 09       	sbc	r26, r1
    2e30:	b1 09       	sbc	r27, r1
    2e32:	82 23       	and	r24, r18
    2e34:	93 23       	and	r25, r19
    2e36:	a4 23       	and	r26, r20
    2e38:	b5 23       	and	r27, r21
    2e3a:	21 e0       	ldi	r18, 0x01	; 1
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	a1 05       	cpc	r26, r1
    2e46:	b1 05       	cpc	r27, r1
    2e48:	19 f4       	brne	.+6      	; 0x2e50 <_fpadd_parts+0x170>
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	a9 01       	movw	r20, r18
    2e50:	26 29       	or	r18, r6
    2e52:	37 29       	or	r19, r7
    2e54:	48 29       	or	r20, r8
    2e56:	59 29       	or	r21, r9
    2e58:	0b c0       	rjmp	.+22     	; 0x2e70 <_fpadd_parts+0x190>
    2e5a:	6c 14       	cp	r6, r12
    2e5c:	7d 04       	cpc	r7, r13
    2e5e:	24 f4       	brge	.+8      	; 0x2e68 <_fpadd_parts+0x188>
    2e60:	ee 24       	eor	r14, r14
    2e62:	ff 24       	eor	r15, r15
    2e64:	87 01       	movw	r16, r14
    2e66:	04 c0       	rjmp	.+8      	; 0x2e70 <_fpadd_parts+0x190>
    2e68:	63 01       	movw	r12, r6
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	a9 01       	movw	r20, r18
    2e70:	81 81       	ldd	r24, Z+1	; 0x01
    2e72:	fb 01       	movw	r30, r22
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	89 17       	cp	r24, r25
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <_fpadd_parts+0x19c>
    2e7a:	45 c0       	rjmp	.+138    	; 0x2f06 <_fpadd_parts+0x226>
    2e7c:	88 23       	and	r24, r24
    2e7e:	49 f0       	breq	.+18     	; 0x2e92 <_fpadd_parts+0x1b2>
    2e80:	d8 01       	movw	r26, r16
    2e82:	c7 01       	movw	r24, r14
    2e84:	82 1b       	sub	r24, r18
    2e86:	93 0b       	sbc	r25, r19
    2e88:	a4 0b       	sbc	r26, r20
    2e8a:	b5 0b       	sbc	r27, r21
    2e8c:	9c 01       	movw	r18, r24
    2e8e:	ad 01       	movw	r20, r26
    2e90:	04 c0       	rjmp	.+8      	; 0x2e9a <_fpadd_parts+0x1ba>
    2e92:	2e 19       	sub	r18, r14
    2e94:	3f 09       	sbc	r19, r15
    2e96:	40 0b       	sbc	r20, r16
    2e98:	51 0b       	sbc	r21, r17
    2e9a:	57 fd       	sbrc	r21, 7
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <_fpadd_parts+0x1c6>
    2e9e:	19 82       	std	Y+1, r1	; 0x01
    2ea0:	db 82       	std	Y+3, r13	; 0x03
    2ea2:	ca 82       	std	Y+2, r12	; 0x02
    2ea4:	0b c0       	rjmp	.+22     	; 0x2ebc <_fpadd_parts+0x1dc>
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	db 82       	std	Y+3, r13	; 0x03
    2eac:	ca 82       	std	Y+2, r12	; 0x02
    2eae:	50 95       	com	r21
    2eb0:	40 95       	com	r20
    2eb2:	30 95       	com	r19
    2eb4:	21 95       	neg	r18
    2eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb8:	4f 4f       	sbci	r20, 0xFF	; 255
    2eba:	5f 4f       	sbci	r21, 0xFF	; 255
    2ebc:	2c 83       	std	Y+4, r18	; 0x04
    2ebe:	3d 83       	std	Y+5, r19	; 0x05
    2ec0:	4e 83       	std	Y+6, r20	; 0x06
    2ec2:	5f 83       	std	Y+7, r21	; 0x07
    2ec4:	0d c0       	rjmp	.+26     	; 0x2ee0 <_fpadd_parts+0x200>
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	aa 1f       	adc	r26, r26
    2ecc:	bb 1f       	adc	r27, r27
    2ece:	8c 83       	std	Y+4, r24	; 0x04
    2ed0:	9d 83       	std	Y+5, r25	; 0x05
    2ed2:	ae 83       	std	Y+6, r26	; 0x06
    2ed4:	bf 83       	std	Y+7, r27	; 0x07
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9b 83       	std	Y+3, r25	; 0x03
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee4:	ae 81       	ldd	r26, Y+6	; 0x06
    2ee6:	bf 81       	ldd	r27, Y+7	; 0x07
    2ee8:	9c 01       	movw	r18, r24
    2eea:	ad 01       	movw	r20, r26
    2eec:	21 50       	subi	r18, 0x01	; 1
    2eee:	30 40       	sbci	r19, 0x00	; 0
    2ef0:	40 40       	sbci	r20, 0x00	; 0
    2ef2:	50 40       	sbci	r21, 0x00	; 0
    2ef4:	2f 3f       	cpi	r18, 0xFF	; 255
    2ef6:	ef ef       	ldi	r30, 0xFF	; 255
    2ef8:	3e 07       	cpc	r19, r30
    2efa:	ef ef       	ldi	r30, 0xFF	; 255
    2efc:	4e 07       	cpc	r20, r30
    2efe:	ef e3       	ldi	r30, 0x3F	; 63
    2f00:	5e 07       	cpc	r21, r30
    2f02:	08 f3       	brcs	.-62     	; 0x2ec6 <_fpadd_parts+0x1e6>
    2f04:	0b c0       	rjmp	.+22     	; 0x2f1c <_fpadd_parts+0x23c>
    2f06:	89 83       	std	Y+1, r24	; 0x01
    2f08:	db 82       	std	Y+3, r13	; 0x03
    2f0a:	ca 82       	std	Y+2, r12	; 0x02
    2f0c:	2e 0d       	add	r18, r14
    2f0e:	3f 1d       	adc	r19, r15
    2f10:	40 1f       	adc	r20, r16
    2f12:	51 1f       	adc	r21, r17
    2f14:	2c 83       	std	Y+4, r18	; 0x04
    2f16:	3d 83       	std	Y+5, r19	; 0x05
    2f18:	4e 83       	std	Y+6, r20	; 0x06
    2f1a:	5f 83       	std	Y+7, r21	; 0x07
    2f1c:	83 e0       	ldi	r24, 0x03	; 3
    2f1e:	88 83       	st	Y, r24
    2f20:	2c 81       	ldd	r18, Y+4	; 0x04
    2f22:	3d 81       	ldd	r19, Y+5	; 0x05
    2f24:	4e 81       	ldd	r20, Y+6	; 0x06
    2f26:	5f 81       	ldd	r21, Y+7	; 0x07
    2f28:	57 ff       	sbrs	r21, 7
    2f2a:	1d c0       	rjmp	.+58     	; 0x2f66 <_fpadd_parts+0x286>
    2f2c:	da 01       	movw	r26, r20
    2f2e:	c9 01       	movw	r24, r18
    2f30:	81 70       	andi	r24, 0x01	; 1
    2f32:	90 70       	andi	r25, 0x00	; 0
    2f34:	a0 70       	andi	r26, 0x00	; 0
    2f36:	b0 70       	andi	r27, 0x00	; 0
    2f38:	56 95       	lsr	r21
    2f3a:	47 95       	ror	r20
    2f3c:	37 95       	ror	r19
    2f3e:	27 95       	ror	r18
    2f40:	82 2b       	or	r24, r18
    2f42:	93 2b       	or	r25, r19
    2f44:	a4 2b       	or	r26, r20
    2f46:	b5 2b       	or	r27, r21
    2f48:	8c 83       	std	Y+4, r24	; 0x04
    2f4a:	9d 83       	std	Y+5, r25	; 0x05
    2f4c:	ae 83       	std	Y+6, r26	; 0x06
    2f4e:	bf 83       	std	Y+7, r27	; 0x07
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	9b 83       	std	Y+3, r25	; 0x03
    2f58:	8a 83       	std	Y+2, r24	; 0x02
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <_fpadd_parts+0x286>
    2f5c:	ea e4       	ldi	r30, 0x4A	; 74
    2f5e:	f1 e0       	ldi	r31, 0x01	; 1
    2f60:	03 c0       	rjmp	.+6      	; 0x2f68 <_fpadd_parts+0x288>
    2f62:	fb 01       	movw	r30, r22
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <_fpadd_parts+0x288>
    2f66:	fe 01       	movw	r30, r28
    2f68:	cf 01       	movw	r24, r30
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	ee e0       	ldi	r30, 0x0E	; 14
    2f70:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__epilogue_restores__+0x8>

00002f74 <__addsf3>:
    2f74:	a0 e2       	ldi	r26, 0x20	; 32
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e0 ec       	ldi	r30, 0xC0	; 192
    2f7a:	f7 e1       	ldi	r31, 0x17	; 23
    2f7c:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__+0x18>
    2f80:	69 83       	std	Y+1, r22	; 0x01
    2f82:	7a 83       	std	Y+2, r23	; 0x02
    2f84:	8b 83       	std	Y+3, r24	; 0x03
    2f86:	9c 83       	std	Y+4, r25	; 0x04
    2f88:	2d 83       	std	Y+5, r18	; 0x05
    2f8a:	3e 83       	std	Y+6, r19	; 0x06
    2f8c:	4f 83       	std	Y+7, r20	; 0x07
    2f8e:	58 87       	std	Y+8, r21	; 0x08
    2f90:	89 e0       	ldi	r24, 0x09	; 9
    2f92:	e8 2e       	mov	r14, r24
    2f94:	f1 2c       	mov	r15, r1
    2f96:	ec 0e       	add	r14, r28
    2f98:	fd 1e       	adc	r15, r29
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	b7 01       	movw	r22, r14
    2fa0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    2fa4:	8e 01       	movw	r16, r28
    2fa6:	0f 5e       	subi	r16, 0xEF	; 239
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	ce 01       	movw	r24, r28
    2fac:	05 96       	adiw	r24, 0x05	; 5
    2fae:	b8 01       	movw	r22, r16
    2fb0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    2fb4:	c7 01       	movw	r24, r14
    2fb6:	b8 01       	movw	r22, r16
    2fb8:	ae 01       	movw	r20, r28
    2fba:	47 5e       	subi	r20, 0xE7	; 231
    2fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbe:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_fpadd_parts>
    2fc2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__pack_f>
    2fc6:	a0 96       	adiw	r28, 0x20	; 32
    2fc8:	e6 e0       	ldi	r30, 0x06	; 6
    2fca:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__+0x18>

00002fce <__subsf3>:
    2fce:	a0 e2       	ldi	r26, 0x20	; 32
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	ed ee       	ldi	r30, 0xED	; 237
    2fd4:	f7 e1       	ldi	r31, 0x17	; 23
    2fd6:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__+0x18>
    2fda:	69 83       	std	Y+1, r22	; 0x01
    2fdc:	7a 83       	std	Y+2, r23	; 0x02
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	2d 83       	std	Y+5, r18	; 0x05
    2fe4:	3e 83       	std	Y+6, r19	; 0x06
    2fe6:	4f 83       	std	Y+7, r20	; 0x07
    2fe8:	58 87       	std	Y+8, r21	; 0x08
    2fea:	8e 01       	movw	r16, r28
    2fec:	07 5f       	subi	r16, 0xF7	; 247
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	01 96       	adiw	r24, 0x01	; 1
    2ff4:	b8 01       	movw	r22, r16
    2ff6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    2ffa:	91 e1       	ldi	r25, 0x11	; 17
    2ffc:	e9 2e       	mov	r14, r25
    2ffe:	f1 2c       	mov	r15, r1
    3000:	ec 0e       	add	r14, r28
    3002:	fd 1e       	adc	r15, r29
    3004:	ce 01       	movw	r24, r28
    3006:	05 96       	adiw	r24, 0x05	; 5
    3008:	b7 01       	movw	r22, r14
    300a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    300e:	8a 89       	ldd	r24, Y+18	; 0x12
    3010:	91 e0       	ldi	r25, 0x01	; 1
    3012:	89 27       	eor	r24, r25
    3014:	8a 8b       	std	Y+18, r24	; 0x12
    3016:	c8 01       	movw	r24, r16
    3018:	b7 01       	movw	r22, r14
    301a:	ae 01       	movw	r20, r28
    301c:	47 5e       	subi	r20, 0xE7	; 231
    301e:	5f 4f       	sbci	r21, 0xFF	; 255
    3020:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_fpadd_parts>
    3024:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__pack_f>
    3028:	a0 96       	adiw	r28, 0x20	; 32
    302a:	e6 e0       	ldi	r30, 0x06	; 6
    302c:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__+0x18>

00003030 <__mulsf3>:
    3030:	a0 e2       	ldi	r26, 0x20	; 32
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	ee e1       	ldi	r30, 0x1E	; 30
    3036:	f8 e1       	ldi	r31, 0x18	; 24
    3038:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__prologue_saves__>
    303c:	69 83       	std	Y+1, r22	; 0x01
    303e:	7a 83       	std	Y+2, r23	; 0x02
    3040:	8b 83       	std	Y+3, r24	; 0x03
    3042:	9c 83       	std	Y+4, r25	; 0x04
    3044:	2d 83       	std	Y+5, r18	; 0x05
    3046:	3e 83       	std	Y+6, r19	; 0x06
    3048:	4f 83       	std	Y+7, r20	; 0x07
    304a:	58 87       	std	Y+8, r21	; 0x08
    304c:	ce 01       	movw	r24, r28
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	be 01       	movw	r22, r28
    3052:	67 5f       	subi	r22, 0xF7	; 247
    3054:	7f 4f       	sbci	r23, 0xFF	; 255
    3056:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    305a:	ce 01       	movw	r24, r28
    305c:	05 96       	adiw	r24, 0x05	; 5
    305e:	be 01       	movw	r22, r28
    3060:	6f 5e       	subi	r22, 0xEF	; 239
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    3068:	99 85       	ldd	r25, Y+9	; 0x09
    306a:	92 30       	cpi	r25, 0x02	; 2
    306c:	78 f0       	brcs	.+30     	; 0x308c <__mulsf3+0x5c>
    306e:	89 89       	ldd	r24, Y+17	; 0x11
    3070:	82 30       	cpi	r24, 0x02	; 2
    3072:	c0 f0       	brcs	.+48     	; 0x30a4 <__mulsf3+0x74>
    3074:	94 30       	cpi	r25, 0x04	; 4
    3076:	19 f4       	brne	.+6      	; 0x307e <__mulsf3+0x4e>
    3078:	82 30       	cpi	r24, 0x02	; 2
    307a:	41 f4       	brne	.+16     	; 0x308c <__mulsf3+0x5c>
    307c:	cb c0       	rjmp	.+406    	; 0x3214 <__mulsf3+0x1e4>
    307e:	84 30       	cpi	r24, 0x04	; 4
    3080:	19 f4       	brne	.+6      	; 0x3088 <__mulsf3+0x58>
    3082:	92 30       	cpi	r25, 0x02	; 2
    3084:	79 f4       	brne	.+30     	; 0x30a4 <__mulsf3+0x74>
    3086:	c6 c0       	rjmp	.+396    	; 0x3214 <__mulsf3+0x1e4>
    3088:	92 30       	cpi	r25, 0x02	; 2
    308a:	51 f4       	brne	.+20     	; 0x30a0 <__mulsf3+0x70>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3090:	9a 89       	ldd	r25, Y+18	; 0x12
    3092:	29 17       	cp	r18, r25
    3094:	09 f4       	brne	.+2      	; 0x3098 <__mulsf3+0x68>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	8a 87       	std	Y+10, r24	; 0x0a
    309a:	ce 01       	movw	r24, r28
    309c:	09 96       	adiw	r24, 0x09	; 9
    309e:	bc c0       	rjmp	.+376    	; 0x3218 <__mulsf3+0x1e8>
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	51 f4       	brne	.+20     	; 0x30b8 <__mulsf3+0x88>
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    30a8:	9a 89       	ldd	r25, Y+18	; 0x12
    30aa:	29 17       	cp	r18, r25
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <__mulsf3+0x80>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	8a 8b       	std	Y+18, r24	; 0x12
    30b2:	ce 01       	movw	r24, r28
    30b4:	41 96       	adiw	r24, 0x11	; 17
    30b6:	b0 c0       	rjmp	.+352    	; 0x3218 <__mulsf3+0x1e8>
    30b8:	6d 84       	ldd	r6, Y+13	; 0x0d
    30ba:	7e 84       	ldd	r7, Y+14	; 0x0e
    30bc:	8f 84       	ldd	r8, Y+15	; 0x0f
    30be:	98 88       	ldd	r9, Y+16	; 0x10
    30c0:	ed 88       	ldd	r14, Y+21	; 0x15
    30c2:	fe 88       	ldd	r15, Y+22	; 0x16
    30c4:	0f 89       	ldd	r16, Y+23	; 0x17
    30c6:	18 8d       	ldd	r17, Y+24	; 0x18
    30c8:	e0 e2       	ldi	r30, 0x20	; 32
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	dc 01       	movw	r26, r24
    30d2:	aa 24       	eor	r10, r10
    30d4:	bb 24       	eor	r11, r11
    30d6:	65 01       	movw	r12, r10
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	a9 01       	movw	r20, r18
    30de:	b3 01       	movw	r22, r6
    30e0:	61 70       	andi	r22, 0x01	; 1
    30e2:	70 70       	andi	r23, 0x00	; 0
    30e4:	61 15       	cp	r22, r1
    30e6:	71 05       	cpc	r23, r1
    30e8:	d1 f0       	breq	.+52     	; 0x311e <__mulsf3+0xee>
    30ea:	2e 0d       	add	r18, r14
    30ec:	3f 1d       	adc	r19, r15
    30ee:	40 1f       	adc	r20, r16
    30f0:	51 1f       	adc	r21, r17
    30f2:	15 01       	movw	r2, r10
    30f4:	26 01       	movw	r4, r12
    30f6:	28 0e       	add	r2, r24
    30f8:	39 1e       	adc	r3, r25
    30fa:	4a 1e       	adc	r4, r26
    30fc:	5b 1e       	adc	r5, r27
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e0       	ldi	r26, 0x00	; 0
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	2e 15       	cp	r18, r14
    3108:	3f 05       	cpc	r19, r15
    310a:	40 07       	cpc	r20, r16
    310c:	51 07       	cpc	r21, r17
    310e:	18 f0       	brcs	.+6      	; 0x3116 <__mulsf3+0xe6>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	dc 01       	movw	r26, r24
    3116:	82 0d       	add	r24, r2
    3118:	93 1d       	adc	r25, r3
    311a:	a4 1d       	adc	r26, r4
    311c:	b5 1d       	adc	r27, r5
    311e:	aa 0c       	add	r10, r10
    3120:	bb 1c       	adc	r11, r11
    3122:	cc 1c       	adc	r12, r12
    3124:	dd 1c       	adc	r13, r13
    3126:	17 ff       	sbrs	r17, 7
    3128:	09 c0       	rjmp	.+18     	; 0x313c <__mulsf3+0x10c>
    312a:	61 e0       	ldi	r22, 0x01	; 1
    312c:	26 2e       	mov	r2, r22
    312e:	31 2c       	mov	r3, r1
    3130:	41 2c       	mov	r4, r1
    3132:	51 2c       	mov	r5, r1
    3134:	a2 28       	or	r10, r2
    3136:	b3 28       	or	r11, r3
    3138:	c4 28       	or	r12, r4
    313a:	d5 28       	or	r13, r5
    313c:	31 97       	sbiw	r30, 0x01	; 1
    313e:	49 f0       	breq	.+18     	; 0x3152 <__mulsf3+0x122>
    3140:	ee 0c       	add	r14, r14
    3142:	ff 1c       	adc	r15, r15
    3144:	00 1f       	adc	r16, r16
    3146:	11 1f       	adc	r17, r17
    3148:	96 94       	lsr	r9
    314a:	87 94       	ror	r8
    314c:	77 94       	ror	r7
    314e:	67 94       	ror	r6
    3150:	c6 cf       	rjmp	.-116    	; 0x30de <__mulsf3+0xae>
    3152:	6b 89       	ldd	r22, Y+19	; 0x13
    3154:	7c 89       	ldd	r23, Y+20	; 0x14
    3156:	eb 85       	ldd	r30, Y+11	; 0x0b
    3158:	fc 85       	ldd	r31, Y+12	; 0x0c
    315a:	6e 0f       	add	r22, r30
    315c:	7f 1f       	adc	r23, r31
    315e:	6e 5f       	subi	r22, 0xFE	; 254
    3160:	7f 4f       	sbci	r23, 0xFF	; 255
    3162:	7c 8f       	std	Y+28, r23	; 0x1c
    3164:	6b 8f       	std	Y+27, r22	; 0x1b
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	ea 85       	ldd	r30, Y+10	; 0x0a
    316a:	7a 89       	ldd	r23, Y+18	; 0x12
    316c:	e7 17       	cp	r30, r23
    316e:	09 f4       	brne	.+2      	; 0x3172 <__mulsf3+0x142>
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	6a 8f       	std	Y+26, r22	; 0x1a
    3174:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3176:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3178:	10 c0       	rjmp	.+32     	; 0x319a <__mulsf3+0x16a>
    317a:	fc 01       	movw	r30, r24
    317c:	e1 70       	andi	r30, 0x01	; 1
    317e:	f0 70       	andi	r31, 0x00	; 0
    3180:	30 97       	sbiw	r30, 0x00	; 0
    3182:	29 f0       	breq	.+10     	; 0x318e <__mulsf3+0x15e>
    3184:	56 95       	lsr	r21
    3186:	47 95       	ror	r20
    3188:	37 95       	ror	r19
    318a:	27 95       	ror	r18
    318c:	50 68       	ori	r21, 0x80	; 128
    318e:	b6 95       	lsr	r27
    3190:	a7 95       	ror	r26
    3192:	97 95       	ror	r25
    3194:	87 95       	ror	r24
    3196:	6f 5f       	subi	r22, 0xFF	; 255
    3198:	7f 4f       	sbci	r23, 0xFF	; 255
    319a:	b7 fd       	sbrc	r27, 7
    319c:	ee cf       	rjmp	.-36     	; 0x317a <__mulsf3+0x14a>
    319e:	0c c0       	rjmp	.+24     	; 0x31b8 <__mulsf3+0x188>
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	aa 1f       	adc	r26, r26
    31a6:	bb 1f       	adc	r27, r27
    31a8:	57 fd       	sbrc	r21, 7
    31aa:	81 60       	ori	r24, 0x01	; 1
    31ac:	22 0f       	add	r18, r18
    31ae:	33 1f       	adc	r19, r19
    31b0:	44 1f       	adc	r20, r20
    31b2:	55 1f       	adc	r21, r21
    31b4:	61 50       	subi	r22, 0x01	; 1
    31b6:	70 40       	sbci	r23, 0x00	; 0
    31b8:	80 30       	cpi	r24, 0x00	; 0
    31ba:	e0 e0       	ldi	r30, 0x00	; 0
    31bc:	9e 07       	cpc	r25, r30
    31be:	e0 e0       	ldi	r30, 0x00	; 0
    31c0:	ae 07       	cpc	r26, r30
    31c2:	e0 e4       	ldi	r30, 0x40	; 64
    31c4:	be 07       	cpc	r27, r30
    31c6:	60 f3       	brcs	.-40     	; 0x31a0 <__mulsf3+0x170>
    31c8:	6b 8f       	std	Y+27, r22	; 0x1b
    31ca:	7c 8f       	std	Y+28, r23	; 0x1c
    31cc:	6f e7       	ldi	r22, 0x7F	; 127
    31ce:	e6 2e       	mov	r14, r22
    31d0:	f1 2c       	mov	r15, r1
    31d2:	01 2d       	mov	r16, r1
    31d4:	11 2d       	mov	r17, r1
    31d6:	e8 22       	and	r14, r24
    31d8:	f9 22       	and	r15, r25
    31da:	0a 23       	and	r16, r26
    31dc:	1b 23       	and	r17, r27
    31de:	60 e4       	ldi	r22, 0x40	; 64
    31e0:	e6 16       	cp	r14, r22
    31e2:	f1 04       	cpc	r15, r1
    31e4:	01 05       	cpc	r16, r1
    31e6:	11 05       	cpc	r17, r1
    31e8:	61 f4       	brne	.+24     	; 0x3202 <__mulsf3+0x1d2>
    31ea:	87 fd       	sbrc	r24, 7
    31ec:	0a c0       	rjmp	.+20     	; 0x3202 <__mulsf3+0x1d2>
    31ee:	21 15       	cp	r18, r1
    31f0:	31 05       	cpc	r19, r1
    31f2:	41 05       	cpc	r20, r1
    31f4:	51 05       	cpc	r21, r1
    31f6:	29 f0       	breq	.+10     	; 0x3202 <__mulsf3+0x1d2>
    31f8:	80 5c       	subi	r24, 0xC0	; 192
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	af 4f       	sbci	r26, 0xFF	; 255
    31fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3200:	80 78       	andi	r24, 0x80	; 128
    3202:	8d 8f       	std	Y+29, r24	; 0x1d
    3204:	9e 8f       	std	Y+30, r25	; 0x1e
    3206:	af 8f       	std	Y+31, r26	; 0x1f
    3208:	b8 a3       	std	Y+32, r27	; 0x20
    320a:	83 e0       	ldi	r24, 0x03	; 3
    320c:	89 8f       	std	Y+25, r24	; 0x19
    320e:	ce 01       	movw	r24, r28
    3210:	49 96       	adiw	r24, 0x19	; 25
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <__mulsf3+0x1e8>
    3214:	8a e4       	ldi	r24, 0x4A	; 74
    3216:	91 e0       	ldi	r25, 0x01	; 1
    3218:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__pack_f>
    321c:	a0 96       	adiw	r28, 0x20	; 32
    321e:	e2 e1       	ldi	r30, 0x12	; 18
    3220:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__epilogue_restores__>

00003224 <__divsf3>:
    3224:	a8 e1       	ldi	r26, 0x18	; 24
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e8 e1       	ldi	r30, 0x18	; 24
    322a:	f9 e1       	ldi	r31, 0x19	; 25
    322c:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__prologue_saves__+0x10>
    3230:	69 83       	std	Y+1, r22	; 0x01
    3232:	7a 83       	std	Y+2, r23	; 0x02
    3234:	8b 83       	std	Y+3, r24	; 0x03
    3236:	9c 83       	std	Y+4, r25	; 0x04
    3238:	2d 83       	std	Y+5, r18	; 0x05
    323a:	3e 83       	std	Y+6, r19	; 0x06
    323c:	4f 83       	std	Y+7, r20	; 0x07
    323e:	58 87       	std	Y+8, r21	; 0x08
    3240:	8e 01       	movw	r16, r28
    3242:	07 5f       	subi	r16, 0xF7	; 247
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	ce 01       	movw	r24, r28
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	b8 01       	movw	r22, r16
    324c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    3250:	81 e1       	ldi	r24, 0x11	; 17
    3252:	e8 2e       	mov	r14, r24
    3254:	f1 2c       	mov	r15, r1
    3256:	ec 0e       	add	r14, r28
    3258:	fd 1e       	adc	r15, r29
    325a:	ce 01       	movw	r24, r28
    325c:	05 96       	adiw	r24, 0x05	; 5
    325e:	b7 01       	movw	r22, r14
    3260:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    3264:	99 85       	ldd	r25, Y+9	; 0x09
    3266:	92 30       	cpi	r25, 0x02	; 2
    3268:	08 f4       	brcc	.+2      	; 0x326c <__divsf3+0x48>
    326a:	83 c0       	rjmp	.+262    	; 0x3372 <__divsf3+0x14e>
    326c:	89 89       	ldd	r24, Y+17	; 0x11
    326e:	82 30       	cpi	r24, 0x02	; 2
    3270:	08 f4       	brcc	.+2      	; 0x3274 <__divsf3+0x50>
    3272:	7b c0       	rjmp	.+246    	; 0x336a <__divsf3+0x146>
    3274:	2a 85       	ldd	r18, Y+10	; 0x0a
    3276:	3a 89       	ldd	r19, Y+18	; 0x12
    3278:	23 27       	eor	r18, r19
    327a:	2a 87       	std	Y+10, r18	; 0x0a
    327c:	94 30       	cpi	r25, 0x04	; 4
    327e:	11 f0       	breq	.+4      	; 0x3284 <__divsf3+0x60>
    3280:	92 30       	cpi	r25, 0x02	; 2
    3282:	21 f4       	brne	.+8      	; 0x328c <__divsf3+0x68>
    3284:	98 17       	cp	r25, r24
    3286:	09 f0       	breq	.+2      	; 0x328a <__divsf3+0x66>
    3288:	6c c0       	rjmp	.+216    	; 0x3362 <__divsf3+0x13e>
    328a:	71 c0       	rjmp	.+226    	; 0x336e <__divsf3+0x14a>
    328c:	84 30       	cpi	r24, 0x04	; 4
    328e:	39 f4       	brne	.+14     	; 0x329e <__divsf3+0x7a>
    3290:	1d 86       	std	Y+13, r1	; 0x0d
    3292:	1e 86       	std	Y+14, r1	; 0x0e
    3294:	1f 86       	std	Y+15, r1	; 0x0f
    3296:	18 8a       	std	Y+16, r1	; 0x10
    3298:	1c 86       	std	Y+12, r1	; 0x0c
    329a:	1b 86       	std	Y+11, r1	; 0x0b
    329c:	6a c0       	rjmp	.+212    	; 0x3372 <__divsf3+0x14e>
    329e:	82 30       	cpi	r24, 0x02	; 2
    32a0:	19 f4       	brne	.+6      	; 0x32a8 <__divsf3+0x84>
    32a2:	84 e0       	ldi	r24, 0x04	; 4
    32a4:	89 87       	std	Y+9, r24	; 0x09
    32a6:	65 c0       	rjmp	.+202    	; 0x3372 <__divsf3+0x14e>
    32a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    32ac:	2b 89       	ldd	r18, Y+19	; 0x13
    32ae:	3c 89       	ldd	r19, Y+20	; 0x14
    32b0:	82 1b       	sub	r24, r18
    32b2:	93 0b       	sbc	r25, r19
    32b4:	9c 87       	std	Y+12, r25	; 0x0c
    32b6:	8b 87       	std	Y+11, r24	; 0x0b
    32b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    32ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    32bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    32be:	58 89       	ldd	r21, Y+16	; 0x10
    32c0:	ed 88       	ldd	r14, Y+21	; 0x15
    32c2:	fe 88       	ldd	r15, Y+22	; 0x16
    32c4:	0f 89       	ldd	r16, Y+23	; 0x17
    32c6:	18 8d       	ldd	r17, Y+24	; 0x18
    32c8:	2e 15       	cp	r18, r14
    32ca:	3f 05       	cpc	r19, r15
    32cc:	40 07       	cpc	r20, r16
    32ce:	51 07       	cpc	r21, r17
    32d0:	38 f4       	brcc	.+14     	; 0x32e0 <__divsf3+0xbc>
    32d2:	22 0f       	add	r18, r18
    32d4:	33 1f       	adc	r19, r19
    32d6:	44 1f       	adc	r20, r20
    32d8:	55 1f       	adc	r21, r21
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	9c 87       	std	Y+12, r25	; 0x0c
    32de:	8b 87       	std	Y+11, r24	; 0x0b
    32e0:	6f e1       	ldi	r22, 0x1F	; 31
    32e2:	70 e0       	ldi	r23, 0x00	; 0
    32e4:	a1 2c       	mov	r10, r1
    32e6:	b1 2c       	mov	r11, r1
    32e8:	c1 2c       	mov	r12, r1
    32ea:	a0 e4       	ldi	r26, 0x40	; 64
    32ec:	da 2e       	mov	r13, r26
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	dc 01       	movw	r26, r24
    32f4:	2e 15       	cp	r18, r14
    32f6:	3f 05       	cpc	r19, r15
    32f8:	40 07       	cpc	r20, r16
    32fa:	51 07       	cpc	r21, r17
    32fc:	40 f0       	brcs	.+16     	; 0x330e <__divsf3+0xea>
    32fe:	8a 29       	or	r24, r10
    3300:	9b 29       	or	r25, r11
    3302:	ac 29       	or	r26, r12
    3304:	bd 29       	or	r27, r13
    3306:	2e 19       	sub	r18, r14
    3308:	3f 09       	sbc	r19, r15
    330a:	40 0b       	sbc	r20, r16
    330c:	51 0b       	sbc	r21, r17
    330e:	d6 94       	lsr	r13
    3310:	c7 94       	ror	r12
    3312:	b7 94       	ror	r11
    3314:	a7 94       	ror	r10
    3316:	22 0f       	add	r18, r18
    3318:	33 1f       	adc	r19, r19
    331a:	44 1f       	adc	r20, r20
    331c:	55 1f       	adc	r21, r21
    331e:	61 50       	subi	r22, 0x01	; 1
    3320:	70 40       	sbci	r23, 0x00	; 0
    3322:	41 f7       	brne	.-48     	; 0x32f4 <__divsf3+0xd0>
    3324:	6f e7       	ldi	r22, 0x7F	; 127
    3326:	e6 2e       	mov	r14, r22
    3328:	f1 2c       	mov	r15, r1
    332a:	01 2d       	mov	r16, r1
    332c:	11 2d       	mov	r17, r1
    332e:	e8 22       	and	r14, r24
    3330:	f9 22       	and	r15, r25
    3332:	0a 23       	and	r16, r26
    3334:	1b 23       	and	r17, r27
    3336:	60 e4       	ldi	r22, 0x40	; 64
    3338:	e6 16       	cp	r14, r22
    333a:	f1 04       	cpc	r15, r1
    333c:	01 05       	cpc	r16, r1
    333e:	11 05       	cpc	r17, r1
    3340:	61 f4       	brne	.+24     	; 0x335a <__divsf3+0x136>
    3342:	87 fd       	sbrc	r24, 7
    3344:	0a c0       	rjmp	.+20     	; 0x335a <__divsf3+0x136>
    3346:	21 15       	cp	r18, r1
    3348:	31 05       	cpc	r19, r1
    334a:	41 05       	cpc	r20, r1
    334c:	51 05       	cpc	r21, r1
    334e:	29 f0       	breq	.+10     	; 0x335a <__divsf3+0x136>
    3350:	80 5c       	subi	r24, 0xC0	; 192
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	af 4f       	sbci	r26, 0xFF	; 255
    3356:	bf 4f       	sbci	r27, 0xFF	; 255
    3358:	80 78       	andi	r24, 0x80	; 128
    335a:	8d 87       	std	Y+13, r24	; 0x0d
    335c:	9e 87       	std	Y+14, r25	; 0x0e
    335e:	af 87       	std	Y+15, r26	; 0x0f
    3360:	b8 8b       	std	Y+16, r27	; 0x10
    3362:	8e 01       	movw	r16, r28
    3364:	07 5f       	subi	r16, 0xF7	; 247
    3366:	1f 4f       	sbci	r17, 0xFF	; 255
    3368:	04 c0       	rjmp	.+8      	; 0x3372 <__divsf3+0x14e>
    336a:	87 01       	movw	r16, r14
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <__divsf3+0x14e>
    336e:	0a e4       	ldi	r16, 0x4A	; 74
    3370:	11 e0       	ldi	r17, 0x01	; 1
    3372:	c8 01       	movw	r24, r16
    3374:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__pack_f>
    3378:	68 96       	adiw	r28, 0x18	; 24
    337a:	ea e0       	ldi	r30, 0x0A	; 10
    337c:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__epilogue_restores__+0x10>

00003380 <__gtsf2>:
    3380:	a8 e1       	ldi	r26, 0x18	; 24
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e6 ec       	ldi	r30, 0xC6	; 198
    3386:	f9 e1       	ldi	r31, 0x19	; 25
    3388:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__+0x18>
    338c:	69 83       	std	Y+1, r22	; 0x01
    338e:	7a 83       	std	Y+2, r23	; 0x02
    3390:	8b 83       	std	Y+3, r24	; 0x03
    3392:	9c 83       	std	Y+4, r25	; 0x04
    3394:	2d 83       	std	Y+5, r18	; 0x05
    3396:	3e 83       	std	Y+6, r19	; 0x06
    3398:	4f 83       	std	Y+7, r20	; 0x07
    339a:	58 87       	std	Y+8, r21	; 0x08
    339c:	8e 01       	movw	r16, r28
    339e:	07 5f       	subi	r16, 0xF7	; 247
    33a0:	1f 4f       	sbci	r17, 0xFF	; 255
    33a2:	ce 01       	movw	r24, r28
    33a4:	01 96       	adiw	r24, 0x01	; 1
    33a6:	b8 01       	movw	r22, r16
    33a8:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    33ac:	81 e1       	ldi	r24, 0x11	; 17
    33ae:	e8 2e       	mov	r14, r24
    33b0:	f1 2c       	mov	r15, r1
    33b2:	ec 0e       	add	r14, r28
    33b4:	fd 1e       	adc	r15, r29
    33b6:	ce 01       	movw	r24, r28
    33b8:	05 96       	adiw	r24, 0x05	; 5
    33ba:	b7 01       	movw	r22, r14
    33bc:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    33c0:	89 85       	ldd	r24, Y+9	; 0x09
    33c2:	82 30       	cpi	r24, 0x02	; 2
    33c4:	40 f0       	brcs	.+16     	; 0x33d6 <__gtsf2+0x56>
    33c6:	89 89       	ldd	r24, Y+17	; 0x11
    33c8:	82 30       	cpi	r24, 0x02	; 2
    33ca:	28 f0       	brcs	.+10     	; 0x33d6 <__gtsf2+0x56>
    33cc:	c8 01       	movw	r24, r16
    33ce:	b7 01       	movw	r22, r14
    33d0:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fpcmp_parts_f>
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <__gtsf2+0x58>
    33d6:	8f ef       	ldi	r24, 0xFF	; 255
    33d8:	68 96       	adiw	r28, 0x18	; 24
    33da:	e6 e0       	ldi	r30, 0x06	; 6
    33dc:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__+0x18>

000033e0 <__gesf2>:
    33e0:	a8 e1       	ldi	r26, 0x18	; 24
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	e6 ef       	ldi	r30, 0xF6	; 246
    33e6:	f9 e1       	ldi	r31, 0x19	; 25
    33e8:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__+0x18>
    33ec:	69 83       	std	Y+1, r22	; 0x01
    33ee:	7a 83       	std	Y+2, r23	; 0x02
    33f0:	8b 83       	std	Y+3, r24	; 0x03
    33f2:	9c 83       	std	Y+4, r25	; 0x04
    33f4:	2d 83       	std	Y+5, r18	; 0x05
    33f6:	3e 83       	std	Y+6, r19	; 0x06
    33f8:	4f 83       	std	Y+7, r20	; 0x07
    33fa:	58 87       	std	Y+8, r21	; 0x08
    33fc:	8e 01       	movw	r16, r28
    33fe:	07 5f       	subi	r16, 0xF7	; 247
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	ce 01       	movw	r24, r28
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	b8 01       	movw	r22, r16
    3408:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    340c:	81 e1       	ldi	r24, 0x11	; 17
    340e:	e8 2e       	mov	r14, r24
    3410:	f1 2c       	mov	r15, r1
    3412:	ec 0e       	add	r14, r28
    3414:	fd 1e       	adc	r15, r29
    3416:	ce 01       	movw	r24, r28
    3418:	05 96       	adiw	r24, 0x05	; 5
    341a:	b7 01       	movw	r22, r14
    341c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    3420:	89 85       	ldd	r24, Y+9	; 0x09
    3422:	82 30       	cpi	r24, 0x02	; 2
    3424:	40 f0       	brcs	.+16     	; 0x3436 <__gesf2+0x56>
    3426:	89 89       	ldd	r24, Y+17	; 0x11
    3428:	82 30       	cpi	r24, 0x02	; 2
    342a:	28 f0       	brcs	.+10     	; 0x3436 <__gesf2+0x56>
    342c:	c8 01       	movw	r24, r16
    342e:	b7 01       	movw	r22, r14
    3430:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fpcmp_parts_f>
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <__gesf2+0x58>
    3436:	8f ef       	ldi	r24, 0xFF	; 255
    3438:	68 96       	adiw	r28, 0x18	; 24
    343a:	e6 e0       	ldi	r30, 0x06	; 6
    343c:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__+0x18>

00003440 <__ltsf2>:
    3440:	a8 e1       	ldi	r26, 0x18	; 24
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	e6 e2       	ldi	r30, 0x26	; 38
    3446:	fa e1       	ldi	r31, 0x1A	; 26
    3448:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__+0x18>
    344c:	69 83       	std	Y+1, r22	; 0x01
    344e:	7a 83       	std	Y+2, r23	; 0x02
    3450:	8b 83       	std	Y+3, r24	; 0x03
    3452:	9c 83       	std	Y+4, r25	; 0x04
    3454:	2d 83       	std	Y+5, r18	; 0x05
    3456:	3e 83       	std	Y+6, r19	; 0x06
    3458:	4f 83       	std	Y+7, r20	; 0x07
    345a:	58 87       	std	Y+8, r21	; 0x08
    345c:	8e 01       	movw	r16, r28
    345e:	07 5f       	subi	r16, 0xF7	; 247
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	ce 01       	movw	r24, r28
    3464:	01 96       	adiw	r24, 0x01	; 1
    3466:	b8 01       	movw	r22, r16
    3468:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    346c:	81 e1       	ldi	r24, 0x11	; 17
    346e:	e8 2e       	mov	r14, r24
    3470:	f1 2c       	mov	r15, r1
    3472:	ec 0e       	add	r14, r28
    3474:	fd 1e       	adc	r15, r29
    3476:	ce 01       	movw	r24, r28
    3478:	05 96       	adiw	r24, 0x05	; 5
    347a:	b7 01       	movw	r22, r14
    347c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	82 30       	cpi	r24, 0x02	; 2
    3484:	40 f0       	brcs	.+16     	; 0x3496 <__ltsf2+0x56>
    3486:	89 89       	ldd	r24, Y+17	; 0x11
    3488:	82 30       	cpi	r24, 0x02	; 2
    348a:	28 f0       	brcs	.+10     	; 0x3496 <__ltsf2+0x56>
    348c:	c8 01       	movw	r24, r16
    348e:	b7 01       	movw	r22, r14
    3490:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fpcmp_parts_f>
    3494:	01 c0       	rjmp	.+2      	; 0x3498 <__ltsf2+0x58>
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	68 96       	adiw	r28, 0x18	; 24
    349a:	e6 e0       	ldi	r30, 0x06	; 6
    349c:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__+0x18>

000034a0 <__fixsfsi>:
    34a0:	ac e0       	ldi	r26, 0x0C	; 12
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	e6 e5       	ldi	r30, 0x56	; 86
    34a6:	fa e1       	ldi	r31, 0x1A	; 26
    34a8:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__prologue_saves__+0x20>
    34ac:	69 83       	std	Y+1, r22	; 0x01
    34ae:	7a 83       	std	Y+2, r23	; 0x02
    34b0:	8b 83       	std	Y+3, r24	; 0x03
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	ce 01       	movw	r24, r28
    34b6:	01 96       	adiw	r24, 0x01	; 1
    34b8:	be 01       	movw	r22, r28
    34ba:	6b 5f       	subi	r22, 0xFB	; 251
    34bc:	7f 4f       	sbci	r23, 0xFF	; 255
    34be:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__unpack_f>
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	82 30       	cpi	r24, 0x02	; 2
    34c6:	81 f1       	breq	.+96     	; 0x3528 <__fixsfsi+0x88>
    34c8:	82 30       	cpi	r24, 0x02	; 2
    34ca:	70 f1       	brcs	.+92     	; 0x3528 <__fixsfsi+0x88>
    34cc:	84 30       	cpi	r24, 0x04	; 4
    34ce:	21 f4       	brne	.+8      	; 0x34d8 <__fixsfsi+0x38>
    34d0:	8e 81       	ldd	r24, Y+6	; 0x06
    34d2:	88 23       	and	r24, r24
    34d4:	69 f1       	breq	.+90     	; 0x3530 <__fixsfsi+0x90>
    34d6:	0a c0       	rjmp	.+20     	; 0x34ec <__fixsfsi+0x4c>
    34d8:	2f 81       	ldd	r18, Y+7	; 0x07
    34da:	38 85       	ldd	r19, Y+8	; 0x08
    34dc:	37 fd       	sbrc	r19, 7
    34de:	24 c0       	rjmp	.+72     	; 0x3528 <__fixsfsi+0x88>
    34e0:	6e 81       	ldd	r22, Y+6	; 0x06
    34e2:	2f 31       	cpi	r18, 0x1F	; 31
    34e4:	31 05       	cpc	r19, r1
    34e6:	3c f0       	brlt	.+14     	; 0x34f6 <__fixsfsi+0x56>
    34e8:	66 23       	and	r22, r22
    34ea:	11 f1       	breq	.+68     	; 0x3530 <__fixsfsi+0x90>
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	50 e8       	ldi	r21, 0x80	; 128
    34f4:	21 c0       	rjmp	.+66     	; 0x3538 <__fixsfsi+0x98>
    34f6:	8e e1       	ldi	r24, 0x1E	; 30
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	82 1b       	sub	r24, r18
    34fc:	93 0b       	sbc	r25, r19
    34fe:	29 85       	ldd	r18, Y+9	; 0x09
    3500:	3a 85       	ldd	r19, Y+10	; 0x0a
    3502:	4b 85       	ldd	r20, Y+11	; 0x0b
    3504:	5c 85       	ldd	r21, Y+12	; 0x0c
    3506:	04 c0       	rjmp	.+8      	; 0x3510 <__fixsfsi+0x70>
    3508:	56 95       	lsr	r21
    350a:	47 95       	ror	r20
    350c:	37 95       	ror	r19
    350e:	27 95       	ror	r18
    3510:	8a 95       	dec	r24
    3512:	d2 f7       	brpl	.-12     	; 0x3508 <__fixsfsi+0x68>
    3514:	66 23       	and	r22, r22
    3516:	81 f0       	breq	.+32     	; 0x3538 <__fixsfsi+0x98>
    3518:	50 95       	com	r21
    351a:	40 95       	com	r20
    351c:	30 95       	com	r19
    351e:	21 95       	neg	r18
    3520:	3f 4f       	sbci	r19, 0xFF	; 255
    3522:	4f 4f       	sbci	r20, 0xFF	; 255
    3524:	5f 4f       	sbci	r21, 0xFF	; 255
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <__fixsfsi+0x98>
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	a9 01       	movw	r20, r18
    352e:	04 c0       	rjmp	.+8      	; 0x3538 <__fixsfsi+0x98>
    3530:	2f ef       	ldi	r18, 0xFF	; 255
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f ef       	ldi	r20, 0xFF	; 255
    3536:	5f e7       	ldi	r21, 0x7F	; 127
    3538:	b9 01       	movw	r22, r18
    353a:	ca 01       	movw	r24, r20
    353c:	2c 96       	adiw	r28, 0x0c	; 12
    353e:	e2 e0       	ldi	r30, 0x02	; 2
    3540:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__epilogue_restores__+0x20>

00003544 <__pack_f>:
    3544:	ef 92       	push	r14
    3546:	ff 92       	push	r15
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	fc 01       	movw	r30, r24
    3552:	24 81       	ldd	r18, Z+4	; 0x04
    3554:	35 81       	ldd	r19, Z+5	; 0x05
    3556:	46 81       	ldd	r20, Z+6	; 0x06
    3558:	57 81       	ldd	r21, Z+7	; 0x07
    355a:	61 81       	ldd	r22, Z+1	; 0x01
    355c:	80 81       	ld	r24, Z
    355e:	82 30       	cpi	r24, 0x02	; 2
    3560:	20 f4       	brcc	.+8      	; 0x356a <__pack_f+0x26>
    3562:	40 61       	ori	r20, 0x10	; 16
    3564:	ef ef       	ldi	r30, 0xFF	; 255
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	a3 c0       	rjmp	.+326    	; 0x36b0 <__pack_f+0x16c>
    356a:	84 30       	cpi	r24, 0x04	; 4
    356c:	09 f4       	brne	.+2      	; 0x3570 <__pack_f+0x2c>
    356e:	9b c0       	rjmp	.+310    	; 0x36a6 <__pack_f+0x162>
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	09 f4       	brne	.+2      	; 0x3576 <__pack_f+0x32>
    3574:	92 c0       	rjmp	.+292    	; 0x369a <__pack_f+0x156>
    3576:	21 15       	cp	r18, r1
    3578:	31 05       	cpc	r19, r1
    357a:	41 05       	cpc	r20, r1
    357c:	51 05       	cpc	r21, r1
    357e:	09 f4       	brne	.+2      	; 0x3582 <__pack_f+0x3e>
    3580:	8f c0       	rjmp	.+286    	; 0x36a0 <__pack_f+0x15c>
    3582:	02 80       	ldd	r0, Z+2	; 0x02
    3584:	f3 81       	ldd	r31, Z+3	; 0x03
    3586:	e0 2d       	mov	r30, r0
    3588:	8f ef       	ldi	r24, 0xFF	; 255
    358a:	e2 38       	cpi	r30, 0x82	; 130
    358c:	f8 07       	cpc	r31, r24
    358e:	0c f0       	brlt	.+2      	; 0x3592 <__pack_f+0x4e>
    3590:	5a c0       	rjmp	.+180    	; 0x3646 <__pack_f+0x102>
    3592:	c2 e8       	ldi	r28, 0x82	; 130
    3594:	df ef       	ldi	r29, 0xFF	; 255
    3596:	ce 1b       	sub	r28, r30
    3598:	df 0b       	sbc	r29, r31
    359a:	ca 31       	cpi	r28, 0x1A	; 26
    359c:	d1 05       	cpc	r29, r1
    359e:	6c f5       	brge	.+90     	; 0x35fa <__pack_f+0xb6>
    35a0:	79 01       	movw	r14, r18
    35a2:	8a 01       	movw	r16, r20
    35a4:	0c 2e       	mov	r0, r28
    35a6:	04 c0       	rjmp	.+8      	; 0x35b0 <__pack_f+0x6c>
    35a8:	16 95       	lsr	r17
    35aa:	07 95       	ror	r16
    35ac:	f7 94       	ror	r15
    35ae:	e7 94       	ror	r14
    35b0:	0a 94       	dec	r0
    35b2:	d2 f7       	brpl	.-12     	; 0x35a8 <__pack_f+0x64>
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a0 e0       	ldi	r26, 0x00	; 0
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	0c 2e       	mov	r0, r28
    35be:	04 c0       	rjmp	.+8      	; 0x35c8 <__pack_f+0x84>
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	aa 1f       	adc	r26, r26
    35c6:	bb 1f       	adc	r27, r27
    35c8:	0a 94       	dec	r0
    35ca:	d2 f7       	brpl	.-12     	; 0x35c0 <__pack_f+0x7c>
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	a1 09       	sbc	r26, r1
    35d0:	b1 09       	sbc	r27, r1
    35d2:	82 23       	and	r24, r18
    35d4:	93 23       	and	r25, r19
    35d6:	a4 23       	and	r26, r20
    35d8:	b5 23       	and	r27, r21
    35da:	21 e0       	ldi	r18, 0x01	; 1
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	a1 05       	cpc	r26, r1
    35e6:	b1 05       	cpc	r27, r1
    35e8:	19 f4       	brne	.+6      	; 0x35f0 <__pack_f+0xac>
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	a9 01       	movw	r20, r18
    35f0:	2e 29       	or	r18, r14
    35f2:	3f 29       	or	r19, r15
    35f4:	40 2b       	or	r20, r16
    35f6:	51 2b       	or	r21, r17
    35f8:	03 c0       	rjmp	.+6      	; 0x3600 <__pack_f+0xbc>
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	a9 01       	movw	r20, r18
    3600:	da 01       	movw	r26, r20
    3602:	c9 01       	movw	r24, r18
    3604:	8f 77       	andi	r24, 0x7F	; 127
    3606:	90 70       	andi	r25, 0x00	; 0
    3608:	a0 70       	andi	r26, 0x00	; 0
    360a:	b0 70       	andi	r27, 0x00	; 0
    360c:	80 34       	cpi	r24, 0x40	; 64
    360e:	91 05       	cpc	r25, r1
    3610:	a1 05       	cpc	r26, r1
    3612:	b1 05       	cpc	r27, r1
    3614:	39 f4       	brne	.+14     	; 0x3624 <__pack_f+0xe0>
    3616:	27 ff       	sbrs	r18, 7
    3618:	09 c0       	rjmp	.+18     	; 0x362c <__pack_f+0xe8>
    361a:	20 5c       	subi	r18, 0xC0	; 192
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	4f 4f       	sbci	r20, 0xFF	; 255
    3620:	5f 4f       	sbci	r21, 0xFF	; 255
    3622:	04 c0       	rjmp	.+8      	; 0x362c <__pack_f+0xe8>
    3624:	21 5c       	subi	r18, 0xC1	; 193
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	4f 4f       	sbci	r20, 0xFF	; 255
    362a:	5f 4f       	sbci	r21, 0xFF	; 255
    362c:	e1 e0       	ldi	r30, 0x01	; 1
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	20 30       	cpi	r18, 0x00	; 0
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	38 07       	cpc	r19, r24
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	48 07       	cpc	r20, r24
    363a:	80 e4       	ldi	r24, 0x40	; 64
    363c:	58 07       	cpc	r21, r24
    363e:	28 f5       	brcc	.+74     	; 0x368a <__pack_f+0x146>
    3640:	e0 e0       	ldi	r30, 0x00	; 0
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	22 c0       	rjmp	.+68     	; 0x368a <__pack_f+0x146>
    3646:	e0 38       	cpi	r30, 0x80	; 128
    3648:	f1 05       	cpc	r31, r1
    364a:	6c f5       	brge	.+90     	; 0x36a6 <__pack_f+0x162>
    364c:	e1 58       	subi	r30, 0x81	; 129
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	da 01       	movw	r26, r20
    3652:	c9 01       	movw	r24, r18
    3654:	8f 77       	andi	r24, 0x7F	; 127
    3656:	90 70       	andi	r25, 0x00	; 0
    3658:	a0 70       	andi	r26, 0x00	; 0
    365a:	b0 70       	andi	r27, 0x00	; 0
    365c:	80 34       	cpi	r24, 0x40	; 64
    365e:	91 05       	cpc	r25, r1
    3660:	a1 05       	cpc	r26, r1
    3662:	b1 05       	cpc	r27, r1
    3664:	39 f4       	brne	.+14     	; 0x3674 <__pack_f+0x130>
    3666:	27 ff       	sbrs	r18, 7
    3668:	09 c0       	rjmp	.+18     	; 0x367c <__pack_f+0x138>
    366a:	20 5c       	subi	r18, 0xC0	; 192
    366c:	3f 4f       	sbci	r19, 0xFF	; 255
    366e:	4f 4f       	sbci	r20, 0xFF	; 255
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	04 c0       	rjmp	.+8      	; 0x367c <__pack_f+0x138>
    3674:	21 5c       	subi	r18, 0xC1	; 193
    3676:	3f 4f       	sbci	r19, 0xFF	; 255
    3678:	4f 4f       	sbci	r20, 0xFF	; 255
    367a:	5f 4f       	sbci	r21, 0xFF	; 255
    367c:	57 ff       	sbrs	r21, 7
    367e:	05 c0       	rjmp	.+10     	; 0x368a <__pack_f+0x146>
    3680:	56 95       	lsr	r21
    3682:	47 95       	ror	r20
    3684:	37 95       	ror	r19
    3686:	27 95       	ror	r18
    3688:	31 96       	adiw	r30, 0x01	; 1
    368a:	87 e0       	ldi	r24, 0x07	; 7
    368c:	56 95       	lsr	r21
    368e:	47 95       	ror	r20
    3690:	37 95       	ror	r19
    3692:	27 95       	ror	r18
    3694:	8a 95       	dec	r24
    3696:	d1 f7       	brne	.-12     	; 0x368c <__pack_f+0x148>
    3698:	0b c0       	rjmp	.+22     	; 0x36b0 <__pack_f+0x16c>
    369a:	e0 e0       	ldi	r30, 0x00	; 0
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	05 c0       	rjmp	.+10     	; 0x36aa <__pack_f+0x166>
    36a0:	e0 e0       	ldi	r30, 0x00	; 0
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	05 c0       	rjmp	.+10     	; 0x36b0 <__pack_f+0x16c>
    36a6:	ef ef       	ldi	r30, 0xFF	; 255
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	a9 01       	movw	r20, r18
    36b0:	8e 2f       	mov	r24, r30
    36b2:	87 95       	ror	r24
    36b4:	88 27       	eor	r24, r24
    36b6:	87 95       	ror	r24
    36b8:	94 2f       	mov	r25, r20
    36ba:	9f 77       	andi	r25, 0x7F	; 127
    36bc:	67 95       	ror	r22
    36be:	66 27       	eor	r22, r22
    36c0:	67 95       	ror	r22
    36c2:	e6 95       	lsr	r30
    36c4:	e2 2e       	mov	r14, r18
    36c6:	a9 2f       	mov	r26, r25
    36c8:	a8 2b       	or	r26, r24
    36ca:	fe 2f       	mov	r31, r30
    36cc:	f6 2b       	or	r31, r22
    36ce:	62 2f       	mov	r22, r18
    36d0:	73 2f       	mov	r23, r19
    36d2:	8a 2f       	mov	r24, r26
    36d4:	9f 2f       	mov	r25, r31
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	e6 e0       	ldi	r30, 0x06	; 6
    36dc:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__+0x18>

000036e0 <__unpack_f>:
    36e0:	dc 01       	movw	r26, r24
    36e2:	fb 01       	movw	r30, r22
    36e4:	2c 91       	ld	r18, X
    36e6:	11 96       	adiw	r26, 0x01	; 1
    36e8:	3c 91       	ld	r19, X
    36ea:	11 97       	sbiw	r26, 0x01	; 1
    36ec:	12 96       	adiw	r26, 0x02	; 2
    36ee:	8c 91       	ld	r24, X
    36f0:	12 97       	sbiw	r26, 0x02	; 2
    36f2:	48 2f       	mov	r20, r24
    36f4:	4f 77       	andi	r20, 0x7F	; 127
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	98 2f       	mov	r25, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	99 27       	eor	r25, r25
    36fe:	99 1f       	adc	r25, r25
    3700:	13 96       	adiw	r26, 0x03	; 3
    3702:	6c 91       	ld	r22, X
    3704:	13 97       	sbiw	r26, 0x03	; 3
    3706:	86 2f       	mov	r24, r22
    3708:	88 0f       	add	r24, r24
    370a:	89 2b       	or	r24, r25
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	66 1f       	adc	r22, r22
    3710:	66 27       	eor	r22, r22
    3712:	66 1f       	adc	r22, r22
    3714:	61 83       	std	Z+1, r22	; 0x01
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	39 f5       	brne	.+78     	; 0x3768 <__unpack_f+0x88>
    371a:	21 15       	cp	r18, r1
    371c:	31 05       	cpc	r19, r1
    371e:	41 05       	cpc	r20, r1
    3720:	51 05       	cpc	r21, r1
    3722:	11 f4       	brne	.+4      	; 0x3728 <__unpack_f+0x48>
    3724:	82 e0       	ldi	r24, 0x02	; 2
    3726:	29 c0       	rjmp	.+82     	; 0x377a <__unpack_f+0x9a>
    3728:	82 e8       	ldi	r24, 0x82	; 130
    372a:	9f ef       	ldi	r25, 0xFF	; 255
    372c:	93 83       	std	Z+3, r25	; 0x03
    372e:	82 83       	std	Z+2, r24	; 0x02
    3730:	67 e0       	ldi	r22, 0x07	; 7
    3732:	22 0f       	add	r18, r18
    3734:	33 1f       	adc	r19, r19
    3736:	44 1f       	adc	r20, r20
    3738:	55 1f       	adc	r21, r21
    373a:	6a 95       	dec	r22
    373c:	d1 f7       	brne	.-12     	; 0x3732 <__unpack_f+0x52>
    373e:	83 e0       	ldi	r24, 0x03	; 3
    3740:	80 83       	st	Z, r24
    3742:	09 c0       	rjmp	.+18     	; 0x3756 <__unpack_f+0x76>
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	44 1f       	adc	r20, r20
    374a:	55 1f       	adc	r21, r21
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	93 81       	ldd	r25, Z+3	; 0x03
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	93 83       	std	Z+3, r25	; 0x03
    3754:	82 83       	std	Z+2, r24	; 0x02
    3756:	20 30       	cpi	r18, 0x00	; 0
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	38 07       	cpc	r19, r24
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	48 07       	cpc	r20, r24
    3760:	80 e4       	ldi	r24, 0x40	; 64
    3762:	58 07       	cpc	r21, r24
    3764:	78 f3       	brcs	.-34     	; 0x3744 <__unpack_f+0x64>
    3766:	20 c0       	rjmp	.+64     	; 0x37a8 <__unpack_f+0xc8>
    3768:	8f 3f       	cpi	r24, 0xFF	; 255
    376a:	91 05       	cpc	r25, r1
    376c:	79 f4       	brne	.+30     	; 0x378c <__unpack_f+0xac>
    376e:	21 15       	cp	r18, r1
    3770:	31 05       	cpc	r19, r1
    3772:	41 05       	cpc	r20, r1
    3774:	51 05       	cpc	r21, r1
    3776:	19 f4       	brne	.+6      	; 0x377e <__unpack_f+0x9e>
    3778:	84 e0       	ldi	r24, 0x04	; 4
    377a:	80 83       	st	Z, r24
    377c:	08 95       	ret
    377e:	44 ff       	sbrs	r20, 4
    3780:	03 c0       	rjmp	.+6      	; 0x3788 <__unpack_f+0xa8>
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	80 83       	st	Z, r24
    3786:	10 c0       	rjmp	.+32     	; 0x37a8 <__unpack_f+0xc8>
    3788:	10 82       	st	Z, r1
    378a:	0e c0       	rjmp	.+28     	; 0x37a8 <__unpack_f+0xc8>
    378c:	8f 57       	subi	r24, 0x7F	; 127
    378e:	90 40       	sbci	r25, 0x00	; 0
    3790:	93 83       	std	Z+3, r25	; 0x03
    3792:	82 83       	std	Z+2, r24	; 0x02
    3794:	83 e0       	ldi	r24, 0x03	; 3
    3796:	80 83       	st	Z, r24
    3798:	87 e0       	ldi	r24, 0x07	; 7
    379a:	22 0f       	add	r18, r18
    379c:	33 1f       	adc	r19, r19
    379e:	44 1f       	adc	r20, r20
    37a0:	55 1f       	adc	r21, r21
    37a2:	8a 95       	dec	r24
    37a4:	d1 f7       	brne	.-12     	; 0x379a <__unpack_f+0xba>
    37a6:	50 64       	ori	r21, 0x40	; 64
    37a8:	24 83       	std	Z+4, r18	; 0x04
    37aa:	35 83       	std	Z+5, r19	; 0x05
    37ac:	46 83       	std	Z+6, r20	; 0x06
    37ae:	57 83       	std	Z+7, r21	; 0x07
    37b0:	08 95       	ret

000037b2 <__fpcmp_parts_f>:
    37b2:	fc 01       	movw	r30, r24
    37b4:	db 01       	movw	r26, r22
    37b6:	90 81       	ld	r25, Z
    37b8:	92 30       	cpi	r25, 0x02	; 2
    37ba:	08 f4       	brcc	.+2      	; 0x37be <__fpcmp_parts_f+0xc>
    37bc:	49 c0       	rjmp	.+146    	; 0x3850 <__fpcmp_parts_f+0x9e>
    37be:	8c 91       	ld	r24, X
    37c0:	82 30       	cpi	r24, 0x02	; 2
    37c2:	08 f4       	brcc	.+2      	; 0x37c6 <__fpcmp_parts_f+0x14>
    37c4:	45 c0       	rjmp	.+138    	; 0x3850 <__fpcmp_parts_f+0x9e>
    37c6:	94 30       	cpi	r25, 0x04	; 4
    37c8:	51 f4       	brne	.+20     	; 0x37de <__fpcmp_parts_f+0x2c>
    37ca:	61 81       	ldd	r22, Z+1	; 0x01
    37cc:	84 30       	cpi	r24, 0x04	; 4
    37ce:	b1 f5       	brne	.+108    	; 0x383c <__fpcmp_parts_f+0x8a>
    37d0:	11 96       	adiw	r26, 0x01	; 1
    37d2:	2c 91       	ld	r18, X
    37d4:	11 97       	sbiw	r26, 0x01	; 1
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	26 1b       	sub	r18, r22
    37da:	31 09       	sbc	r19, r1
    37dc:	41 c0       	rjmp	.+130    	; 0x3860 <__fpcmp_parts_f+0xae>
    37de:	84 30       	cpi	r24, 0x04	; 4
    37e0:	21 f0       	breq	.+8      	; 0x37ea <__fpcmp_parts_f+0x38>
    37e2:	92 30       	cpi	r25, 0x02	; 2
    37e4:	41 f4       	brne	.+16     	; 0x37f6 <__fpcmp_parts_f+0x44>
    37e6:	82 30       	cpi	r24, 0x02	; 2
    37e8:	b1 f1       	breq	.+108    	; 0x3856 <__fpcmp_parts_f+0xa4>
    37ea:	11 96       	adiw	r26, 0x01	; 1
    37ec:	8c 91       	ld	r24, X
    37ee:	11 97       	sbiw	r26, 0x01	; 1
    37f0:	88 23       	and	r24, r24
    37f2:	a1 f1       	breq	.+104    	; 0x385c <__fpcmp_parts_f+0xaa>
    37f4:	2d c0       	rjmp	.+90     	; 0x3850 <__fpcmp_parts_f+0x9e>
    37f6:	61 81       	ldd	r22, Z+1	; 0x01
    37f8:	82 30       	cpi	r24, 0x02	; 2
    37fa:	01 f1       	breq	.+64     	; 0x383c <__fpcmp_parts_f+0x8a>
    37fc:	11 96       	adiw	r26, 0x01	; 1
    37fe:	8c 91       	ld	r24, X
    3800:	11 97       	sbiw	r26, 0x01	; 1
    3802:	68 17       	cp	r22, r24
    3804:	d9 f4       	brne	.+54     	; 0x383c <__fpcmp_parts_f+0x8a>
    3806:	22 81       	ldd	r18, Z+2	; 0x02
    3808:	33 81       	ldd	r19, Z+3	; 0x03
    380a:	12 96       	adiw	r26, 0x02	; 2
    380c:	8d 91       	ld	r24, X+
    380e:	9c 91       	ld	r25, X
    3810:	13 97       	sbiw	r26, 0x03	; 3
    3812:	82 17       	cp	r24, r18
    3814:	93 07       	cpc	r25, r19
    3816:	94 f0       	brlt	.+36     	; 0x383c <__fpcmp_parts_f+0x8a>
    3818:	28 17       	cp	r18, r24
    381a:	39 07       	cpc	r19, r25
    381c:	bc f0       	brlt	.+46     	; 0x384c <__fpcmp_parts_f+0x9a>
    381e:	24 81       	ldd	r18, Z+4	; 0x04
    3820:	35 81       	ldd	r19, Z+5	; 0x05
    3822:	46 81       	ldd	r20, Z+6	; 0x06
    3824:	57 81       	ldd	r21, Z+7	; 0x07
    3826:	14 96       	adiw	r26, 0x04	; 4
    3828:	8d 91       	ld	r24, X+
    382a:	9d 91       	ld	r25, X+
    382c:	0d 90       	ld	r0, X+
    382e:	bc 91       	ld	r27, X
    3830:	a0 2d       	mov	r26, r0
    3832:	82 17       	cp	r24, r18
    3834:	93 07       	cpc	r25, r19
    3836:	a4 07       	cpc	r26, r20
    3838:	b5 07       	cpc	r27, r21
    383a:	18 f4       	brcc	.+6      	; 0x3842 <__fpcmp_parts_f+0x90>
    383c:	66 23       	and	r22, r22
    383e:	41 f0       	breq	.+16     	; 0x3850 <__fpcmp_parts_f+0x9e>
    3840:	0d c0       	rjmp	.+26     	; 0x385c <__fpcmp_parts_f+0xaa>
    3842:	28 17       	cp	r18, r24
    3844:	39 07       	cpc	r19, r25
    3846:	4a 07       	cpc	r20, r26
    3848:	5b 07       	cpc	r21, r27
    384a:	28 f4       	brcc	.+10     	; 0x3856 <__fpcmp_parts_f+0xa4>
    384c:	66 23       	and	r22, r22
    384e:	31 f0       	breq	.+12     	; 0x385c <__fpcmp_parts_f+0xaa>
    3850:	21 e0       	ldi	r18, 0x01	; 1
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	05 c0       	rjmp	.+10     	; 0x3860 <__fpcmp_parts_f+0xae>
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <__fpcmp_parts_f+0xae>
    385c:	2f ef       	ldi	r18, 0xFF	; 255
    385e:	3f ef       	ldi	r19, 0xFF	; 255
    3860:	c9 01       	movw	r24, r18
    3862:	08 95       	ret

00003864 <__divmodhi4>:
    3864:	97 fb       	bst	r25, 7
    3866:	09 2e       	mov	r0, r25
    3868:	07 26       	eor	r0, r23
    386a:	0a d0       	rcall	.+20     	; 0x3880 <__divmodhi4_neg1>
    386c:	77 fd       	sbrc	r23, 7
    386e:	04 d0       	rcall	.+8      	; 0x3878 <__divmodhi4_neg2>
    3870:	0c d0       	rcall	.+24     	; 0x388a <__udivmodhi4>
    3872:	06 d0       	rcall	.+12     	; 0x3880 <__divmodhi4_neg1>
    3874:	00 20       	and	r0, r0
    3876:	1a f4       	brpl	.+6      	; 0x387e <__divmodhi4_exit>

00003878 <__divmodhi4_neg2>:
    3878:	70 95       	com	r23
    387a:	61 95       	neg	r22
    387c:	7f 4f       	sbci	r23, 0xFF	; 255

0000387e <__divmodhi4_exit>:
    387e:	08 95       	ret

00003880 <__divmodhi4_neg1>:
    3880:	f6 f7       	brtc	.-4      	; 0x387e <__divmodhi4_exit>
    3882:	90 95       	com	r25
    3884:	81 95       	neg	r24
    3886:	9f 4f       	sbci	r25, 0xFF	; 255
    3888:	08 95       	ret

0000388a <__udivmodhi4>:
    388a:	aa 1b       	sub	r26, r26
    388c:	bb 1b       	sub	r27, r27
    388e:	51 e1       	ldi	r21, 0x11	; 17
    3890:	07 c0       	rjmp	.+14     	; 0x38a0 <__udivmodhi4_ep>

00003892 <__udivmodhi4_loop>:
    3892:	aa 1f       	adc	r26, r26
    3894:	bb 1f       	adc	r27, r27
    3896:	a6 17       	cp	r26, r22
    3898:	b7 07       	cpc	r27, r23
    389a:	10 f0       	brcs	.+4      	; 0x38a0 <__udivmodhi4_ep>
    389c:	a6 1b       	sub	r26, r22
    389e:	b7 0b       	sbc	r27, r23

000038a0 <__udivmodhi4_ep>:
    38a0:	88 1f       	adc	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	5a 95       	dec	r21
    38a6:	a9 f7       	brne	.-22     	; 0x3892 <__udivmodhi4_loop>
    38a8:	80 95       	com	r24
    38aa:	90 95       	com	r25
    38ac:	bc 01       	movw	r22, r24
    38ae:	cd 01       	movw	r24, r26
    38b0:	08 95       	ret

000038b2 <__prologue_saves__>:
    38b2:	2f 92       	push	r2
    38b4:	3f 92       	push	r3
    38b6:	4f 92       	push	r4
    38b8:	5f 92       	push	r5
    38ba:	6f 92       	push	r6
    38bc:	7f 92       	push	r7
    38be:	8f 92       	push	r8
    38c0:	9f 92       	push	r9
    38c2:	af 92       	push	r10
    38c4:	bf 92       	push	r11
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	ca 1b       	sub	r28, r26
    38dc:	db 0b       	sbc	r29, r27
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	09 94       	ijmp

000038ea <__epilogue_restores__>:
    38ea:	2a 88       	ldd	r2, Y+18	; 0x12
    38ec:	39 88       	ldd	r3, Y+17	; 0x11
    38ee:	48 88       	ldd	r4, Y+16	; 0x10
    38f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    38fc:	b9 84       	ldd	r11, Y+9	; 0x09
    38fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3900:	df 80       	ldd	r13, Y+7	; 0x07
    3902:	ee 80       	ldd	r14, Y+6	; 0x06
    3904:	fd 80       	ldd	r15, Y+5	; 0x05
    3906:	0c 81       	ldd	r16, Y+4	; 0x04
    3908:	1b 81       	ldd	r17, Y+3	; 0x03
    390a:	aa 81       	ldd	r26, Y+2	; 0x02
    390c:	b9 81       	ldd	r27, Y+1	; 0x01
    390e:	ce 0f       	add	r28, r30
    3910:	d1 1d       	adc	r29, r1
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	ed 01       	movw	r28, r26
    391e:	08 95       	ret

00003920 <_exit>:
    3920:	f8 94       	cli

00003922 <__stop_program>:
    3922:	ff cf       	rjmp	.-2      	; 0x3922 <__stop_program>
