
lcdtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000035a2  00003616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00003668  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00003db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000221  00000000  00000000  00003f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e40  00000000  00000000  0000417a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00006fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002142  00000000  00000000  0000812a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  0000a26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  0000a47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  0000a8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000062b  00000000  00000000  0000b4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000bb21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <main>
      7a:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	df 93       	push	r29
      88:	cf 93       	push	r28
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	cd 57       	subi	r28, 0x7D	; 125
      90:	d0 40       	sbci	r29, 0x00	; 0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	f8 94       	cli
      96:	de bf       	out	0x3e, r29	; 62
      98:	0f be       	out	0x3f, r0	; 63
      9a:	cd bf       	out	0x3d, r28	; 61
      9c:	9e 01       	movw	r18, r28
      9e:	24 58       	subi	r18, 0x84	; 132
      a0:	3f 4f       	sbci	r19, 0xFF	; 255
      a2:	f9 01       	movw	r30, r18
      a4:	80 83       	st	Z, r24
      a6:	ce 01       	movw	r24, r28
      a8:	83 58       	subi	r24, 0x83	; 131
      aa:	9f 4f       	sbci	r25, 0xFF	; 255
      ac:	fc 01       	movw	r30, r24
      ae:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      b0:	ce 01       	movw	r24, r28
      b2:	84 58       	subi	r24, 0x84	; 132
      b4:	9f 4f       	sbci	r25, 0xFF	; 255
      b6:	fc 01       	movw	r30, r24
      b8:	80 81       	ld	r24, Z
      ba:	82 95       	swap	r24
      bc:	8f 70       	andi	r24, 0x0F	; 15
      be:	89 83       	std	Y+1, r24	; 0x01
ln=(c & 0x0F);
      c0:	ce 01       	movw	r24, r28
      c2:	84 58       	subi	r24, 0x84	; 132
      c4:	9f 4f       	sbci	r25, 0xFF	; 255
      c6:	fc 01       	movw	r30, r24
      c8:	80 81       	ld	r24, Z
      ca:	8f 70       	andi	r24, 0x0F	; 15
      cc:	8a 83       	std	Y+2, r24	; 0x02

if(isdata==0)
      ce:	ce 01       	movw	r24, r28
      d0:	83 58       	subi	r24, 0x83	; 131
      d2:	9f 4f       	sbci	r25, 0xFF	; 255
      d4:	fc 01       	movw	r30, r24
      d6:	80 81       	ld	r24, Z
      d8:	88 23       	and	r24, r24
      da:	51 f4       	brne	.+20     	; 0xf0 <LCDByte+0x6e>
	CLEAR_RS();
      dc:	82 e3       	ldi	r24, 0x32	; 50
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	22 e3       	ldi	r18, 0x32	; 50
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	f9 01       	movw	r30, r18
      e6:	20 81       	ld	r18, Z
      e8:	27 7f       	andi	r18, 0xF7	; 247
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18
      ee:	09 c0       	rjmp	.+18     	; 0x102 <LCDByte+0x80>
else
	SET_RS();
      f0:	82 e3       	ldi	r24, 0x32	; 50
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	22 e3       	ldi	r18, 0x32	; 50
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	28 60       	ori	r18, 0x08	; 8
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	bf e3       	ldi	r27, 0x3F	; 63
     10a:	8c 83       	std	Y+4, r24	; 0x04
     10c:	9d 83       	std	Y+5, r25	; 0x05
     10e:	ae 83       	std	Y+6, r26	; 0x06
     110:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     112:	6c 81       	ldd	r22, Y+4	; 0x04
     114:	7d 81       	ldd	r23, Y+5	; 0x05
     116:	8e 81       	ldd	r24, Y+6	; 0x06
     118:	9f 81       	ldd	r25, Y+7	; 0x07
     11a:	2b ea       	ldi	r18, 0xAB	; 171
     11c:	3a ea       	ldi	r19, 0xAA	; 170
     11e:	4a ea       	ldi	r20, 0xAA	; 170
     120:	5e e3       	ldi	r21, 0x3E	; 62
     122:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     126:	dc 01       	movw	r26, r24
     128:	cb 01       	movw	r24, r22
     12a:	88 87       	std	Y+8, r24	; 0x08
     12c:	99 87       	std	Y+9, r25	; 0x09
     12e:	aa 87       	std	Y+10, r26	; 0x0a
     130:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	68 85       	ldd	r22, Y+8	; 0x08
     136:	79 85       	ldd	r23, Y+9	; 0x09
     138:	8a 85       	ldd	r24, Y+10	; 0x0a
     13a:	9b 85       	ldd	r25, Y+11	; 0x0b
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	40 e8       	ldi	r20, 0x80	; 128
     142:	5f e3       	ldi	r21, 0x3F	; 63
     144:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     148:	88 23       	and	r24, r24
     14a:	0c f0       	brlt	.+2      	; 0x14e <LCDByte+0xcc>
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	11 23       	and	r17, r17
     150:	19 f0       	breq	.+6      	; 0x158 <LCDByte+0xd6>
		__ticks = 1;
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	8c 87       	std	Y+12, r24	; 0x0c
     156:	a3 c0       	rjmp	.+326    	; 0x29e <LCDByte+0x21c>
	else if (__tmp > 255)
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	68 85       	ldd	r22, Y+8	; 0x08
     15c:	79 85       	ldd	r23, Y+9	; 0x09
     15e:	8a 85       	ldd	r24, Y+10	; 0x0a
     160:	9b 85       	ldd	r25, Y+11	; 0x0b
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	4f e7       	ldi	r20, 0x7F	; 127
     168:	53 e4       	ldi	r21, 0x43	; 67
     16a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     16e:	18 16       	cp	r1, r24
     170:	0c f0       	brlt	.+2      	; 0x174 <LCDByte+0xf2>
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	11 23       	and	r17, r17
     176:	09 f4       	brne	.+2      	; 0x17a <LCDByte+0xf8>
     178:	89 c0       	rjmp	.+274    	; 0x28c <LCDByte+0x20a>
	{
		_delay_ms(__us / 1000.0);
     17a:	6c 81       	ldd	r22, Y+4	; 0x04
     17c:	7d 81       	ldd	r23, Y+5	; 0x05
     17e:	8e 81       	ldd	r24, Y+6	; 0x06
     180:	9f 81       	ldd	r25, Y+7	; 0x07
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	4a e7       	ldi	r20, 0x7A	; 122
     188:	54 e4       	ldi	r21, 0x44	; 68
     18a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     18e:	dc 01       	movw	r26, r24
     190:	cb 01       	movw	r24, r22
     192:	8d 87       	std	Y+13, r24	; 0x0d
     194:	9e 87       	std	Y+14, r25	; 0x0e
     196:	af 87       	std	Y+15, r26	; 0x0f
     198:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     19a:	6d 85       	ldd	r22, Y+13	; 0x0d
     19c:	7e 85       	ldd	r23, Y+14	; 0x0e
     19e:	8f 85       	ldd	r24, Y+15	; 0x0f
     1a0:	98 89       	ldd	r25, Y+16	; 0x10
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	4a e7       	ldi	r20, 0x7A	; 122
     1a8:	53 e4       	ldi	r21, 0x43	; 67
     1aa:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     1ae:	dc 01       	movw	r26, r24
     1b0:	cb 01       	movw	r24, r22
     1b2:	89 8b       	std	Y+17, r24	; 0x11
     1b4:	9a 8b       	std	Y+18, r25	; 0x12
     1b6:	ab 8b       	std	Y+19, r26	; 0x13
     1b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	69 89       	ldd	r22, Y+17	; 0x11
     1be:	7a 89       	ldd	r23, Y+18	; 0x12
     1c0:	8b 89       	ldd	r24, Y+19	; 0x13
     1c2:	9c 89       	ldd	r25, Y+20	; 0x14
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e8       	ldi	r20, 0x80	; 128
     1ca:	5f e3       	ldi	r21, 0x3F	; 63
     1cc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     1d0:	88 23       	and	r24, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <LCDByte+0x154>
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	11 23       	and	r17, r17
     1d8:	29 f0       	breq	.+10     	; 0x1e4 <LCDByte+0x162>
		__ticks = 1;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9e 8b       	std	Y+22, r25	; 0x16
     1e0:	8d 8b       	std	Y+21, r24	; 0x15
     1e2:	46 c0       	rjmp	.+140    	; 0x270 <LCDByte+0x1ee>
	else if (__tmp > 65535)
     1e4:	11 e0       	ldi	r17, 0x01	; 1
     1e6:	69 89       	ldd	r22, Y+17	; 0x11
     1e8:	7a 89       	ldd	r23, Y+18	; 0x12
     1ea:	8b 89       	ldd	r24, Y+19	; 0x13
     1ec:	9c 89       	ldd	r25, Y+20	; 0x14
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	3f ef       	ldi	r19, 0xFF	; 255
     1f2:	4f e7       	ldi	r20, 0x7F	; 127
     1f4:	57 e4       	ldi	r21, 0x47	; 71
     1f6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	0c f0       	brlt	.+2      	; 0x200 <LCDByte+0x17e>
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	11 23       	and	r17, r17
     202:	61 f1       	breq	.+88     	; 0x25c <LCDByte+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     204:	6d 85       	ldd	r22, Y+13	; 0x0d
     206:	7e 85       	ldd	r23, Y+14	; 0x0e
     208:	8f 85       	ldd	r24, Y+15	; 0x0f
     20a:	98 89       	ldd	r25, Y+16	; 0x10
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e2       	ldi	r20, 0x20	; 32
     212:	51 e4       	ldi	r21, 0x41	; 65
     214:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	9e 8b       	std	Y+22, r25	; 0x16
     22a:	8d 8b       	std	Y+21, r24	; 0x15
     22c:	12 c0       	rjmp	.+36     	; 0x252 <LCDByte+0x1d0>
     22e:	89 e1       	ldi	r24, 0x19	; 25
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	98 8f       	std	Y+24, r25	; 0x18
     234:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     236:	8f 89       	ldd	r24, Y+23	; 0x17
     238:	98 8d       	ldd	r25, Y+24	; 0x18
     23a:	8c 01       	movw	r16, r24
     23c:	c8 01       	movw	r24, r16
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCDByte+0x1bc>
     242:	8c 01       	movw	r16, r24
     244:	18 8f       	std	Y+24, r17	; 0x18
     246:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     248:	8d 89       	ldd	r24, Y+21	; 0x15
     24a:	9e 89       	ldd	r25, Y+22	; 0x16
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	9e 8b       	std	Y+22, r25	; 0x16
     250:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     252:	8d 89       	ldd	r24, Y+21	; 0x15
     254:	9e 89       	ldd	r25, Y+22	; 0x16
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	51 f7       	brne	.-44     	; 0x22e <LCDByte+0x1ac>
     25a:	28 c0       	rjmp	.+80     	; 0x2ac <LCDByte+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	69 89       	ldd	r22, Y+17	; 0x11
     25e:	7a 89       	ldd	r23, Y+18	; 0x12
     260:	8b 89       	ldd	r24, Y+19	; 0x13
     262:	9c 89       	ldd	r25, Y+20	; 0x14
     264:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     268:	dc 01       	movw	r26, r24
     26a:	cb 01       	movw	r24, r22
     26c:	9e 8b       	std	Y+22, r25	; 0x16
     26e:	8d 8b       	std	Y+21, r24	; 0x15
     270:	8d 89       	ldd	r24, Y+21	; 0x15
     272:	9e 89       	ldd	r25, Y+22	; 0x16
     274:	9a 8f       	std	Y+26, r25	; 0x1a
     276:	89 8f       	std	Y+25, r24	; 0x19
     278:	89 8d       	ldd	r24, Y+25	; 0x19
     27a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     27c:	8c 01       	movw	r16, r24
     27e:	f8 01       	movw	r30, r16
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <LCDByte+0x1fe>
     284:	8f 01       	movw	r16, r30
     286:	1a 8f       	std	Y+26, r17	; 0x1a
     288:	09 8f       	std	Y+25, r16	; 0x19
     28a:	10 c0       	rjmp	.+32     	; 0x2ac <LCDByte+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     28c:	68 85       	ldd	r22, Y+8	; 0x08
     28e:	79 85       	ldd	r23, Y+9	; 0x09
     290:	8a 85       	ldd	r24, Y+10	; 0x0a
     292:	9b 85       	ldd	r25, Y+11	; 0x0b
     294:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	8c 87       	std	Y+12, r24	; 0x0c
     29e:	8c 85       	ldd	r24, Y+12	; 0x0c
     2a0:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2a4:	18 2f       	mov	r17, r24
     2a6:	1a 95       	dec	r17
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCDByte+0x224>
     2aa:	1b 8f       	std	Y+27, r17	; 0x1b

_delay_us(0.500);		//tAS

SET_E();
     2ac:	88 e3       	ldi	r24, 0x38	; 56
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	28 e3       	ldi	r18, 0x38	; 56
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	20 81       	ld	r18, Z
     2b8:	20 61       	ori	r18, 0x10	; 16
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     2be:	88 e3       	ldi	r24, 0x38	; 56
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	fc 01       	movw	r30, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	98 2f       	mov	r25, r24
     2c8:	90 7f       	andi	r25, 0xF0	; 240
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	89 2b       	or	r24, r25
     2ce:	8b 83       	std	Y+3, r24	; 0x03
LCD_DATA_PORT=temp;
     2d0:	88 e3       	ldi	r24, 0x38	; 56
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	2b 81       	ldd	r18, Y+3	; 0x03
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	a0 e8       	ldi	r26, 0x80	; 128
     2e0:	bf e3       	ldi	r27, 0x3F	; 63
     2e2:	8c 8f       	std	Y+28, r24	; 0x1c
     2e4:	9d 8f       	std	Y+29, r25	; 0x1d
     2e6:	ae 8f       	std	Y+30, r26	; 0x1e
     2e8:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     2ea:	6c 8d       	ldd	r22, Y+28	; 0x1c
     2ec:	7d 8d       	ldd	r23, Y+29	; 0x1d
     2ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2f2:	2b ea       	ldi	r18, 0xAB	; 171
     2f4:	3a ea       	ldi	r19, 0xAA	; 170
     2f6:	4a ea       	ldi	r20, 0xAA	; 170
     2f8:	5e e3       	ldi	r21, 0x3E	; 62
     2fa:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	88 a3       	std	Y+32, r24	; 0x20
     304:	99 a3       	std	Y+33, r25	; 0x21
     306:	aa a3       	std	Y+34, r26	; 0x22
     308:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     30a:	11 e0       	ldi	r17, 0x01	; 1
     30c:	68 a1       	ldd	r22, Y+32	; 0x20
     30e:	79 a1       	ldd	r23, Y+33	; 0x21
     310:	8a a1       	ldd	r24, Y+34	; 0x22
     312:	9b a1       	ldd	r25, Y+35	; 0x23
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     320:	88 23       	and	r24, r24
     322:	0c f0       	brlt	.+2      	; 0x326 <LCDByte+0x2a4>
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	11 23       	and	r17, r17
     328:	19 f0       	breq	.+6      	; 0x330 <LCDByte+0x2ae>
		__ticks = 1;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	8c a3       	std	Y+36, r24	; 0x24
     32e:	a3 c0       	rjmp	.+326    	; 0x476 <LCDByte+0x3f4>
	else if (__tmp > 255)
     330:	11 e0       	ldi	r17, 0x01	; 1
     332:	68 a1       	ldd	r22, Y+32	; 0x20
     334:	79 a1       	ldd	r23, Y+33	; 0x21
     336:	8a a1       	ldd	r24, Y+34	; 0x22
     338:	9b a1       	ldd	r25, Y+35	; 0x23
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	4f e7       	ldi	r20, 0x7F	; 127
     340:	53 e4       	ldi	r21, 0x43	; 67
     342:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     346:	18 16       	cp	r1, r24
     348:	0c f0       	brlt	.+2      	; 0x34c <LCDByte+0x2ca>
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	11 23       	and	r17, r17
     34e:	09 f4       	brne	.+2      	; 0x352 <LCDByte+0x2d0>
     350:	89 c0       	rjmp	.+274    	; 0x464 <LCDByte+0x3e2>
	{
		_delay_ms(__us / 1000.0);
     352:	6c 8d       	ldd	r22, Y+28	; 0x1c
     354:	7d 8d       	ldd	r23, Y+29	; 0x1d
     356:	8e 8d       	ldd	r24, Y+30	; 0x1e
     358:	9f 8d       	ldd	r25, Y+31	; 0x1f
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a e7       	ldi	r20, 0x7A	; 122
     360:	54 e4       	ldi	r21, 0x44	; 68
     362:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	8d a3       	std	Y+37, r24	; 0x25
     36c:	9e a3       	std	Y+38, r25	; 0x26
     36e:	af a3       	std	Y+39, r26	; 0x27
     370:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     372:	6d a1       	ldd	r22, Y+37	; 0x25
     374:	7e a1       	ldd	r23, Y+38	; 0x26
     376:	8f a1       	ldd	r24, Y+39	; 0x27
     378:	98 a5       	ldd	r25, Y+40	; 0x28
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	4a e7       	ldi	r20, 0x7A	; 122
     380:	53 e4       	ldi	r21, 0x43	; 67
     382:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	89 a7       	std	Y+41, r24	; 0x29
     38c:	9a a7       	std	Y+42, r25	; 0x2a
     38e:	ab a7       	std	Y+43, r26	; 0x2b
     390:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     392:	11 e0       	ldi	r17, 0x01	; 1
     394:	69 a5       	ldd	r22, Y+41	; 0x29
     396:	7a a5       	ldd	r23, Y+42	; 0x2a
     398:	8b a5       	ldd	r24, Y+43	; 0x2b
     39a:	9c a5       	ldd	r25, Y+44	; 0x2c
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e8       	ldi	r20, 0x80	; 128
     3a2:	5f e3       	ldi	r21, 0x3F	; 63
     3a4:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     3a8:	88 23       	and	r24, r24
     3aa:	0c f0       	brlt	.+2      	; 0x3ae <LCDByte+0x32c>
     3ac:	10 e0       	ldi	r17, 0x00	; 0
     3ae:	11 23       	and	r17, r17
     3b0:	29 f0       	breq	.+10     	; 0x3bc <LCDByte+0x33a>
		__ticks = 1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	9e a7       	std	Y+46, r25	; 0x2e
     3b8:	8d a7       	std	Y+45, r24	; 0x2d
     3ba:	46 c0       	rjmp	.+140    	; 0x448 <LCDByte+0x3c6>
	else if (__tmp > 65535)
     3bc:	11 e0       	ldi	r17, 0x01	; 1
     3be:	69 a5       	ldd	r22, Y+41	; 0x29
     3c0:	7a a5       	ldd	r23, Y+42	; 0x2a
     3c2:	8b a5       	ldd	r24, Y+43	; 0x2b
     3c4:	9c a5       	ldd	r25, Y+44	; 0x2c
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	3f ef       	ldi	r19, 0xFF	; 255
     3ca:	4f e7       	ldi	r20, 0x7F	; 127
     3cc:	57 e4       	ldi	r21, 0x47	; 71
     3ce:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	0c f0       	brlt	.+2      	; 0x3d8 <LCDByte+0x356>
     3d6:	10 e0       	ldi	r17, 0x00	; 0
     3d8:	11 23       	and	r17, r17
     3da:	61 f1       	breq	.+88     	; 0x434 <LCDByte+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3dc:	6d a1       	ldd	r22, Y+37	; 0x25
     3de:	7e a1       	ldd	r23, Y+38	; 0x26
     3e0:	8f a1       	ldd	r24, Y+39	; 0x27
     3e2:	98 a5       	ldd	r25, Y+40	; 0x28
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e2       	ldi	r20, 0x20	; 32
     3ea:	51 e4       	ldi	r21, 0x41	; 65
     3ec:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	bc 01       	movw	r22, r24
     3f6:	cd 01       	movw	r24, r26
     3f8:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	9e a7       	std	Y+46, r25	; 0x2e
     402:	8d a7       	std	Y+45, r24	; 0x2d
     404:	12 c0       	rjmp	.+36     	; 0x42a <LCDByte+0x3a8>
     406:	89 e1       	ldi	r24, 0x19	; 25
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	98 ab       	std	Y+48, r25	; 0x30
     40c:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     40e:	8f a5       	ldd	r24, Y+47	; 0x2f
     410:	98 a9       	ldd	r25, Y+48	; 0x30
     412:	8c 01       	movw	r16, r24
     414:	c8 01       	movw	r24, r16
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <LCDByte+0x394>
     41a:	8c 01       	movw	r16, r24
     41c:	18 ab       	std	Y+48, r17	; 0x30
     41e:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     420:	8d a5       	ldd	r24, Y+45	; 0x2d
     422:	9e a5       	ldd	r25, Y+46	; 0x2e
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	9e a7       	std	Y+46, r25	; 0x2e
     428:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     42a:	8d a5       	ldd	r24, Y+45	; 0x2d
     42c:	9e a5       	ldd	r25, Y+46	; 0x2e
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	51 f7       	brne	.-44     	; 0x406 <LCDByte+0x384>
     432:	28 c0       	rjmp	.+80     	; 0x484 <LCDByte+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     434:	69 a5       	ldd	r22, Y+41	; 0x29
     436:	7a a5       	ldd	r23, Y+42	; 0x2a
     438:	8b a5       	ldd	r24, Y+43	; 0x2b
     43a:	9c a5       	ldd	r25, Y+44	; 0x2c
     43c:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	9e a7       	std	Y+46, r25	; 0x2e
     446:	8d a7       	std	Y+45, r24	; 0x2d
     448:	8d a5       	ldd	r24, Y+45	; 0x2d
     44a:	9e a5       	ldd	r25, Y+46	; 0x2e
     44c:	9a ab       	std	Y+50, r25	; 0x32
     44e:	89 ab       	std	Y+49, r24	; 0x31
     450:	89 a9       	ldd	r24, Y+49	; 0x31
     452:	9a a9       	ldd	r25, Y+50	; 0x32
     454:	8c 01       	movw	r16, r24
     456:	f8 01       	movw	r30, r16
     458:	31 97       	sbiw	r30, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <LCDByte+0x3d6>
     45c:	8f 01       	movw	r16, r30
     45e:	1a ab       	std	Y+50, r17	; 0x32
     460:	09 ab       	std	Y+49, r16	; 0x31
     462:	10 c0       	rjmp	.+32     	; 0x484 <LCDByte+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     464:	68 a1       	ldd	r22, Y+32	; 0x20
     466:	79 a1       	ldd	r23, Y+33	; 0x21
     468:	8a a1       	ldd	r24, Y+34	; 0x22
     46a:	9b a1       	ldd	r25, Y+35	; 0x23
     46c:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	8c a3       	std	Y+36, r24	; 0x24
     476:	8c a1       	ldd	r24, Y+36	; 0x24
     478:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47a:	8b a9       	ldd	r24, Y+51	; 0x33
     47c:	18 2f       	mov	r17, r24
     47e:	1a 95       	dec	r17
     480:	f1 f7       	brne	.-4      	; 0x47e <LCDByte+0x3fc>
     482:	1b ab       	std	Y+51, r17	; 0x33

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     484:	88 e3       	ldi	r24, 0x38	; 56
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	28 e3       	ldi	r18, 0x38	; 56
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	2f 7e       	andi	r18, 0xEF	; 239
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	a0 e8       	ldi	r26, 0x80	; 128
     49c:	bf e3       	ldi	r27, 0x3F	; 63
     49e:	8c ab       	std	Y+52, r24	; 0x34
     4a0:	9d ab       	std	Y+53, r25	; 0x35
     4a2:	ae ab       	std	Y+54, r26	; 0x36
     4a4:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     4a6:	6c a9       	ldd	r22, Y+52	; 0x34
     4a8:	7d a9       	ldd	r23, Y+53	; 0x35
     4aa:	8e a9       	ldd	r24, Y+54	; 0x36
     4ac:	9f a9       	ldd	r25, Y+55	; 0x37
     4ae:	2b ea       	ldi	r18, 0xAB	; 171
     4b0:	3a ea       	ldi	r19, 0xAA	; 170
     4b2:	4a ea       	ldi	r20, 0xAA	; 170
     4b4:	5e e3       	ldi	r21, 0x3E	; 62
     4b6:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	88 af       	std	Y+56, r24	; 0x38
     4c0:	99 af       	std	Y+57, r25	; 0x39
     4c2:	aa af       	std	Y+58, r26	; 0x3a
     4c4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     4c6:	11 e0       	ldi	r17, 0x01	; 1
     4c8:	68 ad       	ldd	r22, Y+56	; 0x38
     4ca:	79 ad       	ldd	r23, Y+57	; 0x39
     4cc:	8a ad       	ldd	r24, Y+58	; 0x3a
     4ce:	9b ad       	ldd	r25, Y+59	; 0x3b
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e8       	ldi	r20, 0x80	; 128
     4d6:	5f e3       	ldi	r21, 0x3F	; 63
     4d8:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     4dc:	88 23       	and	r24, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <LCDByte+0x460>
     4e0:	10 e0       	ldi	r17, 0x00	; 0
     4e2:	11 23       	and	r17, r17
     4e4:	19 f0       	breq	.+6      	; 0x4ec <LCDByte+0x46a>
		__ticks = 1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	8c af       	std	Y+60, r24	; 0x3c
     4ea:	f3 c0       	rjmp	.+486    	; 0x6d2 <LCDByte+0x650>
	else if (__tmp > 255)
     4ec:	11 e0       	ldi	r17, 0x01	; 1
     4ee:	68 ad       	ldd	r22, Y+56	; 0x38
     4f0:	79 ad       	ldd	r23, Y+57	; 0x39
     4f2:	8a ad       	ldd	r24, Y+58	; 0x3a
     4f4:	9b ad       	ldd	r25, Y+59	; 0x3b
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	4f e7       	ldi	r20, 0x7F	; 127
     4fc:	53 e4       	ldi	r21, 0x43	; 67
     4fe:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     502:	18 16       	cp	r1, r24
     504:	0c f0       	brlt	.+2      	; 0x508 <LCDByte+0x486>
     506:	10 e0       	ldi	r17, 0x00	; 0
     508:	11 23       	and	r17, r17
     50a:	09 f4       	brne	.+2      	; 0x50e <LCDByte+0x48c>
     50c:	d9 c0       	rjmp	.+434    	; 0x6c0 <LCDByte+0x63e>
	{
		_delay_ms(__us / 1000.0);
     50e:	6c a9       	ldd	r22, Y+52	; 0x34
     510:	7d a9       	ldd	r23, Y+53	; 0x35
     512:	8e a9       	ldd	r24, Y+54	; 0x36
     514:	9f a9       	ldd	r25, Y+55	; 0x37
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	4a e7       	ldi	r20, 0x7A	; 122
     51c:	54 e4       	ldi	r21, 0x44	; 68
     51e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	9e 01       	movw	r18, r28
     528:	23 5c       	subi	r18, 0xC3	; 195
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	f9 01       	movw	r30, r18
     52e:	80 83       	st	Z, r24
     530:	91 83       	std	Z+1, r25	; 0x01
     532:	a2 83       	std	Z+2, r26	; 0x02
     534:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     536:	8e 01       	movw	r16, r28
     538:	0f 5b       	subi	r16, 0xBF	; 191
     53a:	1f 4f       	sbci	r17, 0xFF	; 255
     53c:	ce 01       	movw	r24, r28
     53e:	cd 96       	adiw	r24, 0x3d	; 61
     540:	fc 01       	movw	r30, r24
     542:	60 81       	ld	r22, Z
     544:	71 81       	ldd	r23, Z+1	; 0x01
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	93 81       	ldd	r25, Z+3	; 0x03
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	4a e7       	ldi	r20, 0x7A	; 122
     550:	53 e4       	ldi	r21, 0x43	; 67
     552:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	f8 01       	movw	r30, r16
     55c:	80 83       	st	Z, r24
     55e:	91 83       	std	Z+1, r25	; 0x01
     560:	a2 83       	std	Z+2, r26	; 0x02
     562:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     564:	ce 01       	movw	r24, r28
     566:	8f 5b       	subi	r24, 0xBF	; 191
     568:	9f 4f       	sbci	r25, 0xFF	; 255
     56a:	11 e0       	ldi	r17, 0x01	; 1
     56c:	fc 01       	movw	r30, r24
     56e:	60 81       	ld	r22, Z
     570:	71 81       	ldd	r23, Z+1	; 0x01
     572:	82 81       	ldd	r24, Z+2	; 0x02
     574:	93 81       	ldd	r25, Z+3	; 0x03
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e8       	ldi	r20, 0x80	; 128
     57c:	5f e3       	ldi	r21, 0x3F	; 63
     57e:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     582:	88 23       	and	r24, r24
     584:	0c f0       	brlt	.+2      	; 0x588 <LCDByte+0x506>
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	11 23       	and	r17, r17
     58a:	49 f0       	breq	.+18     	; 0x59e <LCDByte+0x51c>
		__ticks = 1;
     58c:	ce 01       	movw	r24, r28
     58e:	8b 5b       	subi	r24, 0xBB	; 187
     590:	9f 4f       	sbci	r25, 0xFF	; 255
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	fc 01       	movw	r30, r24
     598:	31 83       	std	Z+1, r19	; 0x01
     59a:	20 83       	st	Z, r18
     59c:	73 c0       	rjmp	.+230    	; 0x684 <LCDByte+0x602>
	else if (__tmp > 65535)
     59e:	ce 01       	movw	r24, r28
     5a0:	8f 5b       	subi	r24, 0xBF	; 191
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	11 e0       	ldi	r17, 0x01	; 1
     5a6:	fc 01       	movw	r30, r24
     5a8:	60 81       	ld	r22, Z
     5aa:	71 81       	ldd	r23, Z+1	; 0x01
     5ac:	82 81       	ldd	r24, Z+2	; 0x02
     5ae:	93 81       	ldd	r25, Z+3	; 0x03
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	3f ef       	ldi	r19, 0xFF	; 255
     5b4:	4f e7       	ldi	r20, 0x7F	; 127
     5b6:	57 e4       	ldi	r21, 0x47	; 71
     5b8:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     5bc:	18 16       	cp	r1, r24
     5be:	0c f0       	brlt	.+2      	; 0x5c2 <LCDByte+0x540>
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	11 23       	and	r17, r17
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <LCDByte+0x546>
     5c6:	4c c0       	rjmp	.+152    	; 0x660 <LCDByte+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c8:	ce 01       	movw	r24, r28
     5ca:	cd 96       	adiw	r24, 0x3d	; 61
     5cc:	fc 01       	movw	r30, r24
     5ce:	60 81       	ld	r22, Z
     5d0:	71 81       	ldd	r23, Z+1	; 0x01
     5d2:	82 81       	ldd	r24, Z+2	; 0x02
     5d4:	93 81       	ldd	r25, Z+3	; 0x03
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e2       	ldi	r20, 0x20	; 32
     5dc:	51 e4       	ldi	r21, 0x41	; 65
     5de:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	8e 01       	movw	r16, r28
     5e8:	0b 5b       	subi	r16, 0xBB	; 187
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	f8 01       	movw	r30, r16
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	27 c0       	rjmp	.+78     	; 0x64e <LCDByte+0x5cc>
     600:	ce 01       	movw	r24, r28
     602:	89 5b       	subi	r24, 0xB9	; 185
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	29 e1       	ldi	r18, 0x19	; 25
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	31 83       	std	Z+1, r19	; 0x01
     60e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     610:	ce 01       	movw	r24, r28
     612:	89 5b       	subi	r24, 0xB9	; 185
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8c 01       	movw	r16, r24
     61e:	c8 01       	movw	r24, r16
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <LCDByte+0x59e>
     624:	8c 01       	movw	r16, r24
     626:	ce 01       	movw	r24, r28
     628:	89 5b       	subi	r24, 0xB9	; 185
     62a:	9f 4f       	sbci	r25, 0xFF	; 255
     62c:	fc 01       	movw	r30, r24
     62e:	11 83       	std	Z+1, r17	; 0x01
     630:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     632:	ce 01       	movw	r24, r28
     634:	8b 5b       	subi	r24, 0xBB	; 187
     636:	9f 4f       	sbci	r25, 0xFF	; 255
     638:	9e 01       	movw	r18, r28
     63a:	2b 5b       	subi	r18, 0xBB	; 187
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	31 81       	ldd	r19, Z+1	; 0x01
     644:	21 50       	subi	r18, 0x01	; 1
     646:	30 40       	sbci	r19, 0x00	; 0
     648:	fc 01       	movw	r30, r24
     64a:	31 83       	std	Z+1, r19	; 0x01
     64c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64e:	ce 01       	movw	r24, r28
     650:	8b 5b       	subi	r24, 0xBB	; 187
     652:	9f 4f       	sbci	r25, 0xFF	; 255
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	00 97       	sbiw	r24, 0x00	; 0
     65c:	89 f6       	brne	.-94     	; 0x600 <LCDByte+0x57e>
     65e:	4c c0       	rjmp	.+152    	; 0x6f8 <LCDByte+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     660:	8e 01       	movw	r16, r28
     662:	0b 5b       	subi	r16, 0xBB	; 187
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	ce 01       	movw	r24, r28
     668:	8f 5b       	subi	r24, 0xBF	; 191
     66a:	9f 4f       	sbci	r25, 0xFF	; 255
     66c:	fc 01       	movw	r30, r24
     66e:	60 81       	ld	r22, Z
     670:	71 81       	ldd	r23, Z+1	; 0x01
     672:	82 81       	ldd	r24, Z+2	; 0x02
     674:	93 81       	ldd	r25, Z+3	; 0x03
     676:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	f8 01       	movw	r30, r16
     680:	91 83       	std	Z+1, r25	; 0x01
     682:	80 83       	st	Z, r24
     684:	ce 01       	movw	r24, r28
     686:	87 5b       	subi	r24, 0xB7	; 183
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	9e 01       	movw	r18, r28
     68c:	2b 5b       	subi	r18, 0xBB	; 187
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	f9 01       	movw	r30, r18
     692:	20 81       	ld	r18, Z
     694:	31 81       	ldd	r19, Z+1	; 0x01
     696:	fc 01       	movw	r30, r24
     698:	31 83       	std	Z+1, r19	; 0x01
     69a:	20 83       	st	Z, r18
     69c:	ce 01       	movw	r24, r28
     69e:	87 5b       	subi	r24, 0xB7	; 183
     6a0:	9f 4f       	sbci	r25, 0xFF	; 255
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	8c 01       	movw	r16, r24
     6aa:	c8 01       	movw	r24, r16
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCDByte+0x62a>
     6b0:	8c 01       	movw	r16, r24
     6b2:	ce 01       	movw	r24, r28
     6b4:	87 5b       	subi	r24, 0xB7	; 183
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	fc 01       	movw	r30, r24
     6ba:	11 83       	std	Z+1, r17	; 0x01
     6bc:	00 83       	st	Z, r16
     6be:	1c c0       	rjmp	.+56     	; 0x6f8 <LCDByte+0x676>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6c0:	68 ad       	ldd	r22, Y+56	; 0x38
     6c2:	79 ad       	ldd	r23, Y+57	; 0x39
     6c4:	8a ad       	ldd	r24, Y+58	; 0x3a
     6c6:	9b ad       	ldd	r25, Y+59	; 0x3b
     6c8:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	8c af       	std	Y+60, r24	; 0x3c
     6d2:	ce 01       	movw	r24, r28
     6d4:	85 5b       	subi	r24, 0xB5	; 181
     6d6:	9f 4f       	sbci	r25, 0xFF	; 255
     6d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6de:	ce 01       	movw	r24, r28
     6e0:	85 5b       	subi	r24, 0xB5	; 181
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	80 81       	ld	r24, Z
     6e8:	18 2f       	mov	r17, r24
     6ea:	1a 95       	dec	r17
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCDByte+0x668>
     6ee:	ce 01       	movw	r24, r28
     6f0:	85 5b       	subi	r24, 0xB5	; 181
     6f2:	9f 4f       	sbci	r25, 0xFF	; 255
     6f4:	fc 01       	movw	r30, r24
     6f6:	10 83       	st	Z, r17

_delay_us(1);

//Send the lower nibble
SET_E();
     6f8:	88 e3       	ldi	r24, 0x38	; 56
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	28 e3       	ldi	r18, 0x38	; 56
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	20 61       	ori	r18, 0x10	; 16
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     70a:	88 e3       	ldi	r24, 0x38	; 56
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	fc 01       	movw	r30, r24
     710:	80 81       	ld	r24, Z
     712:	98 2f       	mov	r25, r24
     714:	90 7f       	andi	r25, 0xF0	; 240
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	89 2b       	or	r24, r25
     71a:	8b 83       	std	Y+3, r24	; 0x03

LCD_DATA_PORT=temp;
     71c:	88 e3       	ldi	r24, 0x38	; 56
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b 81       	ldd	r18, Y+3	; 0x03
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
     726:	9e 01       	movw	r18, r28
     728:	24 5b       	subi	r18, 0xB4	; 180
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	a0 e8       	ldi	r26, 0x80	; 128
     732:	bf e3       	ldi	r27, 0x3F	; 63
     734:	f9 01       	movw	r30, r18
     736:	80 83       	st	Z, r24
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	a2 83       	std	Z+2, r26	; 0x02
     73c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     73e:	8e 01       	movw	r16, r28
     740:	00 5b       	subi	r16, 0xB0	; 176
     742:	1f 4f       	sbci	r17, 0xFF	; 255
     744:	ce 01       	movw	r24, r28
     746:	84 5b       	subi	r24, 0xB4	; 180
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	fc 01       	movw	r30, r24
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	2b ea       	ldi	r18, 0xAB	; 171
     756:	3a ea       	ldi	r19, 0xAA	; 170
     758:	4a ea       	ldi	r20, 0xAA	; 170
     75a:	5e e3       	ldi	r21, 0x3E	; 62
     75c:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	f8 01       	movw	r30, r16
     766:	80 83       	st	Z, r24
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	a2 83       	std	Z+2, r26	; 0x02
     76c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     76e:	ce 01       	movw	r24, r28
     770:	80 5b       	subi	r24, 0xB0	; 176
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	11 e0       	ldi	r17, 0x01	; 1
     776:	fc 01       	movw	r30, r24
     778:	60 81       	ld	r22, Z
     77a:	71 81       	ldd	r23, Z+1	; 0x01
     77c:	82 81       	ldd	r24, Z+2	; 0x02
     77e:	93 81       	ldd	r25, Z+3	; 0x03
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e8       	ldi	r20, 0x80	; 128
     786:	5f e3       	ldi	r21, 0x3F	; 63
     788:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     78c:	88 23       	and	r24, r24
     78e:	0c f0       	brlt	.+2      	; 0x792 <LCDByte+0x710>
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	11 23       	and	r17, r17
     794:	39 f0       	breq	.+14     	; 0x7a4 <LCDByte+0x722>
		__ticks = 1;
     796:	ce 01       	movw	r24, r28
     798:	8c 5a       	subi	r24, 0xAC	; 172
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	05 c1       	rjmp	.+522    	; 0x9ae <__stack+0x14f>
	else if (__tmp > 255)
     7a4:	ce 01       	movw	r24, r28
     7a6:	80 5b       	subi	r24, 0xB0	; 176
     7a8:	9f 4f       	sbci	r25, 0xFF	; 255
     7aa:	11 e0       	ldi	r17, 0x01	; 1
     7ac:	fc 01       	movw	r30, r24
     7ae:	60 81       	ld	r22, Z
     7b0:	71 81       	ldd	r23, Z+1	; 0x01
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	93 81       	ldd	r25, Z+3	; 0x03
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	4f e7       	ldi	r20, 0x7F	; 127
     7bc:	53 e4       	ldi	r21, 0x43	; 67
     7be:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     7c2:	18 16       	cp	r1, r24
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <LCDByte+0x746>
     7c6:	10 e0       	ldi	r17, 0x00	; 0
     7c8:	11 23       	and	r17, r17
     7ca:	09 f4       	brne	.+2      	; 0x7ce <LCDByte+0x74c>
     7cc:	df c0       	rjmp	.+446    	; 0x98c <__stack+0x12d>
	{
		_delay_ms(__us / 1000.0);
     7ce:	ce 01       	movw	r24, r28
     7d0:	84 5b       	subi	r24, 0xB4	; 180
     7d2:	9f 4f       	sbci	r25, 0xFF	; 255
     7d4:	fc 01       	movw	r30, r24
     7d6:	60 81       	ld	r22, Z
     7d8:	71 81       	ldd	r23, Z+1	; 0x01
     7da:	82 81       	ldd	r24, Z+2	; 0x02
     7dc:	93 81       	ldd	r25, Z+3	; 0x03
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	4a e7       	ldi	r20, 0x7A	; 122
     7e4:	54 e4       	ldi	r21, 0x44	; 68
     7e6:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	9e 01       	movw	r18, r28
     7f0:	2b 5a       	subi	r18, 0xAB	; 171
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	f9 01       	movw	r30, r18
     7f6:	80 83       	st	Z, r24
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	a2 83       	std	Z+2, r26	; 0x02
     7fc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7fe:	8e 01       	movw	r16, r28
     800:	07 5a       	subi	r16, 0xA7	; 167
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	ce 01       	movw	r24, r28
     806:	8b 5a       	subi	r24, 0xAB	; 171
     808:	9f 4f       	sbci	r25, 0xFF	; 255
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	4a e7       	ldi	r20, 0x7A	; 122
     81a:	53 e4       	ldi	r21, 0x43	; 67
     81c:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	f8 01       	movw	r30, r16
     826:	80 83       	st	Z, r24
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	a2 83       	std	Z+2, r26	; 0x02
     82c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     82e:	ce 01       	movw	r24, r28
     830:	87 5a       	subi	r24, 0xA7	; 167
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	11 e0       	ldi	r17, 0x01	; 1
     836:	fc 01       	movw	r30, r24
     838:	60 81       	ld	r22, Z
     83a:	71 81       	ldd	r23, Z+1	; 0x01
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	93 81       	ldd	r25, Z+3	; 0x03
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e8       	ldi	r20, 0x80	; 128
     846:	5f e3       	ldi	r21, 0x3F	; 63
     848:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     84c:	88 23       	and	r24, r24
     84e:	0c f0       	brlt	.+2      	; 0x852 <LCDByte+0x7d0>
     850:	10 e0       	ldi	r17, 0x00	; 0
     852:	11 23       	and	r17, r17
     854:	49 f0       	breq	.+18     	; 0x868 <__stack+0x9>
		__ticks = 1;
     856:	ce 01       	movw	r24, r28
     858:	83 5a       	subi	r24, 0xA3	; 163
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	fc 01       	movw	r30, r24
     862:	31 83       	std	Z+1, r19	; 0x01
     864:	20 83       	st	Z, r18
     866:	74 c0       	rjmp	.+232    	; 0x950 <__stack+0xf1>
	else if (__tmp > 65535)
     868:	ce 01       	movw	r24, r28
     86a:	87 5a       	subi	r24, 0xA7	; 167
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	11 e0       	ldi	r17, 0x01	; 1
     870:	fc 01       	movw	r30, r24
     872:	60 81       	ld	r22, Z
     874:	71 81       	ldd	r23, Z+1	; 0x01
     876:	82 81       	ldd	r24, Z+2	; 0x02
     878:	93 81       	ldd	r25, Z+3	; 0x03
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	3f ef       	ldi	r19, 0xFF	; 255
     87e:	4f e7       	ldi	r20, 0x7F	; 127
     880:	57 e4       	ldi	r21, 0x47	; 71
     882:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     886:	18 16       	cp	r1, r24
     888:	0c f0       	brlt	.+2      	; 0x88c <__stack+0x2d>
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	11 23       	and	r17, r17
     88e:	09 f4       	brne	.+2      	; 0x892 <__stack+0x33>
     890:	4d c0       	rjmp	.+154    	; 0x92c <__stack+0xcd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     892:	ce 01       	movw	r24, r28
     894:	8b 5a       	subi	r24, 0xAB	; 171
     896:	9f 4f       	sbci	r25, 0xFF	; 255
     898:	fc 01       	movw	r30, r24
     89a:	60 81       	ld	r22, Z
     89c:	71 81       	ldd	r23, Z+1	; 0x01
     89e:	82 81       	ldd	r24, Z+2	; 0x02
     8a0:	93 81       	ldd	r25, Z+3	; 0x03
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e2       	ldi	r20, 0x20	; 32
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     8ae:	dc 01       	movw	r26, r24
     8b0:	cb 01       	movw	r24, r22
     8b2:	8e 01       	movw	r16, r28
     8b4:	03 5a       	subi	r16, 0xA3	; 163
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	f8 01       	movw	r30, r16
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	80 83       	st	Z, r24
     8ca:	27 c0       	rjmp	.+78     	; 0x91a <__stack+0xbb>
     8cc:	ce 01       	movw	r24, r28
     8ce:	81 5a       	subi	r24, 0xA1	; 161
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	29 e1       	ldi	r18, 0x19	; 25
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	fc 01       	movw	r30, r24
     8d8:	31 83       	std	Z+1, r19	; 0x01
     8da:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8dc:	ce 01       	movw	r24, r28
     8de:	81 5a       	subi	r24, 0xA1	; 161
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	8c 01       	movw	r16, r24
     8ea:	c8 01       	movw	r24, r16
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <__stack+0x8d>
     8f0:	8c 01       	movw	r16, r24
     8f2:	ce 01       	movw	r24, r28
     8f4:	81 5a       	subi	r24, 0xA1	; 161
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	fc 01       	movw	r30, r24
     8fa:	11 83       	std	Z+1, r17	; 0x01
     8fc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	ce 01       	movw	r24, r28
     900:	83 5a       	subi	r24, 0xA3	; 163
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	9e 01       	movw	r18, r28
     906:	23 5a       	subi	r18, 0xA3	; 163
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	31 81       	ldd	r19, Z+1	; 0x01
     910:	21 50       	subi	r18, 0x01	; 1
     912:	30 40       	sbci	r19, 0x00	; 0
     914:	fc 01       	movw	r30, r24
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91a:	ce 01       	movw	r24, r28
     91c:	83 5a       	subi	r24, 0xA3	; 163
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	89 f6       	brne	.-94     	; 0x8cc <__stack+0x6d>
     92a:	58 c0       	rjmp	.+176    	; 0x9dc <__stack+0x17d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92c:	8e 01       	movw	r16, r28
     92e:	03 5a       	subi	r16, 0xA3	; 163
     930:	1f 4f       	sbci	r17, 0xFF	; 255
     932:	ce 01       	movw	r24, r28
     934:	87 5a       	subi	r24, 0xA7	; 167
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	fc 01       	movw	r30, r24
     93a:	60 81       	ld	r22, Z
     93c:	71 81       	ldd	r23, Z+1	; 0x01
     93e:	82 81       	ldd	r24, Z+2	; 0x02
     940:	93 81       	ldd	r25, Z+3	; 0x03
     942:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	f8 01       	movw	r30, r16
     94c:	91 83       	std	Z+1, r25	; 0x01
     94e:	80 83       	st	Z, r24
     950:	ce 01       	movw	r24, r28
     952:	8f 59       	subi	r24, 0x9F	; 159
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	9e 01       	movw	r18, r28
     958:	23 5a       	subi	r18, 0xA3	; 163
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	31 81       	ldd	r19, Z+1	; 0x01
     962:	fc 01       	movw	r30, r24
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18
     968:	ce 01       	movw	r24, r28
     96a:	8f 59       	subi	r24, 0x9F	; 159
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	8c 01       	movw	r16, r24
     976:	c8 01       	movw	r24, r16
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <__stack+0x119>
     97c:	8c 01       	movw	r16, r24
     97e:	ce 01       	movw	r24, r28
     980:	8f 59       	subi	r24, 0x9F	; 159
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	fc 01       	movw	r30, r24
     986:	11 83       	std	Z+1, r17	; 0x01
     988:	00 83       	st	Z, r16
     98a:	28 c0       	rjmp	.+80     	; 0x9dc <__stack+0x17d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     98c:	8e 01       	movw	r16, r28
     98e:	0c 5a       	subi	r16, 0xAC	; 172
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	ce 01       	movw	r24, r28
     994:	80 5b       	subi	r24, 0xB0	; 176
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	60 81       	ld	r22, Z
     99c:	71 81       	ldd	r23, Z+1	; 0x01
     99e:	82 81       	ldd	r24, Z+2	; 0x02
     9a0:	93 81       	ldd	r25, Z+3	; 0x03
     9a2:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	f8 01       	movw	r30, r16
     9ac:	80 83       	st	Z, r24
     9ae:	ce 01       	movw	r24, r28
     9b0:	8d 59       	subi	r24, 0x9D	; 157
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	9e 01       	movw	r18, r28
     9b6:	2c 5a       	subi	r18, 0xAC	; 172
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	f9 01       	movw	r30, r18
     9bc:	20 81       	ld	r18, Z
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9c2:	ce 01       	movw	r24, r28
     9c4:	8d 59       	subi	r24, 0x9D	; 157
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	18 2f       	mov	r17, r24
     9ce:	1a 95       	dec	r17
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <__stack+0x16f>
     9d2:	ce 01       	movw	r24, r28
     9d4:	8d 59       	subi	r24, 0x9D	; 157
     9d6:	9f 4f       	sbci	r25, 0xFF	; 255
     9d8:	fc 01       	movw	r30, r24
     9da:	10 83       	st	Z, r17

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     9dc:	88 e3       	ldi	r24, 0x38	; 56
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	28 e3       	ldi	r18, 0x38	; 56
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	20 81       	ld	r18, Z
     9e8:	2f 7e       	andi	r18, 0xEF	; 239
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
     9ee:	9e 01       	movw	r18, r28
     9f0:	2c 59       	subi	r18, 0x9C	; 156
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e8       	ldi	r26, 0x80	; 128
     9fa:	bf e3       	ldi	r27, 0x3F	; 63
     9fc:	f9 01       	movw	r30, r18
     9fe:	80 83       	st	Z, r24
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	a2 83       	std	Z+2, r26	; 0x02
     a04:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     a06:	8e 01       	movw	r16, r28
     a08:	08 59       	subi	r16, 0x98	; 152
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	ce 01       	movw	r24, r28
     a0e:	8c 59       	subi	r24, 0x9C	; 156
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	fc 01       	movw	r30, r24
     a14:	60 81       	ld	r22, Z
     a16:	71 81       	ldd	r23, Z+1	; 0x01
     a18:	82 81       	ldd	r24, Z+2	; 0x02
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	2b ea       	ldi	r18, 0xAB	; 171
     a1e:	3a ea       	ldi	r19, 0xAA	; 170
     a20:	4a ea       	ldi	r20, 0xAA	; 170
     a22:	5e e3       	ldi	r21, 0x3E	; 62
     a24:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 83       	st	Z, r24
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	a2 83       	std	Z+2, r26	; 0x02
     a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a36:	ce 01       	movw	r24, r28
     a38:	88 59       	subi	r24, 0x98	; 152
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	11 e0       	ldi	r17, 0x01	; 1
     a3e:	fc 01       	movw	r30, r24
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e8       	ldi	r20, 0x80	; 128
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     a54:	88 23       	and	r24, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <__stack+0x1fb>
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	11 23       	and	r17, r17
     a5c:	39 f0       	breq	.+14     	; 0xa6c <__stack+0x20d>
		__ticks = 1;
     a5e:	ce 01       	movw	r24, r28
     a60:	84 59       	subi	r24, 0x94	; 148
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
     a6a:	05 c1       	rjmp	.+522    	; 0xc76 <__stack+0x417>
	else if (__tmp > 255)
     a6c:	ce 01       	movw	r24, r28
     a6e:	88 59       	subi	r24, 0x98	; 152
     a70:	9f 4f       	sbci	r25, 0xFF	; 255
     a72:	11 e0       	ldi	r17, 0x01	; 1
     a74:	fc 01       	movw	r30, r24
     a76:	60 81       	ld	r22, Z
     a78:	71 81       	ldd	r23, Z+1	; 0x01
     a7a:	82 81       	ldd	r24, Z+2	; 0x02
     a7c:	93 81       	ldd	r25, Z+3	; 0x03
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	4f e7       	ldi	r20, 0x7F	; 127
     a84:	53 e4       	ldi	r21, 0x43	; 67
     a86:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     a8a:	18 16       	cp	r1, r24
     a8c:	0c f0       	brlt	.+2      	; 0xa90 <__stack+0x231>
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	11 23       	and	r17, r17
     a92:	09 f4       	brne	.+2      	; 0xa96 <__stack+0x237>
     a94:	df c0       	rjmp	.+446    	; 0xc54 <__stack+0x3f5>
	{
		_delay_ms(__us / 1000.0);
     a96:	ce 01       	movw	r24, r28
     a98:	8c 59       	subi	r24, 0x9C	; 156
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	fc 01       	movw	r30, r24
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4a e7       	ldi	r20, 0x7A	; 122
     aac:	54 e4       	ldi	r21, 0x44	; 68
     aae:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	9e 01       	movw	r18, r28
     ab8:	23 59       	subi	r18, 0x93	; 147
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	f9 01       	movw	r30, r18
     abe:	80 83       	st	Z, r24
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	a2 83       	std	Z+2, r26	; 0x02
     ac4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ac6:	8e 01       	movw	r16, r28
     ac8:	0f 58       	subi	r16, 0x8F	; 143
     aca:	1f 4f       	sbci	r17, 0xFF	; 255
     acc:	ce 01       	movw	r24, r28
     ace:	83 59       	subi	r24, 0x93	; 147
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	82 81       	ldd	r24, Z+2	; 0x02
     ada:	93 81       	ldd	r25, Z+3	; 0x03
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	4a e7       	ldi	r20, 0x7A	; 122
     ae2:	53 e4       	ldi	r21, 0x43	; 67
     ae4:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	f8 01       	movw	r30, r16
     aee:	80 83       	st	Z, r24
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	a2 83       	std	Z+2, r26	; 0x02
     af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     af6:	ce 01       	movw	r24, r28
     af8:	8f 58       	subi	r24, 0x8F	; 143
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	11 e0       	ldi	r17, 0x01	; 1
     afe:	fc 01       	movw	r30, r24
     b00:	60 81       	ld	r22, Z
     b02:	71 81       	ldd	r23, Z+1	; 0x01
     b04:	82 81       	ldd	r24, Z+2	; 0x02
     b06:	93 81       	ldd	r25, Z+3	; 0x03
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e8       	ldi	r20, 0x80	; 128
     b0e:	5f e3       	ldi	r21, 0x3F	; 63
     b10:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     b14:	88 23       	and	r24, r24
     b16:	0c f0       	brlt	.+2      	; 0xb1a <__stack+0x2bb>
     b18:	10 e0       	ldi	r17, 0x00	; 0
     b1a:	11 23       	and	r17, r17
     b1c:	49 f0       	breq	.+18     	; 0xb30 <__stack+0x2d1>
		__ticks = 1;
     b1e:	ce 01       	movw	r24, r28
     b20:	8b 58       	subi	r24, 0x8B	; 139
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	fc 01       	movw	r30, r24
     b2a:	31 83       	std	Z+1, r19	; 0x01
     b2c:	20 83       	st	Z, r18
     b2e:	74 c0       	rjmp	.+232    	; 0xc18 <__stack+0x3b9>
	else if (__tmp > 65535)
     b30:	ce 01       	movw	r24, r28
     b32:	8f 58       	subi	r24, 0x8F	; 143
     b34:	9f 4f       	sbci	r25, 0xFF	; 255
     b36:	11 e0       	ldi	r17, 0x01	; 1
     b38:	fc 01       	movw	r30, r24
     b3a:	60 81       	ld	r22, Z
     b3c:	71 81       	ldd	r23, Z+1	; 0x01
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	3f ef       	ldi	r19, 0xFF	; 255
     b46:	4f e7       	ldi	r20, 0x7F	; 127
     b48:	57 e4       	ldi	r21, 0x47	; 71
     b4a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     b4e:	18 16       	cp	r1, r24
     b50:	0c f0       	brlt	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	10 e0       	ldi	r17, 0x00	; 0
     b54:	11 23       	and	r17, r17
     b56:	09 f4       	brne	.+2      	; 0xb5a <__stack+0x2fb>
     b58:	4d c0       	rjmp	.+154    	; 0xbf4 <__stack+0x395>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b5a:	ce 01       	movw	r24, r28
     b5c:	83 59       	subi	r24, 0x93	; 147
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	fc 01       	movw	r30, r24
     b62:	60 81       	ld	r22, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e2       	ldi	r20, 0x20	; 32
     b70:	51 e4       	ldi	r21, 0x41	; 65
     b72:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	8e 01       	movw	r16, r28
     b7c:	0b 58       	subi	r16, 0x8B	; 139
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	f8 01       	movw	r30, r16
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24
     b92:	27 c0       	rjmp	.+78     	; 0xbe2 <__stack+0x383>
     b94:	ce 01       	movw	r24, r28
     b96:	89 58       	subi	r24, 0x89	; 137
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	29 e1       	ldi	r18, 0x19	; 25
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	fc 01       	movw	r30, r24
     ba0:	31 83       	std	Z+1, r19	; 0x01
     ba2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ba4:	ce 01       	movw	r24, r28
     ba6:	89 58       	subi	r24, 0x89	; 137
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	8c 01       	movw	r16, r24
     bb2:	c8 01       	movw	r24, r16
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <__stack+0x355>
     bb8:	8c 01       	movw	r16, r24
     bba:	ce 01       	movw	r24, r28
     bbc:	89 58       	subi	r24, 0x89	; 137
     bbe:	9f 4f       	sbci	r25, 0xFF	; 255
     bc0:	fc 01       	movw	r30, r24
     bc2:	11 83       	std	Z+1, r17	; 0x01
     bc4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc6:	ce 01       	movw	r24, r28
     bc8:	8b 58       	subi	r24, 0x8B	; 139
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	9e 01       	movw	r18, r28
     bce:	2b 58       	subi	r18, 0x8B	; 139
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	f9 01       	movw	r30, r18
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	30 40       	sbci	r19, 0x00	; 0
     bdc:	fc 01       	movw	r30, r24
     bde:	31 83       	std	Z+1, r19	; 0x01
     be0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be2:	ce 01       	movw	r24, r28
     be4:	8b 58       	subi	r24, 0x8B	; 139
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	89 f6       	brne	.-94     	; 0xb94 <__stack+0x335>
     bf2:	58 c0       	rjmp	.+176    	; 0xca4 <__stack+0x445>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf4:	8e 01       	movw	r16, r28
     bf6:	0b 58       	subi	r16, 0x8B	; 139
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	ce 01       	movw	r24, r28
     bfc:	8f 58       	subi	r24, 0x8F	; 143
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	fc 01       	movw	r30, r24
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	f8 01       	movw	r30, r16
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	80 83       	st	Z, r24
     c18:	ce 01       	movw	r24, r28
     c1a:	87 58       	subi	r24, 0x87	; 135
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	9e 01       	movw	r18, r28
     c20:	2b 58       	subi	r18, 0x8B	; 139
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	31 81       	ldd	r19, Z+1	; 0x01
     c2a:	fc 01       	movw	r30, r24
     c2c:	31 83       	std	Z+1, r19	; 0x01
     c2e:	20 83       	st	Z, r18
     c30:	ce 01       	movw	r24, r28
     c32:	87 58       	subi	r24, 0x87	; 135
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	fc 01       	movw	r30, r24
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	8c 01       	movw	r16, r24
     c3e:	c8 01       	movw	r24, r16
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <__stack+0x3e1>
     c44:	8c 01       	movw	r16, r24
     c46:	ce 01       	movw	r24, r28
     c48:	87 58       	subi	r24, 0x87	; 135
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	fc 01       	movw	r30, r24
     c4e:	11 83       	std	Z+1, r17	; 0x01
     c50:	00 83       	st	Z, r16
     c52:	28 c0       	rjmp	.+80     	; 0xca4 <__stack+0x445>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c54:	8e 01       	movw	r16, r28
     c56:	04 59       	subi	r16, 0x94	; 148
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	ce 01       	movw	r24, r28
     c5c:	88 59       	subi	r24, 0x98	; 152
     c5e:	9f 4f       	sbci	r25, 0xFF	; 255
     c60:	fc 01       	movw	r30, r24
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	f8 01       	movw	r30, r16
     c74:	80 83       	st	Z, r24
     c76:	ce 01       	movw	r24, r28
     c78:	85 58       	subi	r24, 0x85	; 133
     c7a:	9f 4f       	sbci	r25, 0xFF	; 255
     c7c:	9e 01       	movw	r18, r28
     c7e:	24 59       	subi	r18, 0x94	; 148
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
     c82:	f9 01       	movw	r30, r18
     c84:	20 81       	ld	r18, Z
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c8a:	ce 01       	movw	r24, r28
     c8c:	85 58       	subi	r24, 0x85	; 133
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	18 2f       	mov	r17, r24
     c96:	1a 95       	dec	r17
     c98:	f1 f7       	brne	.-4      	; 0xc96 <__stack+0x437>
     c9a:	ce 01       	movw	r24, r28
     c9c:	85 58       	subi	r24, 0x85	; 133
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	fc 01       	movw	r30, r24
     ca2:	10 83       	st	Z, r17

_delay_us(1);			//tEL

LCDBusyLoop();
     ca4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCDBusyLoop>
}
     ca8:	c3 58       	subi	r28, 0x83	; 131
     caa:	df 4f       	sbci	r29, 0xFF	; 255
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <LCDBusyLoop>:

void LCDBusyLoop()
{
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	cb 5a       	subi	r28, 0xAB	; 171
     cce:	d0 40       	sbci	r29, 0x00	; 0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
     cda:	19 82       	std	Y+1, r1	; 0x01

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     cdc:	87 e3       	ldi	r24, 0x37	; 55
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	27 e3       	ldi	r18, 0x37	; 55
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	f9 01       	movw	r30, r18
     ce6:	20 81       	ld	r18, Z
     ce8:	20 7f       	andi	r18, 0xF0	; 240
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18

	//change LCD mode
	SET_RW();		//Read mode
     cee:	82 e3       	ldi	r24, 0x32	; 50
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	22 e3       	ldi	r18, 0x32	; 50
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	20 64       	ori	r18, 0x40	; 64
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
	CLEAR_RS();		//Read status
     d00:	82 e3       	ldi	r24, 0x32	; 50
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	22 e3       	ldi	r18, 0x32	; 50
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	f9 01       	movw	r30, r18
     d0a:	20 81       	ld	r18, Z
     d0c:	27 7f       	andi	r18, 0xF7	; 247
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	bf e3       	ldi	r27, 0x3F	; 63
     d1a:	8c 83       	std	Y+4, r24	; 0x04
     d1c:	9d 83       	std	Y+5, r25	; 0x05
     d1e:	ae 83       	std	Y+6, r26	; 0x06
     d20:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     d22:	6c 81       	ldd	r22, Y+4	; 0x04
     d24:	7d 81       	ldd	r23, Y+5	; 0x05
     d26:	8e 81       	ldd	r24, Y+6	; 0x06
     d28:	9f 81       	ldd	r25, Y+7	; 0x07
     d2a:	2b ea       	ldi	r18, 0xAB	; 171
     d2c:	3a ea       	ldi	r19, 0xAA	; 170
     d2e:	4a ea       	ldi	r20, 0xAA	; 170
     d30:	5e e3       	ldi	r21, 0x3E	; 62
     d32:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	88 87       	std	Y+8, r24	; 0x08
     d3c:	99 87       	std	Y+9, r25	; 0x09
     d3e:	aa 87       	std	Y+10, r26	; 0x0a
     d40:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d42:	11 e0       	ldi	r17, 0x01	; 1
     d44:	68 85       	ldd	r22, Y+8	; 0x08
     d46:	79 85       	ldd	r23, Y+9	; 0x09
     d48:	8a 85       	ldd	r24, Y+10	; 0x0a
     d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     d58:	88 23       	and	r24, r24
     d5a:	0c f0       	brlt	.+2      	; 0xd5e <LCDBusyLoop+0x9e>
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	11 23       	and	r17, r17
     d60:	19 f0       	breq	.+6      	; 0xd68 <LCDBusyLoop+0xa8>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	8c 87       	std	Y+12, r24	; 0x0c
     d66:	a3 c0       	rjmp	.+326    	; 0xeae <LCDBusyLoop+0x1ee>
	else if (__tmp > 255)
     d68:	11 e0       	ldi	r17, 0x01	; 1
     d6a:	68 85       	ldd	r22, Y+8	; 0x08
     d6c:	79 85       	ldd	r23, Y+9	; 0x09
     d6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d70:	9b 85       	ldd	r25, Y+11	; 0x0b
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	53 e4       	ldi	r21, 0x43	; 67
     d7a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     d7e:	18 16       	cp	r1, r24
     d80:	0c f0       	brlt	.+2      	; 0xd84 <LCDBusyLoop+0xc4>
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	11 23       	and	r17, r17
     d86:	09 f4       	brne	.+2      	; 0xd8a <LCDBusyLoop+0xca>
     d88:	89 c0       	rjmp	.+274    	; 0xe9c <LCDBusyLoop+0x1dc>
	{
		_delay_ms(__us / 1000.0);
     d8a:	6c 81       	ldd	r22, Y+4	; 0x04
     d8c:	7d 81       	ldd	r23, Y+5	; 0x05
     d8e:	8e 81       	ldd	r24, Y+6	; 0x06
     d90:	9f 81       	ldd	r25, Y+7	; 0x07
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4a e7       	ldi	r20, 0x7A	; 122
     d98:	54 e4       	ldi	r21, 0x44	; 68
     d9a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8d 87       	std	Y+13, r24	; 0x0d
     da4:	9e 87       	std	Y+14, r25	; 0x0e
     da6:	af 87       	std	Y+15, r26	; 0x0f
     da8:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     daa:	6d 85       	ldd	r22, Y+13	; 0x0d
     dac:	7e 85       	ldd	r23, Y+14	; 0x0e
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	98 89       	ldd	r25, Y+16	; 0x10
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a e7       	ldi	r20, 0x7A	; 122
     db8:	53 e4       	ldi	r21, 0x43	; 67
     dba:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	89 8b       	std	Y+17, r24	; 0x11
     dc4:	9a 8b       	std	Y+18, r25	; 0x12
     dc6:	ab 8b       	std	Y+19, r26	; 0x13
     dc8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     dca:	11 e0       	ldi	r17, 0x01	; 1
     dcc:	69 89       	ldd	r22, Y+17	; 0x11
     dce:	7a 89       	ldd	r23, Y+18	; 0x12
     dd0:	8b 89       	ldd	r24, Y+19	; 0x13
     dd2:	9c 89       	ldd	r25, Y+20	; 0x14
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     de0:	88 23       	and	r24, r24
     de2:	0c f0       	brlt	.+2      	; 0xde6 <LCDBusyLoop+0x126>
     de4:	10 e0       	ldi	r17, 0x00	; 0
     de6:	11 23       	and	r17, r17
     de8:	29 f0       	breq	.+10     	; 0xdf4 <LCDBusyLoop+0x134>
		__ticks = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9e 8b       	std	Y+22, r25	; 0x16
     df0:	8d 8b       	std	Y+21, r24	; 0x15
     df2:	46 c0       	rjmp	.+140    	; 0xe80 <LCDBusyLoop+0x1c0>
	else if (__tmp > 65535)
     df4:	11 e0       	ldi	r17, 0x01	; 1
     df6:	69 89       	ldd	r22, Y+17	; 0x11
     df8:	7a 89       	ldd	r23, Y+18	; 0x12
     dfa:	8b 89       	ldd	r24, Y+19	; 0x13
     dfc:	9c 89       	ldd	r25, Y+20	; 0x14
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	4f e7       	ldi	r20, 0x7F	; 127
     e04:	57 e4       	ldi	r21, 0x47	; 71
     e06:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     e0a:	18 16       	cp	r1, r24
     e0c:	0c f0       	brlt	.+2      	; 0xe10 <LCDBusyLoop+0x150>
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	11 23       	and	r17, r17
     e12:	61 f1       	breq	.+88     	; 0xe6c <LCDBusyLoop+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 8b       	std	Y+22, r25	; 0x16
     e3a:	8d 8b       	std	Y+21, r24	; 0x15
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <LCDBusyLoop+0x1a2>
     e3e:	89 e1       	ldi	r24, 0x19	; 25
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	98 8f       	std	Y+24, r25	; 0x18
     e44:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e46:	8f 89       	ldd	r24, Y+23	; 0x17
     e48:	98 8d       	ldd	r25, Y+24	; 0x18
     e4a:	8c 01       	movw	r16, r24
     e4c:	c8 01       	movw	r24, r16
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <LCDBusyLoop+0x18e>
     e52:	8c 01       	movw	r16, r24
     e54:	18 8f       	std	Y+24, r17	; 0x18
     e56:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8d 89       	ldd	r24, Y+21	; 0x15
     e5a:	9e 89       	ldd	r25, Y+22	; 0x16
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9e 8b       	std	Y+22, r25	; 0x16
     e60:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8d 89       	ldd	r24, Y+21	; 0x15
     e64:	9e 89       	ldd	r25, Y+22	; 0x16
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	51 f7       	brne	.-44     	; 0xe3e <LCDBusyLoop+0x17e>
     e6a:	28 c0       	rjmp	.+80     	; 0xebc <LCDBusyLoop+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	69 89       	ldd	r22, Y+17	; 0x11
     e6e:	7a 89       	ldd	r23, Y+18	; 0x12
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9e 8b       	std	Y+22, r25	; 0x16
     e7e:	8d 8b       	std	Y+21, r24	; 0x15
     e80:	8d 89       	ldd	r24, Y+21	; 0x15
     e82:	9e 89       	ldd	r25, Y+22	; 0x16
     e84:	9a 8f       	std	Y+26, r25	; 0x1a
     e86:	89 8f       	std	Y+25, r24	; 0x19
     e88:	89 8d       	ldd	r24, Y+25	; 0x19
     e8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e8c:	8c 01       	movw	r16, r24
     e8e:	f8 01       	movw	r30, r16
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCDBusyLoop+0x1d0>
     e94:	8f 01       	movw	r16, r30
     e96:	1a 8f       	std	Y+26, r17	; 0x1a
     e98:	09 8f       	std	Y+25, r16	; 0x19
     e9a:	10 c0       	rjmp	.+32     	; 0xebc <LCDBusyLoop+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e9c:	68 85       	ldd	r22, Y+8	; 0x08
     e9e:	79 85       	ldd	r23, Y+9	; 0x09
     ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea4:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8c 87       	std	Y+12, r24	; 0x0c
     eae:	8c 85       	ldd	r24, Y+12	; 0x0c
     eb0:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb4:	18 2f       	mov	r17, r24
     eb6:	1a 95       	dec	r17
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <LCDBusyLoop+0x1f6>
     eba:	1b 8f       	std	Y+27, r17	; 0x1b

	
	do
	{

		SET_E();
     ebc:	88 e3       	ldi	r24, 0x38	; 56
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	28 e3       	ldi	r18, 0x38	; 56
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	f9 01       	movw	r30, r18
     ec6:	20 81       	ld	r18, Z
     ec8:	20 61       	ori	r18, 0x10	; 16
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	bf e3       	ldi	r27, 0x3F	; 63
     ed6:	8c 8f       	std	Y+28, r24	; 0x1c
     ed8:	9d 8f       	std	Y+29, r25	; 0x1d
     eda:	ae 8f       	std	Y+30, r26	; 0x1e
     edc:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     ede:	6c 8d       	ldd	r22, Y+28	; 0x1c
     ee0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     ee2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ee6:	2b ea       	ldi	r18, 0xAB	; 171
     ee8:	3a ea       	ldi	r19, 0xAA	; 170
     eea:	4a ea       	ldi	r20, 0xAA	; 170
     eec:	5e e3       	ldi	r21, 0x3E	; 62
     eee:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	88 a3       	std	Y+32, r24	; 0x20
     ef8:	99 a3       	std	Y+33, r25	; 0x21
     efa:	aa a3       	std	Y+34, r26	; 0x22
     efc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     efe:	11 e0       	ldi	r17, 0x01	; 1
     f00:	68 a1       	ldd	r22, Y+32	; 0x20
     f02:	79 a1       	ldd	r23, Y+33	; 0x21
     f04:	8a a1       	ldd	r24, Y+34	; 0x22
     f06:	9b a1       	ldd	r25, Y+35	; 0x23
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	0c f0       	brlt	.+2      	; 0xf1a <LCDBusyLoop+0x25a>
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	11 23       	and	r17, r17
     f1c:	19 f0       	breq	.+6      	; 0xf24 <LCDBusyLoop+0x264>
		__ticks = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	8c a3       	std	Y+36, r24	; 0x24
     f22:	a3 c0       	rjmp	.+326    	; 0x106a <LCDBusyLoop+0x3aa>
	else if (__tmp > 255)
     f24:	11 e0       	ldi	r17, 0x01	; 1
     f26:	68 a1       	ldd	r22, Y+32	; 0x20
     f28:	79 a1       	ldd	r23, Y+33	; 0x21
     f2a:	8a a1       	ldd	r24, Y+34	; 0x22
     f2c:	9b a1       	ldd	r25, Y+35	; 0x23
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	53 e4       	ldi	r21, 0x43	; 67
     f36:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	0c f0       	brlt	.+2      	; 0xf40 <LCDBusyLoop+0x280>
     f3e:	10 e0       	ldi	r17, 0x00	; 0
     f40:	11 23       	and	r17, r17
     f42:	09 f4       	brne	.+2      	; 0xf46 <LCDBusyLoop+0x286>
     f44:	89 c0       	rjmp	.+274    	; 0x1058 <LCDBusyLoop+0x398>
	{
		_delay_ms(__us / 1000.0);
     f46:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f48:	7d 8d       	ldd	r23, Y+29	; 0x1d
     f4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a e7       	ldi	r20, 0x7A	; 122
     f54:	54 e4       	ldi	r21, 0x44	; 68
     f56:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8d a3       	std	Y+37, r24	; 0x25
     f60:	9e a3       	std	Y+38, r25	; 0x26
     f62:	af a3       	std	Y+39, r26	; 0x27
     f64:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f66:	6d a1       	ldd	r22, Y+37	; 0x25
     f68:	7e a1       	ldd	r23, Y+38	; 0x26
     f6a:	8f a1       	ldd	r24, Y+39	; 0x27
     f6c:	98 a5       	ldd	r25, Y+40	; 0x28
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a e7       	ldi	r20, 0x7A	; 122
     f74:	53 e4       	ldi	r21, 0x43	; 67
     f76:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	89 a7       	std	Y+41, r24	; 0x29
     f80:	9a a7       	std	Y+42, r25	; 0x2a
     f82:	ab a7       	std	Y+43, r26	; 0x2b
     f84:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f86:	11 e0       	ldi	r17, 0x01	; 1
     f88:	69 a5       	ldd	r22, Y+41	; 0x29
     f8a:	7a a5       	ldd	r23, Y+42	; 0x2a
     f8c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f8e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <LCDBusyLoop+0x2e2>
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	11 23       	and	r17, r17
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <LCDBusyLoop+0x2f0>
		__ticks = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9e a7       	std	Y+46, r25	; 0x2e
     fac:	8d a7       	std	Y+45, r24	; 0x2d
     fae:	46 c0       	rjmp	.+140    	; 0x103c <LCDBusyLoop+0x37c>
	else if (__tmp > 65535)
     fb0:	11 e0       	ldi	r17, 0x01	; 1
     fb2:	69 a5       	ldd	r22, Y+41	; 0x29
     fb4:	7a a5       	ldd	r23, Y+42	; 0x2a
     fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <LCDBusyLoop+0x30c>
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	11 23       	and	r17, r17
     fce:	61 f1       	breq	.+88     	; 0x1028 <LCDBusyLoop+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	6d a1       	ldd	r22, Y+37	; 0x25
     fd2:	7e a1       	ldd	r23, Y+38	; 0x26
     fd4:	8f a1       	ldd	r24, Y+39	; 0x27
     fd6:	98 a5       	ldd	r25, Y+40	; 0x28
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e a7       	std	Y+46, r25	; 0x2e
     ff6:	8d a7       	std	Y+45, r24	; 0x2d
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <LCDBusyLoop+0x35e>
     ffa:	89 e1       	ldi	r24, 0x19	; 25
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	98 ab       	std	Y+48, r25	; 0x30
    1000:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1002:	8f a5       	ldd	r24, Y+47	; 0x2f
    1004:	98 a9       	ldd	r25, Y+48	; 0x30
    1006:	8c 01       	movw	r16, r24
    1008:	c8 01       	movw	r24, r16
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <LCDBusyLoop+0x34a>
    100e:	8c 01       	movw	r16, r24
    1010:	18 ab       	std	Y+48, r17	; 0x30
    1012:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8d a5       	ldd	r24, Y+45	; 0x2d
    1016:	9e a5       	ldd	r25, Y+46	; 0x2e
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9e a7       	std	Y+46, r25	; 0x2e
    101c:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1020:	9e a5       	ldd	r25, Y+46	; 0x2e
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	51 f7       	brne	.-44     	; 0xffa <LCDBusyLoop+0x33a>
    1026:	28 c0       	rjmp	.+80     	; 0x1078 <LCDBusyLoop+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	69 a5       	ldd	r22, Y+41	; 0x29
    102a:	7a a5       	ldd	r23, Y+42	; 0x2a
    102c:	8b a5       	ldd	r24, Y+43	; 0x2b
    102e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1030:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9e a7       	std	Y+46, r25	; 0x2e
    103a:	8d a7       	std	Y+45, r24	; 0x2d
    103c:	8d a5       	ldd	r24, Y+45	; 0x2d
    103e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1040:	9a ab       	std	Y+50, r25	; 0x32
    1042:	89 ab       	std	Y+49, r24	; 0x31
    1044:	89 a9       	ldd	r24, Y+49	; 0x31
    1046:	9a a9       	ldd	r25, Y+50	; 0x32
    1048:	8c 01       	movw	r16, r24
    104a:	f8 01       	movw	r30, r16
    104c:	31 97       	sbiw	r30, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <LCDBusyLoop+0x38c>
    1050:	8f 01       	movw	r16, r30
    1052:	1a ab       	std	Y+50, r17	; 0x32
    1054:	09 ab       	std	Y+49, r16	; 0x31
    1056:	10 c0       	rjmp	.+32     	; 0x1078 <LCDBusyLoop+0x3b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1058:	68 a1       	ldd	r22, Y+32	; 0x20
    105a:	79 a1       	ldd	r23, Y+33	; 0x21
    105c:	8a a1       	ldd	r24, Y+34	; 0x22
    105e:	9b a1       	ldd	r25, Y+35	; 0x23
    1060:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8c a3       	std	Y+36, r24	; 0x24
    106a:	8c a1       	ldd	r24, Y+36	; 0x24
    106c:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    106e:	8b a9       	ldd	r24, Y+51	; 0x33
    1070:	18 2f       	mov	r17, r24
    1072:	1a 95       	dec	r17
    1074:	f1 f7       	brne	.-4      	; 0x1072 <LCDBusyLoop+0x3b2>
    1076:	1b ab       	std	Y+51, r17	; 0x33

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    1078:	86 e3       	ldi	r24, 0x36	; 54
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	89 83       	std	Y+1, r24	; 0x01
		status=status<<4;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	82 95       	swap	r24
    1086:	80 7f       	andi	r24, 0xF0	; 240
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	bf e3       	ldi	r27, 0x3F	; 63
    1092:	8c ab       	std	Y+52, r24	; 0x34
    1094:	9d ab       	std	Y+53, r25	; 0x35
    1096:	ae ab       	std	Y+54, r26	; 0x36
    1098:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    109a:	6c a9       	ldd	r22, Y+52	; 0x34
    109c:	7d a9       	ldd	r23, Y+53	; 0x35
    109e:	8e a9       	ldd	r24, Y+54	; 0x36
    10a0:	9f a9       	ldd	r25, Y+55	; 0x37
    10a2:	2b ea       	ldi	r18, 0xAB	; 171
    10a4:	3a ea       	ldi	r19, 0xAA	; 170
    10a6:	4a ea       	ldi	r20, 0xAA	; 170
    10a8:	5e e3       	ldi	r21, 0x3E	; 62
    10aa:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	88 af       	std	Y+56, r24	; 0x38
    10b4:	99 af       	std	Y+57, r25	; 0x39
    10b6:	aa af       	std	Y+58, r26	; 0x3a
    10b8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    10ba:	11 e0       	ldi	r17, 0x01	; 1
    10bc:	68 ad       	ldd	r22, Y+56	; 0x38
    10be:	79 ad       	ldd	r23, Y+57	; 0x39
    10c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    10c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	0c f0       	brlt	.+2      	; 0x10d6 <LCDBusyLoop+0x416>
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	11 23       	and	r17, r17
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <LCDBusyLoop+0x420>
		__ticks = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8c af       	std	Y+60, r24	; 0x3c
    10de:	f3 c0       	rjmp	.+486    	; 0x12c6 <LCDBusyLoop+0x606>
	else if (__tmp > 255)
    10e0:	11 e0       	ldi	r17, 0x01	; 1
    10e2:	68 ad       	ldd	r22, Y+56	; 0x38
    10e4:	79 ad       	ldd	r23, Y+57	; 0x39
    10e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    10e8:	9b ad       	ldd	r25, Y+59	; 0x3b
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	53 e4       	ldi	r21, 0x43	; 67
    10f2:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	0c f0       	brlt	.+2      	; 0x10fc <LCDBusyLoop+0x43c>
    10fa:	10 e0       	ldi	r17, 0x00	; 0
    10fc:	11 23       	and	r17, r17
    10fe:	09 f4       	brne	.+2      	; 0x1102 <LCDBusyLoop+0x442>
    1100:	d9 c0       	rjmp	.+434    	; 0x12b4 <LCDBusyLoop+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    1102:	6c a9       	ldd	r22, Y+52	; 0x34
    1104:	7d a9       	ldd	r23, Y+53	; 0x35
    1106:	8e a9       	ldd	r24, Y+54	; 0x36
    1108:	9f a9       	ldd	r25, Y+55	; 0x37
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a e7       	ldi	r20, 0x7A	; 122
    1110:	54 e4       	ldi	r21, 0x44	; 68
    1112:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9e 01       	movw	r18, r28
    111c:	23 5c       	subi	r18, 0xC3	; 195
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	f9 01       	movw	r30, r18
    1122:	80 83       	st	Z, r24
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	a2 83       	std	Z+2, r26	; 0x02
    1128:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    112a:	8e 01       	movw	r16, r28
    112c:	0f 5b       	subi	r16, 0xBF	; 191
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
    1130:	ce 01       	movw	r24, r28
    1132:	cd 96       	adiw	r24, 0x3d	; 61
    1134:	fc 01       	movw	r30, r24
    1136:	60 81       	ld	r22, Z
    1138:	71 81       	ldd	r23, Z+1	; 0x01
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4a e7       	ldi	r20, 0x7A	; 122
    1144:	53 e4       	ldi	r21, 0x43	; 67
    1146:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	f8 01       	movw	r30, r16
    1150:	80 83       	st	Z, r24
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	a2 83       	std	Z+2, r26	; 0x02
    1156:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1158:	ce 01       	movw	r24, r28
    115a:	8f 5b       	subi	r24, 0xBF	; 191
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	11 e0       	ldi	r17, 0x01	; 1
    1160:	fc 01       	movw	r30, r24
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e8       	ldi	r20, 0x80	; 128
    1170:	5f e3       	ldi	r21, 0x3F	; 63
    1172:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1176:	88 23       	and	r24, r24
    1178:	0c f0       	brlt	.+2      	; 0x117c <LCDBusyLoop+0x4bc>
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	11 23       	and	r17, r17
    117e:	49 f0       	breq	.+18     	; 0x1192 <LCDBusyLoop+0x4d2>
		__ticks = 1;
    1180:	ce 01       	movw	r24, r28
    1182:	8b 5b       	subi	r24, 0xBB	; 187
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	fc 01       	movw	r30, r24
    118c:	31 83       	std	Z+1, r19	; 0x01
    118e:	20 83       	st	Z, r18
    1190:	73 c0       	rjmp	.+230    	; 0x1278 <LCDBusyLoop+0x5b8>
	else if (__tmp > 65535)
    1192:	ce 01       	movw	r24, r28
    1194:	8f 5b       	subi	r24, 0xBF	; 191
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	11 e0       	ldi	r17, 0x01	; 1
    119a:	fc 01       	movw	r30, r24
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <LCDBusyLoop+0x4f6>
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	11 23       	and	r17, r17
    11b8:	09 f4       	brne	.+2      	; 0x11bc <LCDBusyLoop+0x4fc>
    11ba:	4c c0       	rjmp	.+152    	; 0x1254 <LCDBusyLoop+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11bc:	ce 01       	movw	r24, r28
    11be:	cd 96       	adiw	r24, 0x3d	; 61
    11c0:	fc 01       	movw	r30, r24
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8e 01       	movw	r16, r28
    11dc:	0b 5b       	subi	r16, 0xBB	; 187
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	f8 01       	movw	r30, r16
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
    11f2:	27 c0       	rjmp	.+78     	; 0x1242 <LCDBusyLoop+0x582>
    11f4:	ce 01       	movw	r24, r28
    11f6:	89 5b       	subi	r24, 0xB9	; 185
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	29 e1       	ldi	r18, 0x19	; 25
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	fc 01       	movw	r30, r24
    1200:	31 83       	std	Z+1, r19	; 0x01
    1202:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1204:	ce 01       	movw	r24, r28
    1206:	89 5b       	subi	r24, 0xB9	; 185
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	fc 01       	movw	r30, r24
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	8c 01       	movw	r16, r24
    1212:	c8 01       	movw	r24, r16
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <LCDBusyLoop+0x554>
    1218:	8c 01       	movw	r16, r24
    121a:	ce 01       	movw	r24, r28
    121c:	89 5b       	subi	r24, 0xB9	; 185
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	fc 01       	movw	r30, r24
    1222:	11 83       	std	Z+1, r17	; 0x01
    1224:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	ce 01       	movw	r24, r28
    1228:	8b 5b       	subi	r24, 0xBB	; 187
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	9e 01       	movw	r18, r28
    122e:	2b 5b       	subi	r18, 0xBB	; 187
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	31 81       	ldd	r19, Z+1	; 0x01
    1238:	21 50       	subi	r18, 0x01	; 1
    123a:	30 40       	sbci	r19, 0x00	; 0
    123c:	fc 01       	movw	r30, r24
    123e:	31 83       	std	Z+1, r19	; 0x01
    1240:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	ce 01       	movw	r24, r28
    1244:	8b 5b       	subi	r24, 0xBB	; 187
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	fc 01       	movw	r30, r24
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	89 f6       	brne	.-94     	; 0x11f4 <LCDBusyLoop+0x534>
    1252:	4c c0       	rjmp	.+152    	; 0x12ec <LCDBusyLoop+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	8e 01       	movw	r16, r28
    1256:	0b 5b       	subi	r16, 0xBB	; 187
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	ce 01       	movw	r24, r28
    125c:	8f 5b       	subi	r24, 0xBF	; 191
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	fc 01       	movw	r30, r24
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	f8 01       	movw	r30, r16
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
    1278:	ce 01       	movw	r24, r28
    127a:	87 5b       	subi	r24, 0xB7	; 183
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	9e 01       	movw	r18, r28
    1280:	2b 5b       	subi	r18, 0xBB	; 187
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	f9 01       	movw	r30, r18
    1286:	20 81       	ld	r18, Z
    1288:	31 81       	ldd	r19, Z+1	; 0x01
    128a:	fc 01       	movw	r30, r24
    128c:	31 83       	std	Z+1, r19	; 0x01
    128e:	20 83       	st	Z, r18
    1290:	ce 01       	movw	r24, r28
    1292:	87 5b       	subi	r24, 0xB7	; 183
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	fc 01       	movw	r30, r24
    1298:	80 81       	ld	r24, Z
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	8c 01       	movw	r16, r24
    129e:	c8 01       	movw	r24, r16
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <LCDBusyLoop+0x5e0>
    12a4:	8c 01       	movw	r16, r24
    12a6:	ce 01       	movw	r24, r28
    12a8:	87 5b       	subi	r24, 0xB7	; 183
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	fc 01       	movw	r30, r24
    12ae:	11 83       	std	Z+1, r17	; 0x01
    12b0:	00 83       	st	Z, r16
    12b2:	1c c0       	rjmp	.+56     	; 0x12ec <LCDBusyLoop+0x62c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12b4:	68 ad       	ldd	r22, Y+56	; 0x38
    12b6:	79 ad       	ldd	r23, Y+57	; 0x39
    12b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    12ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    12bc:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	8c af       	std	Y+60, r24	; 0x3c
    12c6:	ce 01       	movw	r24, r28
    12c8:	85 5b       	subi	r24, 0xB5	; 181
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12d2:	ce 01       	movw	r24, r28
    12d4:	85 5b       	subi	r24, 0xB5	; 181
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	fc 01       	movw	r30, r24
    12da:	80 81       	ld	r24, Z
    12dc:	18 2f       	mov	r17, r24
    12de:	1a 95       	dec	r17
    12e0:	f1 f7       	brne	.-4      	; 0x12de <LCDBusyLoop+0x61e>
    12e2:	ce 01       	movw	r24, r28
    12e4:	85 5b       	subi	r24, 0xB5	; 181
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	fc 01       	movw	r30, r24
    12ea:	10 83       	st	Z, r17

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    12ec:	88 e3       	ldi	r24, 0x38	; 56
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	28 e3       	ldi	r18, 0x38	; 56
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	f9 01       	movw	r30, r18
    12f6:	20 81       	ld	r18, Z
    12f8:	2f 7e       	andi	r18, 0xEF	; 239
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
    12fe:	9e 01       	movw	r18, r28
    1300:	24 5b       	subi	r18, 0xB4	; 180
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 e8       	ldi	r26, 0x80	; 128
    130a:	bf e3       	ldi	r27, 0x3F	; 63
    130c:	f9 01       	movw	r30, r18
    130e:	80 83       	st	Z, r24
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	a2 83       	std	Z+2, r26	; 0x02
    1314:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1316:	8e 01       	movw	r16, r28
    1318:	00 5b       	subi	r16, 0xB0	; 176
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	ce 01       	movw	r24, r28
    131e:	84 5b       	subi	r24, 0xB4	; 180
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	fc 01       	movw	r30, r24
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	2b ea       	ldi	r18, 0xAB	; 171
    132e:	3a ea       	ldi	r19, 0xAA	; 170
    1330:	4a ea       	ldi	r20, 0xAA	; 170
    1332:	5e e3       	ldi	r21, 0x3E	; 62
    1334:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	ce 01       	movw	r24, r28
    1348:	80 5b       	subi	r24, 0xB0	; 176
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	11 e0       	ldi	r17, 0x01	; 1
    134e:	fc 01       	movw	r30, r24
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	0c f0       	brlt	.+2      	; 0x136a <LCDBusyLoop+0x6aa>
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	11 23       	and	r17, r17
    136c:	39 f0       	breq	.+14     	; 0x137c <LCDBusyLoop+0x6bc>
		__ticks = 1;
    136e:	ce 01       	movw	r24, r28
    1370:	8c 5a       	subi	r24, 0xAC	; 172
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	21 e0       	ldi	r18, 0x01	; 1
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	05 c1       	rjmp	.+522    	; 0x1586 <LCDBusyLoop+0x8c6>
	else if (__tmp > 255)
    137c:	ce 01       	movw	r24, r28
    137e:	80 5b       	subi	r24, 0xB0	; 176
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	11 e0       	ldi	r17, 0x01	; 1
    1384:	fc 01       	movw	r30, r24
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	53 e4       	ldi	r21, 0x43	; 67
    1396:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    139a:	18 16       	cp	r1, r24
    139c:	0c f0       	brlt	.+2      	; 0x13a0 <LCDBusyLoop+0x6e0>
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	11 23       	and	r17, r17
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <LCDBusyLoop+0x6e6>
    13a4:	df c0       	rjmp	.+446    	; 0x1564 <LCDBusyLoop+0x8a4>
	{
		_delay_ms(__us / 1000.0);
    13a6:	ce 01       	movw	r24, r28
    13a8:	84 5b       	subi	r24, 0xB4	; 180
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	fc 01       	movw	r30, r24
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a e7       	ldi	r20, 0x7A	; 122
    13bc:	54 e4       	ldi	r21, 0x44	; 68
    13be:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9e 01       	movw	r18, r28
    13c8:	2b 5a       	subi	r18, 0xAB	; 171
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	f9 01       	movw	r30, r18
    13ce:	80 83       	st	Z, r24
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	a2 83       	std	Z+2, r26	; 0x02
    13d4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	8e 01       	movw	r16, r28
    13d8:	07 5a       	subi	r16, 0xA7	; 167
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	ce 01       	movw	r24, r28
    13de:	8b 5a       	subi	r24, 0xAB	; 171
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	fc 01       	movw	r30, r24
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a e7       	ldi	r20, 0x7A	; 122
    13f2:	53 e4       	ldi	r21, 0x43	; 67
    13f4:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1406:	ce 01       	movw	r24, r28
    1408:	87 5a       	subi	r24, 0xA7	; 167
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	11 e0       	ldi	r17, 0x01	; 1
    140e:	fc 01       	movw	r30, r24
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	0c f0       	brlt	.+2      	; 0x142a <LCDBusyLoop+0x76a>
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	11 23       	and	r17, r17
    142c:	49 f0       	breq	.+18     	; 0x1440 <LCDBusyLoop+0x780>
		__ticks = 1;
    142e:	ce 01       	movw	r24, r28
    1430:	83 5a       	subi	r24, 0xA3	; 163
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	fc 01       	movw	r30, r24
    143a:	31 83       	std	Z+1, r19	; 0x01
    143c:	20 83       	st	Z, r18
    143e:	74 c0       	rjmp	.+232    	; 0x1528 <LCDBusyLoop+0x868>
	else if (__tmp > 65535)
    1440:	ce 01       	movw	r24, r28
    1442:	87 5a       	subi	r24, 0xA7	; 167
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	11 e0       	ldi	r17, 0x01	; 1
    1448:	fc 01       	movw	r30, r24
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	0c f0       	brlt	.+2      	; 0x1464 <LCDBusyLoop+0x7a4>
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	11 23       	and	r17, r17
    1466:	09 f4       	brne	.+2      	; 0x146a <LCDBusyLoop+0x7aa>
    1468:	4d c0       	rjmp	.+154    	; 0x1504 <LCDBusyLoop+0x844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146a:	ce 01       	movw	r24, r28
    146c:	8b 5a       	subi	r24, 0xAB	; 171
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	fc 01       	movw	r30, r24
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8e 01       	movw	r16, r28
    148c:	03 5a       	subi	r16, 0xA3	; 163
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	f8 01       	movw	r30, r16
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
    14a2:	27 c0       	rjmp	.+78     	; 0x14f2 <LCDBusyLoop+0x832>
    14a4:	ce 01       	movw	r24, r28
    14a6:	81 5a       	subi	r24, 0xA1	; 161
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	29 e1       	ldi	r18, 0x19	; 25
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	31 83       	std	Z+1, r19	; 0x01
    14b2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b4:	ce 01       	movw	r24, r28
    14b6:	81 5a       	subi	r24, 0xA1	; 161
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	fc 01       	movw	r30, r24
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	8c 01       	movw	r16, r24
    14c2:	c8 01       	movw	r24, r16
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCDBusyLoop+0x804>
    14c8:	8c 01       	movw	r16, r24
    14ca:	ce 01       	movw	r24, r28
    14cc:	81 5a       	subi	r24, 0xA1	; 161
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	fc 01       	movw	r30, r24
    14d2:	11 83       	std	Z+1, r17	; 0x01
    14d4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	ce 01       	movw	r24, r28
    14d8:	83 5a       	subi	r24, 0xA3	; 163
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	9e 01       	movw	r18, r28
    14de:	23 5a       	subi	r18, 0xA3	; 163
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	f9 01       	movw	r30, r18
    14e4:	20 81       	ld	r18, Z
    14e6:	31 81       	ldd	r19, Z+1	; 0x01
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	30 40       	sbci	r19, 0x00	; 0
    14ec:	fc 01       	movw	r30, r24
    14ee:	31 83       	std	Z+1, r19	; 0x01
    14f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	ce 01       	movw	r24, r28
    14f4:	83 5a       	subi	r24, 0xA3	; 163
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	fc 01       	movw	r30, r24
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	89 f6       	brne	.-94     	; 0x14a4 <LCDBusyLoop+0x7e4>
    1502:	58 c0       	rjmp	.+176    	; 0x15b4 <LCDBusyLoop+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	8e 01       	movw	r16, r28
    1506:	03 5a       	subi	r16, 0xA3	; 163
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	ce 01       	movw	r24, r28
    150c:	87 5a       	subi	r24, 0xA7	; 167
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	fc 01       	movw	r30, r24
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	f8 01       	movw	r30, r16
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	ce 01       	movw	r24, r28
    152a:	8f 59       	subi	r24, 0x9F	; 159
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	9e 01       	movw	r18, r28
    1530:	23 5a       	subi	r18, 0xA3	; 163
    1532:	3f 4f       	sbci	r19, 0xFF	; 255
    1534:	f9 01       	movw	r30, r18
    1536:	20 81       	ld	r18, Z
    1538:	31 81       	ldd	r19, Z+1	; 0x01
    153a:	fc 01       	movw	r30, r24
    153c:	31 83       	std	Z+1, r19	; 0x01
    153e:	20 83       	st	Z, r18
    1540:	ce 01       	movw	r24, r28
    1542:	8f 59       	subi	r24, 0x9F	; 159
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	fc 01       	movw	r30, r24
    1548:	80 81       	ld	r24, Z
    154a:	91 81       	ldd	r25, Z+1	; 0x01
    154c:	8c 01       	movw	r16, r24
    154e:	c8 01       	movw	r24, r16
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <LCDBusyLoop+0x890>
    1554:	8c 01       	movw	r16, r24
    1556:	ce 01       	movw	r24, r28
    1558:	8f 59       	subi	r24, 0x9F	; 159
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	fc 01       	movw	r30, r24
    155e:	11 83       	std	Z+1, r17	; 0x01
    1560:	00 83       	st	Z, r16
    1562:	28 c0       	rjmp	.+80     	; 0x15b4 <LCDBusyLoop+0x8f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1564:	8e 01       	movw	r16, r28
    1566:	0c 5a       	subi	r16, 0xAC	; 172
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	ce 01       	movw	r24, r28
    156c:	80 5b       	subi	r24, 0xB0	; 176
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	fc 01       	movw	r30, r24
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	f8 01       	movw	r30, r16
    1584:	80 83       	st	Z, r24
    1586:	ce 01       	movw	r24, r28
    1588:	8d 59       	subi	r24, 0x9D	; 157
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	9e 01       	movw	r18, r28
    158e:	2c 5a       	subi	r18, 0xAC	; 172
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	f9 01       	movw	r30, r18
    1594:	20 81       	ld	r18, Z
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    159a:	ce 01       	movw	r24, r28
    159c:	8d 59       	subi	r24, 0x9D	; 157
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	fc 01       	movw	r30, r24
    15a2:	80 81       	ld	r24, Z
    15a4:	18 2f       	mov	r17, r24
    15a6:	1a 95       	dec	r17
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <LCDBusyLoop+0x8e6>
    15aa:	ce 01       	movw	r24, r28
    15ac:	8d 59       	subi	r24, 0x9D	; 157
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	fc 01       	movw	r30, r24
    15b2:	10 83       	st	Z, r17
		_delay_us(1);	//tEL

		SET_E();
    15b4:	88 e3       	ldi	r24, 0x38	; 56
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	28 e3       	ldi	r18, 0x38	; 56
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	f9 01       	movw	r30, r18
    15be:	20 81       	ld	r18, Z
    15c0:	20 61       	ori	r18, 0x10	; 16
    15c2:	fc 01       	movw	r30, r24
    15c4:	20 83       	st	Z, r18
    15c6:	9e 01       	movw	r18, r28
    15c8:	2c 59       	subi	r18, 0x9C	; 156
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	bf e3       	ldi	r27, 0x3F	; 63
    15d4:	f9 01       	movw	r30, r18
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    15de:	8e 01       	movw	r16, r28
    15e0:	08 59       	subi	r16, 0x98	; 152
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	ce 01       	movw	r24, r28
    15e6:	8c 59       	subi	r24, 0x9C	; 156
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	fc 01       	movw	r30, r24
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	2b ea       	ldi	r18, 0xAB	; 171
    15f6:	3a ea       	ldi	r19, 0xAA	; 170
    15f8:	4a ea       	ldi	r20, 0xAA	; 170
    15fa:	5e e3       	ldi	r21, 0x3E	; 62
    15fc:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	f8 01       	movw	r30, r16
    1606:	80 83       	st	Z, r24
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	a2 83       	std	Z+2, r26	; 0x02
    160c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160e:	ce 01       	movw	r24, r28
    1610:	88 59       	subi	r24, 0x98	; 152
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	11 e0       	ldi	r17, 0x01	; 1
    1616:	fc 01       	movw	r30, r24
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	0c f0       	brlt	.+2      	; 0x1632 <LCDBusyLoop+0x972>
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	11 23       	and	r17, r17
    1634:	39 f0       	breq	.+14     	; 0x1644 <LCDBusyLoop+0x984>
		__ticks = 1;
    1636:	ce 01       	movw	r24, r28
    1638:	84 59       	subi	r24, 0x94	; 148
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18
    1642:	05 c1       	rjmp	.+522    	; 0x184e <LCDBusyLoop+0xb8e>
	else if (__tmp > 255)
    1644:	ce 01       	movw	r24, r28
    1646:	88 59       	subi	r24, 0x98	; 152
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	11 e0       	ldi	r17, 0x01	; 1
    164c:	fc 01       	movw	r30, r24
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	53 e4       	ldi	r21, 0x43	; 67
    165e:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	0c f0       	brlt	.+2      	; 0x1668 <LCDBusyLoop+0x9a8>
    1666:	10 e0       	ldi	r17, 0x00	; 0
    1668:	11 23       	and	r17, r17
    166a:	09 f4       	brne	.+2      	; 0x166e <LCDBusyLoop+0x9ae>
    166c:	df c0       	rjmp	.+446    	; 0x182c <LCDBusyLoop+0xb6c>
	{
		_delay_ms(__us / 1000.0);
    166e:	ce 01       	movw	r24, r28
    1670:	8c 59       	subi	r24, 0x9C	; 156
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	fc 01       	movw	r30, r24
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a e7       	ldi	r20, 0x7A	; 122
    1684:	54 e4       	ldi	r21, 0x44	; 68
    1686:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 01       	movw	r18, r28
    1690:	23 59       	subi	r18, 0x93	; 147
    1692:	3f 4f       	sbci	r19, 0xFF	; 255
    1694:	f9 01       	movw	r30, r18
    1696:	80 83       	st	Z, r24
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	a2 83       	std	Z+2, r26	; 0x02
    169c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    169e:	8e 01       	movw	r16, r28
    16a0:	0f 58       	subi	r16, 0x8F	; 143
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	ce 01       	movw	r24, r28
    16a6:	83 59       	subi	r24, 0x93	; 147
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	fc 01       	movw	r30, r24
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	ce 01       	movw	r24, r28
    16d0:	8f 58       	subi	r24, 0x8F	; 143
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	11 e0       	ldi	r17, 0x01	; 1
    16d6:	fc 01       	movw	r30, r24
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <LCDBusyLoop+0xa32>
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	11 23       	and	r17, r17
    16f4:	49 f0       	breq	.+18     	; 0x1708 <LCDBusyLoop+0xa48>
		__ticks = 1;
    16f6:	ce 01       	movw	r24, r28
    16f8:	8b 58       	subi	r24, 0x8B	; 139
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	fc 01       	movw	r30, r24
    1702:	31 83       	std	Z+1, r19	; 0x01
    1704:	20 83       	st	Z, r18
    1706:	74 c0       	rjmp	.+232    	; 0x17f0 <LCDBusyLoop+0xb30>
	else if (__tmp > 65535)
    1708:	ce 01       	movw	r24, r28
    170a:	8f 58       	subi	r24, 0x8F	; 143
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	11 e0       	ldi	r17, 0x01	; 1
    1710:	fc 01       	movw	r30, r24
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	0c f0       	brlt	.+2      	; 0x172c <LCDBusyLoop+0xa6c>
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	11 23       	and	r17, r17
    172e:	09 f4       	brne	.+2      	; 0x1732 <LCDBusyLoop+0xa72>
    1730:	4d c0       	rjmp	.+154    	; 0x17cc <LCDBusyLoop+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	ce 01       	movw	r24, r28
    1734:	83 59       	subi	r24, 0x93	; 147
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	fc 01       	movw	r30, r24
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8e 01       	movw	r16, r28
    1754:	0b 58       	subi	r16, 0x8B	; 139
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	f8 01       	movw	r30, r16
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
    176a:	27 c0       	rjmp	.+78     	; 0x17ba <LCDBusyLoop+0xafa>
    176c:	ce 01       	movw	r24, r28
    176e:	89 58       	subi	r24, 0x89	; 137
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	29 e1       	ldi	r18, 0x19	; 25
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	fc 01       	movw	r30, r24
    1778:	31 83       	std	Z+1, r19	; 0x01
    177a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    177c:	ce 01       	movw	r24, r28
    177e:	89 58       	subi	r24, 0x89	; 137
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	fc 01       	movw	r30, r24
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	8c 01       	movw	r16, r24
    178a:	c8 01       	movw	r24, r16
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCDBusyLoop+0xacc>
    1790:	8c 01       	movw	r16, r24
    1792:	ce 01       	movw	r24, r28
    1794:	89 58       	subi	r24, 0x89	; 137
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	fc 01       	movw	r30, r24
    179a:	11 83       	std	Z+1, r17	; 0x01
    179c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	ce 01       	movw	r24, r28
    17a0:	8b 58       	subi	r24, 0x8B	; 139
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	9e 01       	movw	r18, r28
    17a6:	2b 58       	subi	r18, 0x8B	; 139
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	31 81       	ldd	r19, Z+1	; 0x01
    17b0:	21 50       	subi	r18, 0x01	; 1
    17b2:	30 40       	sbci	r19, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	31 83       	std	Z+1, r19	; 0x01
    17b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	ce 01       	movw	r24, r28
    17bc:	8b 58       	subi	r24, 0x8B	; 139
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	89 f6       	brne	.-94     	; 0x176c <LCDBusyLoop+0xaac>
    17ca:	58 c0       	rjmp	.+176    	; 0x187c <LCDBusyLoop+0xbbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	8e 01       	movw	r16, r28
    17ce:	0b 58       	subi	r16, 0x8B	; 139
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	ce 01       	movw	r24, r28
    17d4:	8f 58       	subi	r24, 0x8F	; 143
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	fc 01       	movw	r30, r24
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	ce 01       	movw	r24, r28
    17f2:	87 58       	subi	r24, 0x87	; 135
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	9e 01       	movw	r18, r28
    17f8:	2b 58       	subi	r18, 0x8B	; 139
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	f9 01       	movw	r30, r18
    17fe:	20 81       	ld	r18, Z
    1800:	31 81       	ldd	r19, Z+1	; 0x01
    1802:	fc 01       	movw	r30, r24
    1804:	31 83       	std	Z+1, r19	; 0x01
    1806:	20 83       	st	Z, r18
    1808:	ce 01       	movw	r24, r28
    180a:	87 58       	subi	r24, 0x87	; 135
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	fc 01       	movw	r30, r24
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	8c 01       	movw	r16, r24
    1816:	c8 01       	movw	r24, r16
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCDBusyLoop+0xb58>
    181c:	8c 01       	movw	r16, r24
    181e:	ce 01       	movw	r24, r28
    1820:	87 58       	subi	r24, 0x87	; 135
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	fc 01       	movw	r30, r24
    1826:	11 83       	std	Z+1, r17	; 0x01
    1828:	00 83       	st	Z, r16
    182a:	28 c0       	rjmp	.+80     	; 0x187c <LCDBusyLoop+0xbbc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    182c:	8e 01       	movw	r16, r28
    182e:	04 59       	subi	r16, 0x94	; 148
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	ce 01       	movw	r24, r28
    1834:	88 59       	subi	r24, 0x98	; 152
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	fc 01       	movw	r30, r24
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	f8 01       	movw	r30, r16
    184c:	80 83       	st	Z, r24
    184e:	ce 01       	movw	r24, r28
    1850:	85 58       	subi	r24, 0x85	; 133
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	9e 01       	movw	r18, r28
    1856:	24 59       	subi	r18, 0x94	; 148
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1862:	ce 01       	movw	r24, r28
    1864:	85 58       	subi	r24, 0x85	; 133
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	18 2f       	mov	r17, r24
    186e:	1a 95       	dec	r17
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCDBusyLoop+0xbae>
    1872:	ce 01       	movw	r24, r28
    1874:	85 58       	subi	r24, 0x85	; 133
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	fc 01       	movw	r30, r24
    187a:	10 83       	st	Z, r17
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    187c:	86 e3       	ldi	r24, 0x36	; 54
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	fc 01       	movw	r30, r24
    1882:	80 81       	ld	r24, Z
    1884:	8a 83       	std	Y+2, r24	; 0x02
		temp&=0x0F;
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	8f 70       	andi	r24, 0x0F	; 15
    188a:	8a 83       	std	Y+2, r24	; 0x02

		status=status|temp;
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	89 2b       	or	r24, r25
    1892:	89 83       	std	Y+1, r24	; 0x01

		busy=status & 0b10000000;
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	80 78       	andi	r24, 0x80	; 128
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	9e 01       	movw	r18, r28
    189c:	24 58       	subi	r18, 0x84	; 132
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e0       	ldi	r26, 0x00	; 0
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	f9 01       	movw	r30, r18
    18aa:	80 83       	st	Z, r24
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	a2 83       	std	Z+2, r26	; 0x02
    18b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    18b2:	8e 01       	movw	r16, r28
    18b4:	00 58       	subi	r16, 0x80	; 128
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	ce 01       	movw	r24, r28
    18ba:	84 58       	subi	r24, 0x84	; 132
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	fc 01       	movw	r30, r24
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	2b ea       	ldi	r18, 0xAB	; 171
    18ca:	3a ea       	ldi	r19, 0xAA	; 170
    18cc:	4a ea       	ldi	r20, 0xAA	; 170
    18ce:	5e e3       	ldi	r21, 0x3E	; 62
    18d0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e2:	ce 01       	movw	r24, r28
    18e4:	80 58       	subi	r24, 0x80	; 128
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	11 e0       	ldi	r17, 0x01	; 1
    18ea:	fc 01       	movw	r30, r24
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	0c f0       	brlt	.+2      	; 0x1906 <LCDBusyLoop+0xc46>
    1904:	10 e0       	ldi	r17, 0x00	; 0
    1906:	11 23       	and	r17, r17
    1908:	39 f0       	breq	.+14     	; 0x1918 <LCDBusyLoop+0xc58>
		__ticks = 1;
    190a:	ce 01       	movw	r24, r28
    190c:	8c 57       	subi	r24, 0x7C	; 124
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	fc 01       	movw	r30, r24
    1914:	20 83       	st	Z, r18
    1916:	05 c1       	rjmp	.+522    	; 0x1b22 <LCDBusyLoop+0xe62>
	else if (__tmp > 255)
    1918:	ce 01       	movw	r24, r28
    191a:	80 58       	subi	r24, 0x80	; 128
    191c:	9f 4f       	sbci	r25, 0xFF	; 255
    191e:	11 e0       	ldi	r17, 0x01	; 1
    1920:	fc 01       	movw	r30, r24
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	53 e4       	ldi	r21, 0x43	; 67
    1932:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	0c f0       	brlt	.+2      	; 0x193c <LCDBusyLoop+0xc7c>
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	11 23       	and	r17, r17
    193e:	09 f4       	brne	.+2      	; 0x1942 <LCDBusyLoop+0xc82>
    1940:	df c0       	rjmp	.+446    	; 0x1b00 <LCDBusyLoop+0xe40>
	{
		_delay_ms(__us / 1000.0);
    1942:	ce 01       	movw	r24, r28
    1944:	84 58       	subi	r24, 0x84	; 132
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	fc 01       	movw	r30, r24
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a e7       	ldi	r20, 0x7A	; 122
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9e 01       	movw	r18, r28
    1964:	2b 57       	subi	r18, 0x7B	; 123
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	f9 01       	movw	r30, r18
    196a:	80 83       	st	Z, r24
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	a2 83       	std	Z+2, r26	; 0x02
    1970:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1972:	8e 01       	movw	r16, r28
    1974:	07 57       	subi	r16, 0x77	; 119
    1976:	1f 4f       	sbci	r17, 0xFF	; 255
    1978:	ce 01       	movw	r24, r28
    197a:	8b 57       	subi	r24, 0x7B	; 123
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	fc 01       	movw	r30, r24
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	53 e4       	ldi	r21, 0x43	; 67
    1990:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	f8 01       	movw	r30, r16
    199a:	80 83       	st	Z, r24
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	a2 83       	std	Z+2, r26	; 0x02
    19a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a2:	ce 01       	movw	r24, r28
    19a4:	87 57       	subi	r24, 0x77	; 119
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	11 e0       	ldi	r17, 0x01	; 1
    19aa:	fc 01       	movw	r30, r24
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	0c f0       	brlt	.+2      	; 0x19c6 <LCDBusyLoop+0xd06>
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	11 23       	and	r17, r17
    19c8:	49 f0       	breq	.+18     	; 0x19dc <LCDBusyLoop+0xd1c>
		__ticks = 1;
    19ca:	ce 01       	movw	r24, r28
    19cc:	83 57       	subi	r24, 0x73	; 115
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	21 e0       	ldi	r18, 0x01	; 1
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	fc 01       	movw	r30, r24
    19d6:	31 83       	std	Z+1, r19	; 0x01
    19d8:	20 83       	st	Z, r18
    19da:	74 c0       	rjmp	.+232    	; 0x1ac4 <LCDBusyLoop+0xe04>
	else if (__tmp > 65535)
    19dc:	ce 01       	movw	r24, r28
    19de:	87 57       	subi	r24, 0x77	; 119
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	11 e0       	ldi	r17, 0x01	; 1
    19e4:	fc 01       	movw	r30, r24
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <LCDBusyLoop+0xd40>
    19fe:	10 e0       	ldi	r17, 0x00	; 0
    1a00:	11 23       	and	r17, r17
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <LCDBusyLoop+0xd46>
    1a04:	4d c0       	rjmp	.+154    	; 0x1aa0 <LCDBusyLoop+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	ce 01       	movw	r24, r28
    1a08:	8b 57       	subi	r24, 0x7B	; 123
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8e 01       	movw	r16, r28
    1a28:	03 57       	subi	r16, 0x73	; 115
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	27 c0       	rjmp	.+78     	; 0x1a8e <LCDBusyLoop+0xdce>
    1a40:	ce 01       	movw	r24, r28
    1a42:	81 57       	subi	r24, 0x71	; 113
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	29 e1       	ldi	r18, 0x19	; 25
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	31 83       	std	Z+1, r19	; 0x01
    1a4e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a50:	ce 01       	movw	r24, r28
    1a52:	81 57       	subi	r24, 0x71	; 113
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	fc 01       	movw	r30, r24
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	8c 01       	movw	r16, r24
    1a5e:	c8 01       	movw	r24, r16
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCDBusyLoop+0xda0>
    1a64:	8c 01       	movw	r16, r24
    1a66:	ce 01       	movw	r24, r28
    1a68:	81 57       	subi	r24, 0x71	; 113
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	11 83       	std	Z+1, r17	; 0x01
    1a70:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a72:	ce 01       	movw	r24, r28
    1a74:	83 57       	subi	r24, 0x73	; 115
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	9e 01       	movw	r18, r28
    1a7a:	23 57       	subi	r18, 0x73	; 115
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	f9 01       	movw	r30, r18
    1a80:	20 81       	ld	r18, Z
    1a82:	31 81       	ldd	r19, Z+1	; 0x01
    1a84:	21 50       	subi	r18, 0x01	; 1
    1a86:	30 40       	sbci	r19, 0x00	; 0
    1a88:	fc 01       	movw	r30, r24
    1a8a:	31 83       	std	Z+1, r19	; 0x01
    1a8c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	ce 01       	movw	r24, r28
    1a90:	83 57       	subi	r24, 0x73	; 115
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	89 f6       	brne	.-94     	; 0x1a40 <LCDBusyLoop+0xd80>
    1a9e:	58 c0       	rjmp	.+176    	; 0x1b50 <LCDBusyLoop+0xe90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	03 57       	subi	r16, 0x73	; 115
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	87 57       	subi	r24, 0x77	; 119
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	fc 01       	movw	r30, r24
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	8f 56       	subi	r24, 0x6F	; 111
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	9e 01       	movw	r18, r28
    1acc:	23 57       	subi	r18, 0x73	; 115
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	20 81       	ld	r18, Z
    1ad4:	31 81       	ldd	r19, Z+1	; 0x01
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	31 83       	std	Z+1, r19	; 0x01
    1ada:	20 83       	st	Z, r18
    1adc:	ce 01       	movw	r24, r28
    1ade:	8f 56       	subi	r24, 0x6F	; 111
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	8c 01       	movw	r16, r24
    1aea:	c8 01       	movw	r24, r16
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCDBusyLoop+0xe2c>
    1af0:	8c 01       	movw	r16, r24
    1af2:	ce 01       	movw	r24, r28
    1af4:	8f 56       	subi	r24, 0x6F	; 111
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	fc 01       	movw	r30, r24
    1afa:	11 83       	std	Z+1, r17	; 0x01
    1afc:	00 83       	st	Z, r16
    1afe:	28 c0       	rjmp	.+80     	; 0x1b50 <LCDBusyLoop+0xe90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b00:	8e 01       	movw	r16, r28
    1b02:	0c 57       	subi	r16, 0x7C	; 124
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	ce 01       	movw	r24, r28
    1b08:	80 58       	subi	r24, 0x80	; 128
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 83       	st	Z, r24
    1b22:	ce 01       	movw	r24, r28
    1b24:	8d 56       	subi	r24, 0x6D	; 109
    1b26:	9f 4f       	sbci	r25, 0xFF	; 255
    1b28:	9e 01       	movw	r18, r28
    1b2a:	2c 57       	subi	r18, 0x7C	; 124
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2e:	f9 01       	movw	r30, r18
    1b30:	20 81       	ld	r18, Z
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b36:	ce 01       	movw	r24, r28
    1b38:	8d 56       	subi	r24, 0x6D	; 109
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	80 81       	ld	r24, Z
    1b40:	18 2f       	mov	r17, r24
    1b42:	1a 95       	dec	r17
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCDBusyLoop+0xe82>
    1b46:	ce 01       	movw	r24, r28
    1b48:	8d 56       	subi	r24, 0x6D	; 109
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	10 83       	st	Z, r17

		_delay_us(0.5);
		CLEAR_E();
    1b50:	88 e3       	ldi	r24, 0x38	; 56
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	28 e3       	ldi	r18, 0x38	; 56
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	f9 01       	movw	r30, r18
    1b5a:	20 81       	ld	r18, Z
    1b5c:	2f 7e       	andi	r18, 0xEF	; 239
    1b5e:	fc 01       	movw	r30, r24
    1b60:	20 83       	st	Z, r18
    1b62:	9e 01       	movw	r18, r28
    1b64:	2c 56       	subi	r18, 0x6C	; 108
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e8       	ldi	r26, 0x80	; 128
    1b6e:	bf e3       	ldi	r27, 0x3F	; 63
    1b70:	f9 01       	movw	r30, r18
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	08 56       	subi	r16, 0x68	; 104
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	ce 01       	movw	r24, r28
    1b82:	8c 56       	subi	r24, 0x6C	; 108
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	fc 01       	movw	r30, r24
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	2b ea       	ldi	r18, 0xAB	; 171
    1b92:	3a ea       	ldi	r19, 0xAA	; 170
    1b94:	4a ea       	ldi	r20, 0xAA	; 170
    1b96:	5e e3       	ldi	r21, 0x3E	; 62
    1b98:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	80 83       	st	Z, r24
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	a2 83       	std	Z+2, r26	; 0x02
    1ba8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1baa:	ce 01       	movw	r24, r28
    1bac:	88 56       	subi	r24, 0x68	; 104
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	11 e0       	ldi	r17, 0x01	; 1
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	0c f0       	brlt	.+2      	; 0x1bce <LCDBusyLoop+0xf0e>
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
    1bce:	11 23       	and	r17, r17
    1bd0:	39 f0       	breq	.+14     	; 0x1be0 <LCDBusyLoop+0xf20>
		__ticks = 1;
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	84 56       	subi	r24, 0x64	; 100
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	21 e0       	ldi	r18, 0x01	; 1
    1bda:	fc 01       	movw	r30, r24
    1bdc:	20 83       	st	Z, r18
    1bde:	05 c1       	rjmp	.+522    	; 0x1dea <LCDBusyLoop+0x112a>
	else if (__tmp > 255)
    1be0:	ce 01       	movw	r24, r28
    1be2:	88 56       	subi	r24, 0x68	; 104
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	11 e0       	ldi	r17, 0x01	; 1
    1be8:	fc 01       	movw	r30, r24
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	0c f0       	brlt	.+2      	; 0x1c04 <LCDBusyLoop+0xf44>
    1c02:	10 e0       	ldi	r17, 0x00	; 0
    1c04:	11 23       	and	r17, r17
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <LCDBusyLoop+0xf4a>
    1c08:	df c0       	rjmp	.+446    	; 0x1dc8 <LCDBusyLoop+0x1108>
	{
		_delay_ms(__us / 1000.0);
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	8c 56       	subi	r24, 0x6C	; 108
    1c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c10:	fc 01       	movw	r30, r24
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	4a e7       	ldi	r20, 0x7A	; 122
    1c20:	54 e4       	ldi	r21, 0x44	; 68
    1c22:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 01       	movw	r18, r28
    1c2c:	23 56       	subi	r18, 0x63	; 99
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	f9 01       	movw	r30, r18
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	0f 55       	subi	r16, 0x5F	; 95
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	ce 01       	movw	r24, r28
    1c42:	83 56       	subi	r24, 0x63	; 99
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	fc 01       	movw	r30, r24
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a e7       	ldi	r20, 0x7A	; 122
    1c56:	53 e4       	ldi	r21, 0x43	; 67
    1c58:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	8f 55       	subi	r24, 0x5F	; 95
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	11 e0       	ldi	r17, 0x01	; 1
    1c72:	fc 01       	movw	r30, r24
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <LCDBusyLoop+0xfce>
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	11 23       	and	r17, r17
    1c90:	49 f0       	breq	.+18     	; 0x1ca4 <LCDBusyLoop+0xfe4>
		__ticks = 1;
    1c92:	ce 01       	movw	r24, r28
    1c94:	8b 55       	subi	r24, 0x5B	; 91
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	21 e0       	ldi	r18, 0x01	; 1
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	31 83       	std	Z+1, r19	; 0x01
    1ca0:	20 83       	st	Z, r18
    1ca2:	74 c0       	rjmp	.+232    	; 0x1d8c <LCDBusyLoop+0x10cc>
	else if (__tmp > 65535)
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	8f 55       	subi	r24, 0x5F	; 95
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	11 e0       	ldi	r17, 0x01	; 1
    1cac:	fc 01       	movw	r30, r24
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	0c f0       	brlt	.+2      	; 0x1cc8 <LCDBusyLoop+0x1008>
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	11 23       	and	r17, r17
    1cca:	09 f4       	brne	.+2      	; 0x1cce <LCDBusyLoop+0x100e>
    1ccc:	4d c0       	rjmp	.+154    	; 0x1d68 <LCDBusyLoop+0x10a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	ce 01       	movw	r24, r28
    1cd0:	83 56       	subi	r24, 0x63	; 99
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8e 01       	movw	r16, r28
    1cf0:	0b 55       	subi	r16, 0x5B	; 91
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	27 c0       	rjmp	.+78     	; 0x1d56 <LCDBusyLoop+0x1096>
    1d08:	ce 01       	movw	r24, r28
    1d0a:	89 55       	subi	r24, 0x59	; 89
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	29 e1       	ldi	r18, 0x19	; 25
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	fc 01       	movw	r30, r24
    1d14:	31 83       	std	Z+1, r19	; 0x01
    1d16:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d18:	ce 01       	movw	r24, r28
    1d1a:	89 55       	subi	r24, 0x59	; 89
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	8c 01       	movw	r16, r24
    1d26:	c8 01       	movw	r24, r16
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCDBusyLoop+0x1068>
    1d2c:	8c 01       	movw	r16, r24
    1d2e:	ce 01       	movw	r24, r28
    1d30:	89 55       	subi	r24, 0x59	; 89
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	fc 01       	movw	r30, r24
    1d36:	11 83       	std	Z+1, r17	; 0x01
    1d38:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	8b 55       	subi	r24, 0x5B	; 91
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	9e 01       	movw	r18, r28
    1d42:	2b 55       	subi	r18, 0x5B	; 91
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	f9 01       	movw	r30, r18
    1d48:	20 81       	ld	r18, Z
    1d4a:	31 81       	ldd	r19, Z+1	; 0x01
    1d4c:	21 50       	subi	r18, 0x01	; 1
    1d4e:	30 40       	sbci	r19, 0x00	; 0
    1d50:	fc 01       	movw	r30, r24
    1d52:	31 83       	std	Z+1, r19	; 0x01
    1d54:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	ce 01       	movw	r24, r28
    1d58:	8b 55       	subi	r24, 0x5B	; 91
    1d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	80 81       	ld	r24, Z
    1d60:	91 81       	ldd	r25, Z+1	; 0x01
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	89 f6       	brne	.-94     	; 0x1d08 <LCDBusyLoop+0x1048>
    1d66:	58 c0       	rjmp	.+176    	; 0x1e18 <LCDBusyLoop+0x1158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0b 55       	subi	r16, 0x5B	; 91
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	ce 01       	movw	r24, r28
    1d70:	8f 55       	subi	r24, 0x5F	; 95
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	fc 01       	movw	r30, r24
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	f8 01       	movw	r30, r16
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	87 55       	subi	r24, 0x57	; 87
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	9e 01       	movw	r18, r28
    1d94:	2b 55       	subi	r18, 0x5B	; 91
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	f9 01       	movw	r30, r18
    1d9a:	20 81       	ld	r18, Z
    1d9c:	31 81       	ldd	r19, Z+1	; 0x01
    1d9e:	fc 01       	movw	r30, r24
    1da0:	31 83       	std	Z+1, r19	; 0x01
    1da2:	20 83       	st	Z, r18
    1da4:	ce 01       	movw	r24, r28
    1da6:	87 55       	subi	r24, 0x57	; 87
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	fc 01       	movw	r30, r24
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	8c 01       	movw	r16, r24
    1db2:	c8 01       	movw	r24, r16
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCDBusyLoop+0x10f4>
    1db8:	8c 01       	movw	r16, r24
    1dba:	ce 01       	movw	r24, r28
    1dbc:	87 55       	subi	r24, 0x57	; 87
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	11 83       	std	Z+1, r17	; 0x01
    1dc4:	00 83       	st	Z, r16
    1dc6:	28 c0       	rjmp	.+80     	; 0x1e18 <LCDBusyLoop+0x1158>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc8:	8e 01       	movw	r16, r28
    1dca:	04 56       	subi	r16, 0x64	; 100
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dce:	ce 01       	movw	r24, r28
    1dd0:	88 56       	subi	r24, 0x68	; 104
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	f8 01       	movw	r30, r16
    1de8:	80 83       	st	Z, r24
    1dea:	ce 01       	movw	r24, r28
    1dec:	85 55       	subi	r24, 0x55	; 85
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	9e 01       	movw	r18, r28
    1df2:	24 56       	subi	r18, 0x64	; 100
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	f9 01       	movw	r30, r18
    1df8:	20 81       	ld	r18, Z
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dfe:	ce 01       	movw	r24, r28
    1e00:	85 55       	subi	r24, 0x55	; 85
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	18 2f       	mov	r17, r24
    1e0a:	1a 95       	dec	r17
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCDBusyLoop+0x114a>
    1e0e:	ce 01       	movw	r24, r28
    1e10:	85 55       	subi	r24, 0x55	; 85
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	fc 01       	movw	r30, r24
    1e16:	10 83       	st	Z, r17
		_delay_us(1);	//tEL
	}while(busy);
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <LCDBusyLoop+0x1160>
    1e1e:	4e c8       	rjmp	.-3940   	; 0xebc <LCDBusyLoop+0x1fc>

	CLEAR_RW();		//write mode
    1e20:	82 e3       	ldi	r24, 0x32	; 50
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	22 e3       	ldi	r18, 0x32	; 50
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	f9 01       	movw	r30, r18
    1e2a:	20 81       	ld	r18, Z
    1e2c:	2f 7b       	andi	r18, 0xBF	; 191
    1e2e:	fc 01       	movw	r30, r24
    1e30:	20 83       	st	Z, r18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    1e32:	87 e3       	ldi	r24, 0x37	; 55
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	27 e3       	ldi	r18, 0x37	; 55
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	f9 01       	movw	r30, r18
    1e3c:	20 81       	ld	r18, Z
    1e3e:	2f 60       	ori	r18, 0x0F	; 15
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18

}
    1e44:	c5 55       	subi	r28, 0x55	; 85
    1e46:	df 4f       	sbci	r29, 0xFF	; 255
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <LCDInit>:

void LCDInit(uint8_t style)
{
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	c8 55       	subi	r28, 0x58	; 88
    1e6a:	d0 40       	sbci	r29, 0x00	; 0
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	9e 01       	movw	r18, r28
    1e78:	28 5a       	subi	r18, 0xA8	; 168
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	80 83       	st	Z, r24
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 ef       	ldi	r26, 0xF0	; 240
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	8a 83       	std	Y+2, r24	; 0x02
    1e8a:	9b 83       	std	Y+3, r25	; 0x03
    1e8c:	ac 83       	std	Y+4, r26	; 0x04
    1e8e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6a 81       	ldd	r22, Y+2	; 0x02
    1e92:	7b 81       	ldd	r23, Y+3	; 0x03
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a e7       	ldi	r20, 0x7A	; 122
    1e9e:	53 e4       	ldi	r21, 0x43	; 67
    1ea0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	9f 83       	std	Y+7, r25	; 0x07
    1eac:	a8 87       	std	Y+8, r26	; 0x08
    1eae:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1eb0:	11 e0       	ldi	r17, 0x01	; 1
    1eb2:	6e 81       	ldd	r22, Y+6	; 0x06
    1eb4:	7f 81       	ldd	r23, Y+7	; 0x07
    1eb6:	88 85       	ldd	r24, Y+8	; 0x08
    1eb8:	99 85       	ldd	r25, Y+9	; 0x09
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	0c f0       	brlt	.+2      	; 0x1ecc <LCDInit+0x70>
    1eca:	10 e0       	ldi	r17, 0x00	; 0
    1ecc:	11 23       	and	r17, r17
    1ece:	29 f0       	breq	.+10     	; 0x1eda <LCDInit+0x7e>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9b 87       	std	Y+11, r25	; 0x0b
    1ed6:	8a 87       	std	Y+10, r24	; 0x0a
    1ed8:	46 c0       	rjmp	.+140    	; 0x1f66 <LCDInit+0x10a>
	else if (__tmp > 65535)
    1eda:	11 e0       	ldi	r17, 0x01	; 1
    1edc:	6e 81       	ldd	r22, Y+6	; 0x06
    1ede:	7f 81       	ldd	r23, Y+7	; 0x07
    1ee0:	88 85       	ldd	r24, Y+8	; 0x08
    1ee2:	99 85       	ldd	r25, Y+9	; 0x09
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	0c f0       	brlt	.+2      	; 0x1ef6 <LCDInit+0x9a>
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	11 23       	and	r17, r17
    1ef8:	61 f1       	breq	.+88     	; 0x1f52 <LCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6a 81       	ldd	r22, Y+2	; 0x02
    1efc:	7b 81       	ldd	r23, Y+3	; 0x03
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9b 87       	std	Y+11, r25	; 0x0b
    1f20:	8a 87       	std	Y+10, r24	; 0x0a
    1f22:	12 c0       	rjmp	.+36     	; 0x1f48 <LCDInit+0xec>
    1f24:	89 e1       	ldi	r24, 0x19	; 25
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9d 87       	std	Y+13, r25	; 0x0d
    1f2a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f30:	8c 01       	movw	r16, r24
    1f32:	c8 01       	movw	r24, r16
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCDInit+0xd8>
    1f38:	8c 01       	movw	r16, r24
    1f3a:	1d 87       	std	Y+13, r17	; 0x0d
    1f3c:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9b 87       	std	Y+11, r25	; 0x0b
    1f46:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	51 f7       	brne	.-44     	; 0x1f24 <LCDInit+0xc8>
    1f50:	17 c0       	rjmp	.+46     	; 0x1f80 <LCDInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6e 81       	ldd	r22, Y+6	; 0x06
    1f54:	7f 81       	ldd	r23, Y+7	; 0x07
    1f56:	88 85       	ldd	r24, Y+8	; 0x08
    1f58:	99 85       	ldd	r25, Y+9	; 0x09
    1f5a:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9b 87       	std	Y+11, r25	; 0x0b
    1f64:	8a 87       	std	Y+10, r24	; 0x0a
    1f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6a:	9f 87       	std	Y+15, r25	; 0x0f
    1f6c:	8e 87       	std	Y+14, r24	; 0x0e
    1f6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f72:	8c 01       	movw	r16, r24
    1f74:	f8 01       	movw	r30, r16
    1f76:	31 97       	sbiw	r30, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCDInit+0x11a>
    1f7a:	8f 01       	movw	r16, r30
    1f7c:	1f 87       	std	Y+15, r17	; 0x0f
    1f7e:	0e 87       	std	Y+14, r16	; 0x0e
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    1f80:	87 e3       	ldi	r24, 0x37	; 55
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	27 e3       	ldi	r18, 0x37	; 55
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	f9 01       	movw	r30, r18
    1f8a:	20 81       	ld	r18, Z
    1f8c:	2f 60       	ori	r18, 0x0F	; 15
    1f8e:	fc 01       	movw	r30, r24
    1f90:	20 83       	st	Z, r18
	LCD_E_DDR|=(1<<LCD_E_POS);
    1f92:	87 e3       	ldi	r24, 0x37	; 55
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	27 e3       	ldi	r18, 0x37	; 55
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	f9 01       	movw	r30, r18
    1f9c:	20 81       	ld	r18, Z
    1f9e:	20 61       	ori	r18, 0x10	; 16
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	20 83       	st	Z, r18
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    1fa4:	81 e3       	ldi	r24, 0x31	; 49
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	21 e3       	ldi	r18, 0x31	; 49
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	f9 01       	movw	r30, r18
    1fae:	20 81       	ld	r18, Z
    1fb0:	28 60       	ori	r18, 0x08	; 8
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	20 83       	st	Z, r18
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    1fb6:	81 e3       	ldi	r24, 0x31	; 49
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	21 e3       	ldi	r18, 0x31	; 49
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	f9 01       	movw	r30, r18
    1fc0:	20 81       	ld	r18, Z
    1fc2:	20 64       	ori	r18, 0x40	; 64
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	20 83       	st	Z, r18

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    1fc8:	88 e3       	ldi	r24, 0x38	; 56
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	28 e3       	ldi	r18, 0x38	; 56
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	20 81       	ld	r18, Z
    1fd4:	20 7f       	andi	r18, 0xF0	; 240
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	20 83       	st	Z, r18
	CLEAR_E();
    1fda:	88 e3       	ldi	r24, 0x38	; 56
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	28 e3       	ldi	r18, 0x38	; 56
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	20 81       	ld	r18, Z
    1fe6:	2f 7e       	andi	r18, 0xEF	; 239
    1fe8:	fc 01       	movw	r30, r24
    1fea:	20 83       	st	Z, r18
	CLEAR_RW();
    1fec:	82 e3       	ldi	r24, 0x32	; 50
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	22 e3       	ldi	r18, 0x32	; 50
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	f9 01       	movw	r30, r18
    1ff6:	20 81       	ld	r18, Z
    1ff8:	2f 7b       	andi	r18, 0xBF	; 191
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	20 83       	st	Z, r18
	CLEAR_RS();
    1ffe:	82 e3       	ldi	r24, 0x32	; 50
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	22 e3       	ldi	r18, 0x32	; 50
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	f9 01       	movw	r30, r18
    2008:	20 81       	ld	r18, Z
    200a:	27 7f       	andi	r18, 0xF7	; 247
    200c:	fc 01       	movw	r30, r24
    200e:	20 83       	st	Z, r18
    2010:	8a e9       	ldi	r24, 0x9A	; 154
    2012:	99 e9       	ldi	r25, 0x99	; 153
    2014:	a9 e9       	ldi	r26, 0x99	; 153
    2016:	be e3       	ldi	r27, 0x3E	; 62
    2018:	88 8b       	std	Y+16, r24	; 0x10
    201a:	99 8b       	std	Y+17, r25	; 0x11
    201c:	aa 8b       	std	Y+18, r26	; 0x12
    201e:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    2020:	68 89       	ldd	r22, Y+16	; 0x10
    2022:	79 89       	ldd	r23, Y+17	; 0x11
    2024:	8a 89       	ldd	r24, Y+18	; 0x12
    2026:	9b 89       	ldd	r25, Y+19	; 0x13
    2028:	2b ea       	ldi	r18, 0xAB	; 171
    202a:	3a ea       	ldi	r19, 0xAA	; 170
    202c:	4a ea       	ldi	r20, 0xAA	; 170
    202e:	5e e3       	ldi	r21, 0x3E	; 62
    2030:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8c 8b       	std	Y+20, r24	; 0x14
    203a:	9d 8b       	std	Y+21, r25	; 0x15
    203c:	ae 8b       	std	Y+22, r26	; 0x16
    203e:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2040:	11 e0       	ldi	r17, 0x01	; 1
    2042:	6c 89       	ldd	r22, Y+20	; 0x14
    2044:	7d 89       	ldd	r23, Y+21	; 0x15
    2046:	8e 89       	ldd	r24, Y+22	; 0x16
    2048:	9f 89       	ldd	r25, Y+23	; 0x17
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	0c f0       	brlt	.+2      	; 0x205c <LCDInit+0x200>
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	11 23       	and	r17, r17
    205e:	19 f0       	breq	.+6      	; 0x2066 <LCDInit+0x20a>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	88 8f       	std	Y+24, r24	; 0x18
    2064:	a3 c0       	rjmp	.+326    	; 0x21ac <LCDInit+0x350>
	else if (__tmp > 255)
    2066:	11 e0       	ldi	r17, 0x01	; 1
    2068:	6c 89       	ldd	r22, Y+20	; 0x14
    206a:	7d 89       	ldd	r23, Y+21	; 0x15
    206c:	8e 89       	ldd	r24, Y+22	; 0x16
    206e:	9f 89       	ldd	r25, Y+23	; 0x17
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	53 e4       	ldi	r21, 0x43	; 67
    2078:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	0c f0       	brlt	.+2      	; 0x2082 <LCDInit+0x226>
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	11 23       	and	r17, r17
    2084:	09 f4       	brne	.+2      	; 0x2088 <LCDInit+0x22c>
    2086:	89 c0       	rjmp	.+274    	; 0x219a <LCDInit+0x33e>
	{
		_delay_ms(__us / 1000.0);
    2088:	68 89       	ldd	r22, Y+16	; 0x10
    208a:	79 89       	ldd	r23, Y+17	; 0x11
    208c:	8a 89       	ldd	r24, Y+18	; 0x12
    208e:	9b 89       	ldd	r25, Y+19	; 0x13
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a e7       	ldi	r20, 0x7A	; 122
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	89 8f       	std	Y+25, r24	; 0x19
    20a2:	9a 8f       	std	Y+26, r25	; 0x1a
    20a4:	ab 8f       	std	Y+27, r26	; 0x1b
    20a6:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    20a8:	69 8d       	ldd	r22, Y+25	; 0x19
    20aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a e7       	ldi	r20, 0x7A	; 122
    20b6:	53 e4       	ldi	r21, 0x43	; 67
    20b8:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
    20c2:	9e 8f       	std	Y+30, r25	; 0x1e
    20c4:	af 8f       	std	Y+31, r26	; 0x1f
    20c6:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    20c8:	11 e0       	ldi	r17, 0x01	; 1
    20ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20cc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d0:	98 a1       	ldd	r25, Y+32	; 0x20
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	0c f0       	brlt	.+2      	; 0x20e4 <LCDInit+0x288>
    20e2:	10 e0       	ldi	r17, 0x00	; 0
    20e4:	11 23       	and	r17, r17
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <LCDInit+0x296>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9a a3       	std	Y+34, r25	; 0x22
    20ee:	89 a3       	std	Y+33, r24	; 0x21
    20f0:	46 c0       	rjmp	.+140    	; 0x217e <LCDInit+0x322>
	else if (__tmp > 65535)
    20f2:	11 e0       	ldi	r17, 0x01	; 1
    20f4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20f6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20fa:	98 a1       	ldd	r25, Y+32	; 0x20
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	0c f0       	brlt	.+2      	; 0x210e <LCDInit+0x2b2>
    210c:	10 e0       	ldi	r17, 0x00	; 0
    210e:	11 23       	and	r17, r17
    2110:	61 f1       	breq	.+88     	; 0x216a <LCDInit+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2112:	69 8d       	ldd	r22, Y+25	; 0x19
    2114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9a a3       	std	Y+34, r25	; 0x22
    2138:	89 a3       	std	Y+33, r24	; 0x21
    213a:	12 c0       	rjmp	.+36     	; 0x2160 <LCDInit+0x304>
    213c:	89 e1       	ldi	r24, 0x19	; 25
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9c a3       	std	Y+36, r25	; 0x24
    2142:	8b a3       	std	Y+35, r24	; 0x23
    2144:	8b a1       	ldd	r24, Y+35	; 0x23
    2146:	9c a1       	ldd	r25, Y+36	; 0x24
    2148:	8c 01       	movw	r16, r24
    214a:	c8 01       	movw	r24, r16
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCDInit+0x2f0>
    2150:	8c 01       	movw	r16, r24
    2152:	1c a3       	std	Y+36, r17	; 0x24
    2154:	0b a3       	std	Y+35, r16	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	89 a1       	ldd	r24, Y+33	; 0x21
    2158:	9a a1       	ldd	r25, Y+34	; 0x22
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9a a3       	std	Y+34, r25	; 0x22
    215e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	89 a1       	ldd	r24, Y+33	; 0x21
    2162:	9a a1       	ldd	r25, Y+34	; 0x22
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	51 f7       	brne	.-44     	; 0x213c <LCDInit+0x2e0>
    2168:	28 c0       	rjmp	.+80     	; 0x21ba <LCDInit+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    216c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    216e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2170:	98 a1       	ldd	r25, Y+32	; 0x20
    2172:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9a a3       	std	Y+34, r25	; 0x22
    217c:	89 a3       	std	Y+33, r24	; 0x21
    217e:	89 a1       	ldd	r24, Y+33	; 0x21
    2180:	9a a1       	ldd	r25, Y+34	; 0x22
    2182:	9e a3       	std	Y+38, r25	; 0x26
    2184:	8d a3       	std	Y+37, r24	; 0x25
    2186:	8d a1       	ldd	r24, Y+37	; 0x25
    2188:	9e a1       	ldd	r25, Y+38	; 0x26
    218a:	8c 01       	movw	r16, r24
    218c:	f8 01       	movw	r30, r16
    218e:	31 97       	sbiw	r30, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCDInit+0x332>
    2192:	8f 01       	movw	r16, r30
    2194:	1e a3       	std	Y+38, r17	; 0x26
    2196:	0d a3       	std	Y+37, r16	; 0x25
    2198:	10 c0       	rjmp	.+32     	; 0x21ba <LCDInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    219a:	6c 89       	ldd	r22, Y+20	; 0x14
    219c:	7d 89       	ldd	r23, Y+21	; 0x15
    219e:	8e 89       	ldd	r24, Y+22	; 0x16
    21a0:	9f 89       	ldd	r25, Y+23	; 0x17
    21a2:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	88 8f       	std	Y+24, r24	; 0x18
    21ac:	88 8d       	ldd	r24, Y+24	; 0x18
    21ae:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21b0:	8f a1       	ldd	r24, Y+39	; 0x27
    21b2:	18 2f       	mov	r17, r24
    21b4:	1a 95       	dec	r17
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCDInit+0x358>
    21b8:	1f a3       	std	Y+39, r17	; 0x27

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    21ba:	88 e3       	ldi	r24, 0x38	; 56
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	28 e3       	ldi	r18, 0x38	; 56
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	f9 01       	movw	r30, r18
    21c4:	20 81       	ld	r18, Z
    21c6:	20 61       	ori	r18, 0x10	; 16
    21c8:	fc 01       	movw	r30, r24
    21ca:	20 83       	st	Z, r18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    21cc:	88 e3       	ldi	r24, 0x38	; 56
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	28 e3       	ldi	r18, 0x38	; 56
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	f9 01       	movw	r30, r18
    21d6:	20 81       	ld	r18, Z
    21d8:	22 60       	ori	r18, 0x02	; 2
    21da:	fc 01       	movw	r30, r24
    21dc:	20 83       	st	Z, r18
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e8       	ldi	r26, 0x80	; 128
    21e4:	bf e3       	ldi	r27, 0x3F	; 63
    21e6:	88 a7       	std	Y+40, r24	; 0x28
    21e8:	99 a7       	std	Y+41, r25	; 0x29
    21ea:	aa a7       	std	Y+42, r26	; 0x2a
    21ec:	bb a7       	std	Y+43, r27	; 0x2b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    21ee:	68 a5       	ldd	r22, Y+40	; 0x28
    21f0:	79 a5       	ldd	r23, Y+41	; 0x29
    21f2:	8a a5       	ldd	r24, Y+42	; 0x2a
    21f4:	9b a5       	ldd	r25, Y+43	; 0x2b
    21f6:	2b ea       	ldi	r18, 0xAB	; 171
    21f8:	3a ea       	ldi	r19, 0xAA	; 170
    21fa:	4a ea       	ldi	r20, 0xAA	; 170
    21fc:	5e e3       	ldi	r21, 0x3E	; 62
    21fe:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8c a7       	std	Y+44, r24	; 0x2c
    2208:	9d a7       	std	Y+45, r25	; 0x2d
    220a:	ae a7       	std	Y+46, r26	; 0x2e
    220c:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    220e:	11 e0       	ldi	r17, 0x01	; 1
    2210:	6c a5       	ldd	r22, Y+44	; 0x2c
    2212:	7d a5       	ldd	r23, Y+45	; 0x2d
    2214:	8e a5       	ldd	r24, Y+46	; 0x2e
    2216:	9f a5       	ldd	r25, Y+47	; 0x2f
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	0c f0       	brlt	.+2      	; 0x222a <LCDInit+0x3ce>
    2228:	10 e0       	ldi	r17, 0x00	; 0
    222a:	11 23       	and	r17, r17
    222c:	19 f0       	breq	.+6      	; 0x2234 <LCDInit+0x3d8>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	88 ab       	std	Y+48, r24	; 0x30
    2232:	a3 c0       	rjmp	.+326    	; 0x237a <LCDInit+0x51e>
	else if (__tmp > 255)
    2234:	11 e0       	ldi	r17, 0x01	; 1
    2236:	6c a5       	ldd	r22, Y+44	; 0x2c
    2238:	7d a5       	ldd	r23, Y+45	; 0x2d
    223a:	8e a5       	ldd	r24, Y+46	; 0x2e
    223c:	9f a5       	ldd	r25, Y+47	; 0x2f
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	53 e4       	ldi	r21, 0x43	; 67
    2246:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    224a:	18 16       	cp	r1, r24
    224c:	0c f0       	brlt	.+2      	; 0x2250 <LCDInit+0x3f4>
    224e:	10 e0       	ldi	r17, 0x00	; 0
    2250:	11 23       	and	r17, r17
    2252:	09 f4       	brne	.+2      	; 0x2256 <LCDInit+0x3fa>
    2254:	89 c0       	rjmp	.+274    	; 0x2368 <LCDInit+0x50c>
	{
		_delay_ms(__us / 1000.0);
    2256:	68 a5       	ldd	r22, Y+40	; 0x28
    2258:	79 a5       	ldd	r23, Y+41	; 0x29
    225a:	8a a5       	ldd	r24, Y+42	; 0x2a
    225c:	9b a5       	ldd	r25, Y+43	; 0x2b
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a e7       	ldi	r20, 0x7A	; 122
    2264:	54 e4       	ldi	r21, 0x44	; 68
    2266:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	89 ab       	std	Y+49, r24	; 0x31
    2270:	9a ab       	std	Y+50, r25	; 0x32
    2272:	ab ab       	std	Y+51, r26	; 0x33
    2274:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2276:	69 a9       	ldd	r22, Y+49	; 0x31
    2278:	7a a9       	ldd	r23, Y+50	; 0x32
    227a:	8b a9       	ldd	r24, Y+51	; 0x33
    227c:	9c a9       	ldd	r25, Y+52	; 0x34
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8d ab       	std	Y+53, r24	; 0x35
    2290:	9e ab       	std	Y+54, r25	; 0x36
    2292:	af ab       	std	Y+55, r26	; 0x37
    2294:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    2296:	11 e0       	ldi	r17, 0x01	; 1
    2298:	6d a9       	ldd	r22, Y+53	; 0x35
    229a:	7e a9       	ldd	r23, Y+54	; 0x36
    229c:	8f a9       	ldd	r24, Y+55	; 0x37
    229e:	98 ad       	ldd	r25, Y+56	; 0x38
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	0c f0       	brlt	.+2      	; 0x22b2 <LCDInit+0x456>
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	11 23       	and	r17, r17
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <LCDInit+0x464>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9a af       	std	Y+58, r25	; 0x3a
    22bc:	89 af       	std	Y+57, r24	; 0x39
    22be:	46 c0       	rjmp	.+140    	; 0x234c <LCDInit+0x4f0>
	else if (__tmp > 65535)
    22c0:	11 e0       	ldi	r17, 0x01	; 1
    22c2:	6d a9       	ldd	r22, Y+53	; 0x35
    22c4:	7e a9       	ldd	r23, Y+54	; 0x36
    22c6:	8f a9       	ldd	r24, Y+55	; 0x37
    22c8:	98 ad       	ldd	r25, Y+56	; 0x38
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	0c f0       	brlt	.+2      	; 0x22dc <LCDInit+0x480>
    22da:	10 e0       	ldi	r17, 0x00	; 0
    22dc:	11 23       	and	r17, r17
    22de:	61 f1       	breq	.+88     	; 0x2338 <LCDInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	69 a9       	ldd	r22, Y+49	; 0x31
    22e2:	7a a9       	ldd	r23, Y+50	; 0x32
    22e4:	8b a9       	ldd	r24, Y+51	; 0x33
    22e6:	9c a9       	ldd	r25, Y+52	; 0x34
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9a af       	std	Y+58, r25	; 0x3a
    2306:	89 af       	std	Y+57, r24	; 0x39
    2308:	12 c0       	rjmp	.+36     	; 0x232e <LCDInit+0x4d2>
    230a:	89 e1       	ldi	r24, 0x19	; 25
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c af       	std	Y+60, r25	; 0x3c
    2310:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2312:	8b ad       	ldd	r24, Y+59	; 0x3b
    2314:	9c ad       	ldd	r25, Y+60	; 0x3c
    2316:	8c 01       	movw	r16, r24
    2318:	c8 01       	movw	r24, r16
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCDInit+0x4be>
    231e:	8c 01       	movw	r16, r24
    2320:	1c af       	std	Y+60, r17	; 0x3c
    2322:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	89 ad       	ldd	r24, Y+57	; 0x39
    2326:	9a ad       	ldd	r25, Y+58	; 0x3a
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9a af       	std	Y+58, r25	; 0x3a
    232c:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	89 ad       	ldd	r24, Y+57	; 0x39
    2330:	9a ad       	ldd	r25, Y+58	; 0x3a
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	51 f7       	brne	.-44     	; 0x230a <LCDInit+0x4ae>
    2336:	28 c0       	rjmp	.+80     	; 0x2388 <LCDInit+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6d a9       	ldd	r22, Y+53	; 0x35
    233a:	7e a9       	ldd	r23, Y+54	; 0x36
    233c:	8f a9       	ldd	r24, Y+55	; 0x37
    233e:	98 ad       	ldd	r25, Y+56	; 0x38
    2340:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9a af       	std	Y+58, r25	; 0x3a
    234a:	89 af       	std	Y+57, r24	; 0x39
    234c:	89 ad       	ldd	r24, Y+57	; 0x39
    234e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2350:	9e af       	std	Y+62, r25	; 0x3e
    2352:	8d af       	std	Y+61, r24	; 0x3d
    2354:	8d ad       	ldd	r24, Y+61	; 0x3d
    2356:	9e ad       	ldd	r25, Y+62	; 0x3e
    2358:	8c 01       	movw	r16, r24
    235a:	f8 01       	movw	r30, r16
    235c:	31 97       	sbiw	r30, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCDInit+0x500>
    2360:	8f 01       	movw	r16, r30
    2362:	1e af       	std	Y+62, r17	; 0x3e
    2364:	0d af       	std	Y+61, r16	; 0x3d
    2366:	10 c0       	rjmp	.+32     	; 0x2388 <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2368:	6c a5       	ldd	r22, Y+44	; 0x2c
    236a:	7d a5       	ldd	r23, Y+45	; 0x2d
    236c:	8e a5       	ldd	r24, Y+46	; 0x2e
    236e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2370:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	88 ab       	std	Y+48, r24	; 0x30
    237a:	88 a9       	ldd	r24, Y+48	; 0x30
    237c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    237e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2380:	18 2f       	mov	r17, r24
    2382:	1a 95       	dec	r17
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCDInit+0x526>
    2386:	1f af       	std	Y+63, r17	; 0x3f
	_delay_us(1);
	CLEAR_E();
    2388:	88 e3       	ldi	r24, 0x38	; 56
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	28 e3       	ldi	r18, 0x38	; 56
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	f9 01       	movw	r30, r18
    2392:	20 81       	ld	r18, Z
    2394:	2f 7e       	andi	r18, 0xEF	; 239
    2396:	fc 01       	movw	r30, r24
    2398:	20 83       	st	Z, r18
    239a:	9e 01       	movw	r18, r28
    239c:	20 5c       	subi	r18, 0xC0	; 192
    239e:	3f 4f       	sbci	r19, 0xFF	; 255
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	f9 01       	movw	r30, r18
    23aa:	80 83       	st	Z, r24
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	a2 83       	std	Z+2, r26	; 0x02
    23b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    23b2:	8e 01       	movw	r16, r28
    23b4:	0c 5b       	subi	r16, 0xBC	; 188
    23b6:	1f 4f       	sbci	r17, 0xFF	; 255
    23b8:	ce 01       	movw	r24, r28
    23ba:	80 5c       	subi	r24, 0xC0	; 192
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	fc 01       	movw	r30, r24
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	2b ea       	ldi	r18, 0xAB	; 171
    23ca:	3a ea       	ldi	r19, 0xAA	; 170
    23cc:	4a ea       	ldi	r20, 0xAA	; 170
    23ce:	5e e3       	ldi	r21, 0x3E	; 62
    23d0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	f8 01       	movw	r30, r16
    23da:	80 83       	st	Z, r24
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	a2 83       	std	Z+2, r26	; 0x02
    23e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e2:	ce 01       	movw	r24, r28
    23e4:	8c 5b       	subi	r24, 0xBC	; 188
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	11 e0       	ldi	r17, 0x01	; 1
    23ea:	fc 01       	movw	r30, r24
    23ec:	60 81       	ld	r22, Z
    23ee:	71 81       	ldd	r23, Z+1	; 0x01
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	0c f0       	brlt	.+2      	; 0x2406 <LCDInit+0x5aa>
    2404:	10 e0       	ldi	r17, 0x00	; 0
    2406:	11 23       	and	r17, r17
    2408:	39 f0       	breq	.+14     	; 0x2418 <LCDInit+0x5bc>
		__ticks = 1;
    240a:	ce 01       	movw	r24, r28
    240c:	88 5b       	subi	r24, 0xB8	; 184
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	21 e0       	ldi	r18, 0x01	; 1
    2412:	fc 01       	movw	r30, r24
    2414:	20 83       	st	Z, r18
    2416:	05 c1       	rjmp	.+522    	; 0x2622 <LCDInit+0x7c6>
	else if (__tmp > 255)
    2418:	ce 01       	movw	r24, r28
    241a:	8c 5b       	subi	r24, 0xBC	; 188
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	11 e0       	ldi	r17, 0x01	; 1
    2420:	fc 01       	movw	r30, r24
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	53 e4       	ldi	r21, 0x43	; 67
    2432:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	0c f0       	brlt	.+2      	; 0x243c <LCDInit+0x5e0>
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	11 23       	and	r17, r17
    243e:	09 f4       	brne	.+2      	; 0x2442 <LCDInit+0x5e6>
    2440:	df c0       	rjmp	.+446    	; 0x2600 <LCDInit+0x7a4>
	{
		_delay_ms(__us / 1000.0);
    2442:	ce 01       	movw	r24, r28
    2444:	80 5c       	subi	r24, 0xC0	; 192
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	fc 01       	movw	r30, r24
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9e 01       	movw	r18, r28
    2464:	27 5b       	subi	r18, 0xB7	; 183
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	f9 01       	movw	r30, r18
    246a:	80 83       	st	Z, r24
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	a2 83       	std	Z+2, r26	; 0x02
    2470:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2472:	8e 01       	movw	r16, r28
    2474:	03 5b       	subi	r16, 0xB3	; 179
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	ce 01       	movw	r24, r28
    247a:	87 5b       	subi	r24, 0xB7	; 183
    247c:	9f 4f       	sbci	r25, 0xFF	; 255
    247e:	fc 01       	movw	r30, r24
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	53 e4       	ldi	r21, 0x43	; 67
    2490:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	80 83       	st	Z, r24
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	a2 83       	std	Z+2, r26	; 0x02
    24a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a2:	ce 01       	movw	r24, r28
    24a4:	83 5b       	subi	r24, 0xB3	; 179
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	11 e0       	ldi	r17, 0x01	; 1
    24aa:	fc 01       	movw	r30, r24
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 5f 18 	call	0x30be	; 0x30be <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <LCDInit+0x66a>
    24c4:	10 e0       	ldi	r17, 0x00	; 0
    24c6:	11 23       	and	r17, r17
    24c8:	49 f0       	breq	.+18     	; 0x24dc <LCDInit+0x680>
		__ticks = 1;
    24ca:	ce 01       	movw	r24, r28
    24cc:	8f 5a       	subi	r24, 0xAF	; 175
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	21 e0       	ldi	r18, 0x01	; 1
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	fc 01       	movw	r30, r24
    24d6:	31 83       	std	Z+1, r19	; 0x01
    24d8:	20 83       	st	Z, r18
    24da:	74 c0       	rjmp	.+232    	; 0x25c4 <LCDInit+0x768>
	else if (__tmp > 65535)
    24dc:	ce 01       	movw	r24, r28
    24de:	83 5b       	subi	r24, 0xB3	; 179
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	11 e0       	ldi	r17, 0x01	; 1
    24e4:	fc 01       	movw	r30, r24
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	0c f0       	brlt	.+2      	; 0x2500 <LCDInit+0x6a4>
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	11 23       	and	r17, r17
    2502:	09 f4       	brne	.+2      	; 0x2506 <LCDInit+0x6aa>
    2504:	4d c0       	rjmp	.+154    	; 0x25a0 <LCDInit+0x744>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	ce 01       	movw	r24, r28
    2508:	87 5b       	subi	r24, 0xB7	; 183
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	fc 01       	movw	r30, r24
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8e 01       	movw	r16, r28
    2528:	0f 5a       	subi	r16, 0xAF	; 175
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	27 c0       	rjmp	.+78     	; 0x258e <LCDInit+0x732>
    2540:	ce 01       	movw	r24, r28
    2542:	8d 5a       	subi	r24, 0xAD	; 173
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	29 e1       	ldi	r18, 0x19	; 25
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	fc 01       	movw	r30, r24
    254c:	31 83       	std	Z+1, r19	; 0x01
    254e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2550:	ce 01       	movw	r24, r28
    2552:	8d 5a       	subi	r24, 0xAD	; 173
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	fc 01       	movw	r30, r24
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	8c 01       	movw	r16, r24
    255e:	c8 01       	movw	r24, r16
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCDInit+0x704>
    2564:	8c 01       	movw	r16, r24
    2566:	ce 01       	movw	r24, r28
    2568:	8d 5a       	subi	r24, 0xAD	; 173
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	fc 01       	movw	r30, r24
    256e:	11 83       	std	Z+1, r17	; 0x01
    2570:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	ce 01       	movw	r24, r28
    2574:	8f 5a       	subi	r24, 0xAF	; 175
    2576:	9f 4f       	sbci	r25, 0xFF	; 255
    2578:	9e 01       	movw	r18, r28
    257a:	2f 5a       	subi	r18, 0xAF	; 175
    257c:	3f 4f       	sbci	r19, 0xFF	; 255
    257e:	f9 01       	movw	r30, r18
    2580:	20 81       	ld	r18, Z
    2582:	31 81       	ldd	r19, Z+1	; 0x01
    2584:	21 50       	subi	r18, 0x01	; 1
    2586:	30 40       	sbci	r19, 0x00	; 0
    2588:	fc 01       	movw	r30, r24
    258a:	31 83       	std	Z+1, r19	; 0x01
    258c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	ce 01       	movw	r24, r28
    2590:	8f 5a       	subi	r24, 0xAF	; 175
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	fc 01       	movw	r30, r24
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	89 f6       	brne	.-94     	; 0x2540 <LCDInit+0x6e4>
    259e:	58 c0       	rjmp	.+176    	; 0x2650 <LCDInit+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	8e 01       	movw	r16, r28
    25a2:	0f 5a       	subi	r16, 0xAF	; 175
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	ce 01       	movw	r24, r28
    25a8:	83 5b       	subi	r24, 0xB3	; 179
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	fc 01       	movw	r30, r24
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	ce 01       	movw	r24, r28
    25c6:	8b 5a       	subi	r24, 0xAB	; 171
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	9e 01       	movw	r18, r28
    25cc:	2f 5a       	subi	r18, 0xAF	; 175
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	f9 01       	movw	r30, r18
    25d2:	20 81       	ld	r18, Z
    25d4:	31 81       	ldd	r19, Z+1	; 0x01
    25d6:	fc 01       	movw	r30, r24
    25d8:	31 83       	std	Z+1, r19	; 0x01
    25da:	20 83       	st	Z, r18
    25dc:	ce 01       	movw	r24, r28
    25de:	8b 5a       	subi	r24, 0xAB	; 171
    25e0:	9f 4f       	sbci	r25, 0xFF	; 255
    25e2:	fc 01       	movw	r30, r24
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	8c 01       	movw	r16, r24
    25ea:	c8 01       	movw	r24, r16
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCDInit+0x790>
    25f0:	8c 01       	movw	r16, r24
    25f2:	ce 01       	movw	r24, r28
    25f4:	8b 5a       	subi	r24, 0xAB	; 171
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	fc 01       	movw	r30, r24
    25fa:	11 83       	std	Z+1, r17	; 0x01
    25fc:	00 83       	st	Z, r16
    25fe:	28 c0       	rjmp	.+80     	; 0x2650 <LCDInit+0x7f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2600:	8e 01       	movw	r16, r28
    2602:	08 5b       	subi	r16, 0xB8	; 184
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	ce 01       	movw	r24, r28
    2608:	8c 5b       	subi	r24, 0xBC	; 188
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	fc 01       	movw	r30, r24
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	ce 01       	movw	r24, r28
    2624:	89 5a       	subi	r24, 0xA9	; 169
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	9e 01       	movw	r18, r28
    262a:	28 5b       	subi	r18, 0xB8	; 184
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	f9 01       	movw	r30, r18
    2630:	20 81       	ld	r18, Z
    2632:	fc 01       	movw	r30, r24
    2634:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2636:	ce 01       	movw	r24, r28
    2638:	89 5a       	subi	r24, 0xA9	; 169
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	fc 01       	movw	r30, r24
    263e:	80 81       	ld	r24, Z
    2640:	18 2f       	mov	r17, r24
    2642:	1a 95       	dec	r17
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCDInit+0x7e6>
    2646:	ce 01       	movw	r24, r28
    2648:	89 5a       	subi	r24, 0xA9	; 169
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	fc 01       	movw	r30, r24
    264e:	10 83       	st	Z, r17
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    2650:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    2654:	ce 01       	movw	r24, r28
    2656:	88 5a       	subi	r24, 0xA8	; 168
    2658:	9f 4f       	sbci	r25, 0xFF	; 255
    265a:	fc 01       	movw	r30, r24
    265c:	80 81       	ld	r24, Z
    265e:	8c 60       	ori	r24, 0x0C	; 12
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    2666:	88 e2       	ldi	r24, 0x28	; 40
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    266e:	80 e4       	ldi	r24, 0x40	; 64
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    2676:	19 82       	std	Y+1, r1	; 0x01
    2678:	0d c0       	rjmp	.+26     	; 0x2694 <LCDInit+0x838>
		LCDData(__cgram[__i]);
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	80 5a       	subi	r24, 0xA0	; 160
    2682:	9f 4f       	sbci	r25, 0xFF	; 255
    2684:	fc 01       	movw	r30, r24
    2686:	80 81       	ld	r24, Z
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	80 34       	cpi	r24, 0x40	; 64
    2698:	80 f3       	brcs	.-32     	; 0x267a <LCDInit+0x81e>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	0e 94 36 14 	call	0x286c	; 0x286c <LCDGotoXY>

}
    26a2:	c8 5a       	subi	r28, 0xA8	; 168
    26a4:	df 4f       	sbci	r29, 0xFF	; 255
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	08 95       	ret

000026ba <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <LCDWriteString+0x6>
    26c0:	0f 92       	push	r0
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9b 83       	std	Y+3, r25	; 0x03
    26c8:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    26ca:	34 c0       	rjmp	.+104    	; 0x2734 <LCDWriteString+0x7a>
 {
 	//Custom Char Support
	if(*msg=='%')
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	9b 81       	ldd	r25, Y+3	; 0x03
    26d0:	fc 01       	movw	r30, r24
    26d2:	80 81       	ld	r24, Z
    26d4:	85 32       	cpi	r24, 0x25	; 37
    26d6:	11 f5       	brne	.+68     	; 0x271c <LCDWriteString+0x62>
	{
		msg++;
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	9b 83       	std	Y+3, r25	; 0x03
    26e0:	8a 83       	std	Y+2, r24	; 0x02
		int8_t cc=*msg-'0';
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	fc 01       	movw	r30, r24
    26e8:	80 81       	ld	r24, Z
    26ea:	80 53       	subi	r24, 0x30	; 48
    26ec:	89 83       	std	Y+1, r24	; 0x01

		if(cc>=0 && cc<=7)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	88 23       	and	r24, r24
    26f2:	44 f0       	brlt	.+16     	; 0x2704 <LCDWriteString+0x4a>
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	88 30       	cpi	r24, 0x08	; 8
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCDWriteString+0x4a>
		{
			LCDData(cc);
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
    2702:	13 c0       	rjmp	.+38     	; 0x272a <LCDWriteString+0x70>
		}
		else
		{
			LCDData('%');
    2704:	85 e2       	ldi	r24, 0x25	; 37
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
			LCDData(*msg);
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	fc 01       	movw	r30, r24
    2712:	80 81       	ld	r24, Z
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
    271a:	07 c0       	rjmp	.+14     	; 0x272a <LCDWriteString+0x70>
		}
	}
	else
	{
		LCDData(*msg);
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	80 81       	ld	r24, Z
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
	}
	msg++;
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	9b 81       	ldd	r25, Y+3	; 0x03
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	9b 83       	std	Y+3, r25	; 0x03
    2732:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	fc 01       	movw	r30, r24
    273a:	80 81       	ld	r24, Z
    273c:	88 23       	and	r24, r24
    273e:	31 f6       	brne	.-116    	; 0x26cc <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	2d 97       	sbiw	r28, 0x0d	; 13
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	9b 87       	std	Y+11, r25	; 0x0b
    2762:	8a 87       	std	Y+10, r24	; 0x0a
    2764:	7d 87       	std	Y+13, r23	; 0x0d
    2766:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    2768:	25 e0       	ldi	r18, 0x05	; 5
    276a:	ce 01       	movw	r24, r28
    276c:	05 96       	adiw	r24, 0x05	; 5
    276e:	fc 01       	movw	r30, r24
    2770:	32 2f       	mov	r19, r18
    2772:	11 92       	st	Z+, r1
    2774:	3a 95       	dec	r19
    2776:	e9 f7       	brne	.-6      	; 0x2772 <LCDWriteInt+0x26>
	int i=4,j=0;
    2778:	84 e0       	ldi	r24, 0x04	; 4
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9a 83       	std	Y+2, r25	; 0x02
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	1c 82       	std	Y+4, r1	; 0x04
    2782:	1b 82       	std	Y+3, r1	; 0x03
	while(val)
    2784:	20 c0       	rjmp	.+64     	; 0x27c6 <LCDWriteInt+0x7a>
	{
	str[i]=val%10;
    2786:	8a 85       	ldd	r24, Y+10	; 0x0a
    2788:	9b 85       	ldd	r25, Y+11	; 0x0b
    278a:	2a e0       	ldi	r18, 0x0A	; 10
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	b9 01       	movw	r22, r18
    2790:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
    2794:	48 2f       	mov	r20, r24
    2796:	9e 01       	movw	r18, r28
    2798:	2b 5f       	subi	r18, 0xFB	; 251
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	82 0f       	add	r24, r18
    27a2:	93 1f       	adc	r25, r19
    27a4:	fc 01       	movw	r30, r24
    27a6:	40 83       	st	Z, r20
	val=val/10;
    27a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ac:	2a e0       	ldi	r18, 0x0A	; 10
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	b9 01       	movw	r22, r18
    27b2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
    27b6:	9b 01       	movw	r18, r22
    27b8:	3b 87       	std	Y+11, r19	; 0x0b
    27ba:	2a 87       	std	Y+10, r18	; 0x0a
	i--;
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    27c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	e1 f6       	brne	.-72     	; 0x2786 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    27ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    27d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    27d2:	ff ef       	ldi	r31, 0xFF	; 255
    27d4:	8f 3f       	cpi	r24, 0xFF	; 255
    27d6:	9f 07       	cpc	r25, r31
    27d8:	91 f4       	brne	.+36     	; 0x27fe <LCDWriteInt+0xb2>
		while(str[j]==0) j++;
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <LCDWriteInt+0x9a>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	9c 83       	std	Y+4, r25	; 0x04
    27e4:	8b 83       	std	Y+3, r24	; 0x03
    27e6:	9e 01       	movw	r18, r28
    27e8:	2b 5f       	subi	r18, 0xFB	; 251
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	82 0f       	add	r24, r18
    27f2:	93 1f       	adc	r25, r19
    27f4:	fc 01       	movw	r30, r24
    27f6:	80 81       	ld	r24, Z
    27f8:	88 23       	and	r24, r24
    27fa:	81 f3       	breq	.-32     	; 0x27dc <LCDWriteInt+0x90>
    27fc:	0a c0       	rjmp	.+20     	; 0x2812 <LCDWriteInt+0xc6>
	else
		j=5-field_length;
    27fe:	25 e0       	ldi	r18, 0x05	; 5
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8c 85       	ldd	r24, Y+12	; 0x0c
    2804:	9d 85       	ldd	r25, Y+13	; 0x0d
    2806:	a9 01       	movw	r20, r18
    2808:	48 1b       	sub	r20, r24
    280a:	59 0b       	sbc	r21, r25
    280c:	ca 01       	movw	r24, r20
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03

	if(val<0) LCDData('-');
    2812:	8a 85       	ldd	r24, Y+10	; 0x0a
    2814:	9b 85       	ldd	r25, Y+11	; 0x0b
    2816:	99 23       	and	r25, r25
    2818:	24 f4       	brge	.+8      	; 0x2822 <LCDWriteInt+0xd6>
    281a:	8d e2       	ldi	r24, 0x2D	; 45
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
	for(i=j;i<5;i++)
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	12 c0       	rjmp	.+36     	; 0x2850 <LCDWriteInt+0x104>
	{
	LCDData(48+str[i]);
    282c:	9e 01       	movw	r18, r28
    282e:	2b 5f       	subi	r18, 0xFB	; 251
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	82 0f       	add	r24, r18
    2838:	93 1f       	adc	r25, r19
    283a:	fc 01       	movw	r30, r24
    283c:	80 81       	ld	r24, Z
    283e:	80 5d       	subi	r24, 0xD0	; 208
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	85 30       	cpi	r24, 0x05	; 5
    2856:	91 05       	cpc	r25, r1
    2858:	4c f3       	brlt	.-46     	; 0x282c <LCDWriteInt+0xe0>
	{
	LCDData(48+str[i]);
	}
}
    285a:	2d 96       	adiw	r28, 0x0d	; 13
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <LCDGotoXY+0x6>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	6a 83       	std	Y+2, r22	; 0x02
 	if(x>=20) return;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	84 31       	cpi	r24, 0x14	; 20
    287e:	28 f5       	brcc	.+74     	; 0x28ca <LCDGotoXY+0x5e>

	#ifdef LCD_TYPE_204
	
	switch(y)
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	91 05       	cpc	r25, r1
    288a:	51 f0       	breq	.+20     	; 0x28a0 <LCDGotoXY+0x34>
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	9c f0       	brlt	.+38     	; 0x28b8 <LCDGotoXY+0x4c>
    2892:	82 30       	cpi	r24, 0x02	; 2
    2894:	91 05       	cpc	r25, r1
    2896:	41 f0       	breq	.+16     	; 0x28a8 <LCDGotoXY+0x3c>
    2898:	83 30       	cpi	r24, 0x03	; 3
    289a:	91 05       	cpc	r25, r1
    289c:	49 f0       	breq	.+18     	; 0x28b0 <LCDGotoXY+0x44>
    289e:	0d c0       	rjmp	.+26     	; 0x28ba <LCDGotoXY+0x4e>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	80 64       	ori	r24, 0x40	; 64
    28a4:	89 83       	std	Y+1, r24	; 0x01
			break;
    28a6:	09 c0       	rjmp	.+18     	; 0x28ba <LCDGotoXY+0x4e>
		case 2:
			x+=0x14;
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	8c 5e       	subi	r24, 0xEC	; 236
    28ac:	89 83       	std	Y+1, r24	; 0x01
			break;
    28ae:	05 c0       	rjmp	.+10     	; 0x28ba <LCDGotoXY+0x4e>
		case 3:
			x+=0x54;
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	8c 5a       	subi	r24, 0xAC	; 172
    28b4:	89 83       	std	Y+1, r24	; 0x01
			break;
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <LCDGotoXY+0x4e>
	#ifdef LCD_TYPE_204
	
	switch(y)
	{
		case 0:
			break;
    28b8:	00 00       	nop
			break;
	}

	#endif

	x|=0b10000000;
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	80 68       	ori	r24, 0x80	; 128
    28be:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <LCDGotoXY+0x60>
	LCDData(48+str[i]);
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
    28ca:	00 00       	nop

	#endif

	x|=0b10000000;
  	LCDCmd(x);
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <main>:

#include <avr/io.h>
#include "lcd.h"

int main(void)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    //while(1)
    //{
        LCDInit(LS_BLINK|LS_ULINE);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <LCDInit>
		LCDClear();
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 41 00 	call	0x82	; 0x82 <LCDByte>
		LCDWriteStringXY(0,0,"Hello!");
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	0e 94 36 14 	call	0x286c	; 0x286c <LCDGotoXY>
    28f4:	80 ea       	ldi	r24, 0xA0	; 160
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCDWriteString>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    //}
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <__fixunssfsi>:
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	7b 01       	movw	r14, r22
    2910:	8c 01       	movw	r16, r24
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	5f e4       	ldi	r21, 0x4F	; 79
    291a:	0e 94 2f 18 	call	0x305e	; 0x305e <__gesf2>
    291e:	87 fd       	sbrc	r24, 7
    2920:	11 c0       	rjmp	.+34     	; 0x2944 <__fixunssfsi+0x3e>
    2922:	c8 01       	movw	r24, r16
    2924:	b7 01       	movw	r22, r14
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	5f e4       	ldi	r21, 0x4F	; 79
    292e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__subsf3>
    2932:	0e 94 8f 18 	call	0x311e	; 0x311e <__fixsfsi>
    2936:	9b 01       	movw	r18, r22
    2938:	ac 01       	movw	r20, r24
    293a:	20 50       	subi	r18, 0x00	; 0
    293c:	30 40       	sbci	r19, 0x00	; 0
    293e:	40 40       	sbci	r20, 0x00	; 0
    2940:	50 48       	sbci	r21, 0x80	; 128
    2942:	06 c0       	rjmp	.+12     	; 0x2950 <__fixunssfsi+0x4a>
    2944:	c8 01       	movw	r24, r16
    2946:	b7 01       	movw	r22, r14
    2948:	0e 94 8f 18 	call	0x311e	; 0x311e <__fixsfsi>
    294c:	9b 01       	movw	r18, r22
    294e:	ac 01       	movw	r20, r24
    2950:	b9 01       	movw	r22, r18
    2952:	ca 01       	movw	r24, r20
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	08 95       	ret

0000295e <_fpadd_parts>:
    295e:	a0 e0       	ldi	r26, 0x00	; 0
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e5 eb       	ldi	r30, 0xB5	; 181
    2964:	f4 e1       	ldi	r31, 0x14	; 20
    2966:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__prologue_saves__+0x8>
    296a:	fc 01       	movw	r30, r24
    296c:	ea 01       	movw	r28, r20
    296e:	80 81       	ld	r24, Z
    2970:	82 30       	cpi	r24, 0x02	; 2
    2972:	08 f4       	brcc	.+2      	; 0x2976 <_fpadd_parts+0x18>
    2974:	38 c1       	rjmp	.+624    	; 0x2be6 <_fpadd_parts+0x288>
    2976:	db 01       	movw	r26, r22
    2978:	9c 91       	ld	r25, X
    297a:	92 30       	cpi	r25, 0x02	; 2
    297c:	08 f4       	brcc	.+2      	; 0x2980 <_fpadd_parts+0x22>
    297e:	30 c1       	rjmp	.+608    	; 0x2be0 <_fpadd_parts+0x282>
    2980:	84 30       	cpi	r24, 0x04	; 4
    2982:	59 f4       	brne	.+22     	; 0x299a <_fpadd_parts+0x3c>
    2984:	94 30       	cpi	r25, 0x04	; 4
    2986:	09 f0       	breq	.+2      	; 0x298a <_fpadd_parts+0x2c>
    2988:	2e c1       	rjmp	.+604    	; 0x2be6 <_fpadd_parts+0x288>
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	11 96       	adiw	r26, 0x01	; 1
    298e:	8c 91       	ld	r24, X
    2990:	11 97       	sbiw	r26, 0x01	; 1
    2992:	98 17       	cp	r25, r24
    2994:	09 f0       	breq	.+2      	; 0x2998 <_fpadd_parts+0x3a>
    2996:	21 c1       	rjmp	.+578    	; 0x2bda <_fpadd_parts+0x27c>
    2998:	26 c1       	rjmp	.+588    	; 0x2be6 <_fpadd_parts+0x288>
    299a:	94 30       	cpi	r25, 0x04	; 4
    299c:	09 f4       	brne	.+2      	; 0x29a0 <_fpadd_parts+0x42>
    299e:	20 c1       	rjmp	.+576    	; 0x2be0 <_fpadd_parts+0x282>
    29a0:	92 30       	cpi	r25, 0x02	; 2
    29a2:	b1 f4       	brne	.+44     	; 0x29d0 <_fpadd_parts+0x72>
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	09 f0       	breq	.+2      	; 0x29aa <_fpadd_parts+0x4c>
    29a8:	1e c1       	rjmp	.+572    	; 0x2be6 <_fpadd_parts+0x288>
    29aa:	ca 01       	movw	r24, r20
    29ac:	af 01       	movw	r20, r30
    29ae:	28 e0       	ldi	r18, 0x08	; 8
    29b0:	da 01       	movw	r26, r20
    29b2:	0d 90       	ld	r0, X+
    29b4:	ad 01       	movw	r20, r26
    29b6:	dc 01       	movw	r26, r24
    29b8:	0d 92       	st	X+, r0
    29ba:	cd 01       	movw	r24, r26
    29bc:	21 50       	subi	r18, 0x01	; 1
    29be:	c1 f7       	brne	.-16     	; 0x29b0 <_fpadd_parts+0x52>
    29c0:	db 01       	movw	r26, r22
    29c2:	11 96       	adiw	r26, 0x01	; 1
    29c4:	8c 91       	ld	r24, X
    29c6:	11 97       	sbiw	r26, 0x01	; 1
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	89 23       	and	r24, r25
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	0a c1       	rjmp	.+532    	; 0x2be4 <_fpadd_parts+0x286>
    29d0:	82 30       	cpi	r24, 0x02	; 2
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <_fpadd_parts+0x78>
    29d4:	05 c1       	rjmp	.+522    	; 0x2be0 <_fpadd_parts+0x282>
    29d6:	c2 80       	ldd	r12, Z+2	; 0x02
    29d8:	d3 80       	ldd	r13, Z+3	; 0x03
    29da:	db 01       	movw	r26, r22
    29dc:	12 96       	adiw	r26, 0x02	; 2
    29de:	6d 90       	ld	r6, X+
    29e0:	7c 90       	ld	r7, X
    29e2:	13 97       	sbiw	r26, 0x03	; 3
    29e4:	24 81       	ldd	r18, Z+4	; 0x04
    29e6:	35 81       	ldd	r19, Z+5	; 0x05
    29e8:	46 81       	ldd	r20, Z+6	; 0x06
    29ea:	57 81       	ldd	r21, Z+7	; 0x07
    29ec:	14 96       	adiw	r26, 0x04	; 4
    29ee:	ed 90       	ld	r14, X+
    29f0:	fd 90       	ld	r15, X+
    29f2:	0d 91       	ld	r16, X+
    29f4:	1c 91       	ld	r17, X
    29f6:	17 97       	sbiw	r26, 0x07	; 7
    29f8:	c6 01       	movw	r24, r12
    29fa:	86 19       	sub	r24, r6
    29fc:	97 09       	sbc	r25, r7
    29fe:	5c 01       	movw	r10, r24
    2a00:	97 ff       	sbrs	r25, 7
    2a02:	04 c0       	rjmp	.+8      	; 0x2a0c <_fpadd_parts+0xae>
    2a04:	aa 24       	eor	r10, r10
    2a06:	bb 24       	eor	r11, r11
    2a08:	a8 1a       	sub	r10, r24
    2a0a:	b9 0a       	sbc	r11, r25
    2a0c:	b0 e2       	ldi	r27, 0x20	; 32
    2a0e:	ab 16       	cp	r10, r27
    2a10:	b1 04       	cpc	r11, r1
    2a12:	0c f0       	brlt	.+2      	; 0x2a16 <_fpadd_parts+0xb8>
    2a14:	61 c0       	rjmp	.+194    	; 0x2ad8 <_fpadd_parts+0x17a>
    2a16:	18 16       	cp	r1, r24
    2a18:	19 06       	cpc	r1, r25
    2a1a:	6c f5       	brge	.+90     	; 0x2a76 <_fpadd_parts+0x118>
    2a1c:	37 01       	movw	r6, r14
    2a1e:	48 01       	movw	r8, r16
    2a20:	0a 2c       	mov	r0, r10
    2a22:	04 c0       	rjmp	.+8      	; 0x2a2c <_fpadd_parts+0xce>
    2a24:	96 94       	lsr	r9
    2a26:	87 94       	ror	r8
    2a28:	77 94       	ror	r7
    2a2a:	67 94       	ror	r6
    2a2c:	0a 94       	dec	r0
    2a2e:	d2 f7       	brpl	.-12     	; 0x2a24 <_fpadd_parts+0xc6>
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e0       	ldi	r26, 0x00	; 0
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	0a 2c       	mov	r0, r10
    2a3a:	04 c0       	rjmp	.+8      	; 0x2a44 <_fpadd_parts+0xe6>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	aa 1f       	adc	r26, r26
    2a42:	bb 1f       	adc	r27, r27
    2a44:	0a 94       	dec	r0
    2a46:	d2 f7       	brpl	.-12     	; 0x2a3c <_fpadd_parts+0xde>
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	a1 09       	sbc	r26, r1
    2a4c:	b1 09       	sbc	r27, r1
    2a4e:	8e 21       	and	r24, r14
    2a50:	9f 21       	and	r25, r15
    2a52:	a0 23       	and	r26, r16
    2a54:	b1 23       	and	r27, r17
    2a56:	ee 24       	eor	r14, r14
    2a58:	ff 24       	eor	r15, r15
    2a5a:	87 01       	movw	r16, r14
    2a5c:	e3 94       	inc	r14
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	a1 05       	cpc	r26, r1
    2a62:	b1 05       	cpc	r27, r1
    2a64:	19 f4       	brne	.+6      	; 0x2a6c <_fpadd_parts+0x10e>
    2a66:	ee 24       	eor	r14, r14
    2a68:	ff 24       	eor	r15, r15
    2a6a:	87 01       	movw	r16, r14
    2a6c:	e6 28       	or	r14, r6
    2a6e:	f7 28       	or	r15, r7
    2a70:	08 29       	or	r16, r8
    2a72:	19 29       	or	r17, r9
    2a74:	3c c0       	rjmp	.+120    	; 0x2aee <_fpadd_parts+0x190>
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	d1 f1       	breq	.+116    	; 0x2aee <_fpadd_parts+0x190>
    2a7a:	ca 0c       	add	r12, r10
    2a7c:	db 1c       	adc	r13, r11
    2a7e:	39 01       	movw	r6, r18
    2a80:	4a 01       	movw	r8, r20
    2a82:	0a 2c       	mov	r0, r10
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <_fpadd_parts+0x130>
    2a86:	96 94       	lsr	r9
    2a88:	87 94       	ror	r8
    2a8a:	77 94       	ror	r7
    2a8c:	67 94       	ror	r6
    2a8e:	0a 94       	dec	r0
    2a90:	d2 f7       	brpl	.-12     	; 0x2a86 <_fpadd_parts+0x128>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e0       	ldi	r26, 0x00	; 0
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	0a 2c       	mov	r0, r10
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <_fpadd_parts+0x148>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	0a 94       	dec	r0
    2aa8:	d2 f7       	brpl	.-12     	; 0x2a9e <_fpadd_parts+0x140>
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	a1 09       	sbc	r26, r1
    2aae:	b1 09       	sbc	r27, r1
    2ab0:	82 23       	and	r24, r18
    2ab2:	93 23       	and	r25, r19
    2ab4:	a4 23       	and	r26, r20
    2ab6:	b5 23       	and	r27, r21
    2ab8:	21 e0       	ldi	r18, 0x01	; 1
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	a1 05       	cpc	r26, r1
    2ac4:	b1 05       	cpc	r27, r1
    2ac6:	19 f4       	brne	.+6      	; 0x2ace <_fpadd_parts+0x170>
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	a9 01       	movw	r20, r18
    2ace:	26 29       	or	r18, r6
    2ad0:	37 29       	or	r19, r7
    2ad2:	48 29       	or	r20, r8
    2ad4:	59 29       	or	r21, r9
    2ad6:	0b c0       	rjmp	.+22     	; 0x2aee <_fpadd_parts+0x190>
    2ad8:	6c 14       	cp	r6, r12
    2ada:	7d 04       	cpc	r7, r13
    2adc:	24 f4       	brge	.+8      	; 0x2ae6 <_fpadd_parts+0x188>
    2ade:	ee 24       	eor	r14, r14
    2ae0:	ff 24       	eor	r15, r15
    2ae2:	87 01       	movw	r16, r14
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <_fpadd_parts+0x190>
    2ae6:	63 01       	movw	r12, r6
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	a9 01       	movw	r20, r18
    2aee:	81 81       	ldd	r24, Z+1	; 0x01
    2af0:	fb 01       	movw	r30, r22
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	89 17       	cp	r24, r25
    2af6:	09 f4       	brne	.+2      	; 0x2afa <_fpadd_parts+0x19c>
    2af8:	45 c0       	rjmp	.+138    	; 0x2b84 <_fpadd_parts+0x226>
    2afa:	88 23       	and	r24, r24
    2afc:	49 f0       	breq	.+18     	; 0x2b10 <_fpadd_parts+0x1b2>
    2afe:	d8 01       	movw	r26, r16
    2b00:	c7 01       	movw	r24, r14
    2b02:	82 1b       	sub	r24, r18
    2b04:	93 0b       	sbc	r25, r19
    2b06:	a4 0b       	sbc	r26, r20
    2b08:	b5 0b       	sbc	r27, r21
    2b0a:	9c 01       	movw	r18, r24
    2b0c:	ad 01       	movw	r20, r26
    2b0e:	04 c0       	rjmp	.+8      	; 0x2b18 <_fpadd_parts+0x1ba>
    2b10:	2e 19       	sub	r18, r14
    2b12:	3f 09       	sbc	r19, r15
    2b14:	40 0b       	sbc	r20, r16
    2b16:	51 0b       	sbc	r21, r17
    2b18:	57 fd       	sbrc	r21, 7
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <_fpadd_parts+0x1c6>
    2b1c:	19 82       	std	Y+1, r1	; 0x01
    2b1e:	db 82       	std	Y+3, r13	; 0x03
    2b20:	ca 82       	std	Y+2, r12	; 0x02
    2b22:	0b c0       	rjmp	.+22     	; 0x2b3a <_fpadd_parts+0x1dc>
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	db 82       	std	Y+3, r13	; 0x03
    2b2a:	ca 82       	std	Y+2, r12	; 0x02
    2b2c:	50 95       	com	r21
    2b2e:	40 95       	com	r20
    2b30:	30 95       	com	r19
    2b32:	21 95       	neg	r18
    2b34:	3f 4f       	sbci	r19, 0xFF	; 255
    2b36:	4f 4f       	sbci	r20, 0xFF	; 255
    2b38:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3a:	2c 83       	std	Y+4, r18	; 0x04
    2b3c:	3d 83       	std	Y+5, r19	; 0x05
    2b3e:	4e 83       	std	Y+6, r20	; 0x06
    2b40:	5f 83       	std	Y+7, r21	; 0x07
    2b42:	0d c0       	rjmp	.+26     	; 0x2b5e <_fpadd_parts+0x200>
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	aa 1f       	adc	r26, r26
    2b4a:	bb 1f       	adc	r27, r27
    2b4c:	8c 83       	std	Y+4, r24	; 0x04
    2b4e:	9d 83       	std	Y+5, r25	; 0x05
    2b50:	ae 83       	std	Y+6, r26	; 0x06
    2b52:	bf 83       	std	Y+7, r27	; 0x07
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	9b 81       	ldd	r25, Y+3	; 0x03
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9b 83       	std	Y+3, r25	; 0x03
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
    2b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b60:	9d 81       	ldd	r25, Y+5	; 0x05
    2b62:	ae 81       	ldd	r26, Y+6	; 0x06
    2b64:	bf 81       	ldd	r27, Y+7	; 0x07
    2b66:	9c 01       	movw	r18, r24
    2b68:	ad 01       	movw	r20, r26
    2b6a:	21 50       	subi	r18, 0x01	; 1
    2b6c:	30 40       	sbci	r19, 0x00	; 0
    2b6e:	40 40       	sbci	r20, 0x00	; 0
    2b70:	50 40       	sbci	r21, 0x00	; 0
    2b72:	2f 3f       	cpi	r18, 0xFF	; 255
    2b74:	ef ef       	ldi	r30, 0xFF	; 255
    2b76:	3e 07       	cpc	r19, r30
    2b78:	ef ef       	ldi	r30, 0xFF	; 255
    2b7a:	4e 07       	cpc	r20, r30
    2b7c:	ef e3       	ldi	r30, 0x3F	; 63
    2b7e:	5e 07       	cpc	r21, r30
    2b80:	08 f3       	brcs	.-62     	; 0x2b44 <_fpadd_parts+0x1e6>
    2b82:	0b c0       	rjmp	.+22     	; 0x2b9a <_fpadd_parts+0x23c>
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	db 82       	std	Y+3, r13	; 0x03
    2b88:	ca 82       	std	Y+2, r12	; 0x02
    2b8a:	2e 0d       	add	r18, r14
    2b8c:	3f 1d       	adc	r19, r15
    2b8e:	40 1f       	adc	r20, r16
    2b90:	51 1f       	adc	r21, r17
    2b92:	2c 83       	std	Y+4, r18	; 0x04
    2b94:	3d 83       	std	Y+5, r19	; 0x05
    2b96:	4e 83       	std	Y+6, r20	; 0x06
    2b98:	5f 83       	std	Y+7, r21	; 0x07
    2b9a:	83 e0       	ldi	r24, 0x03	; 3
    2b9c:	88 83       	st	Y, r24
    2b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba2:	4e 81       	ldd	r20, Y+6	; 0x06
    2ba4:	5f 81       	ldd	r21, Y+7	; 0x07
    2ba6:	57 ff       	sbrs	r21, 7
    2ba8:	1d c0       	rjmp	.+58     	; 0x2be4 <_fpadd_parts+0x286>
    2baa:	da 01       	movw	r26, r20
    2bac:	c9 01       	movw	r24, r18
    2bae:	81 70       	andi	r24, 0x01	; 1
    2bb0:	90 70       	andi	r25, 0x00	; 0
    2bb2:	a0 70       	andi	r26, 0x00	; 0
    2bb4:	b0 70       	andi	r27, 0x00	; 0
    2bb6:	56 95       	lsr	r21
    2bb8:	47 95       	ror	r20
    2bba:	37 95       	ror	r19
    2bbc:	27 95       	ror	r18
    2bbe:	82 2b       	or	r24, r18
    2bc0:	93 2b       	or	r25, r19
    2bc2:	a4 2b       	or	r26, r20
    2bc4:	b5 2b       	or	r27, r21
    2bc6:	8c 83       	std	Y+4, r24	; 0x04
    2bc8:	9d 83       	std	Y+5, r25	; 0x05
    2bca:	ae 83       	std	Y+6, r26	; 0x06
    2bcc:	bf 83       	std	Y+7, r27	; 0x07
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	01 96       	adiw	r24, 0x01	; 1
    2bd4:	9b 83       	std	Y+3, r25	; 0x03
    2bd6:	8a 83       	std	Y+2, r24	; 0x02
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <_fpadd_parts+0x286>
    2bda:	e7 ea       	ldi	r30, 0xA7	; 167
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <_fpadd_parts+0x288>
    2be0:	fb 01       	movw	r30, r22
    2be2:	01 c0       	rjmp	.+2      	; 0x2be6 <_fpadd_parts+0x288>
    2be4:	fe 01       	movw	r30, r28
    2be6:	cf 01       	movw	r24, r30
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	ee e0       	ldi	r30, 0x0E	; 14
    2bee:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__epilogue_restores__+0x8>

00002bf2 <__addsf3>:
    2bf2:	a0 e2       	ldi	r26, 0x20	; 32
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	ef ef       	ldi	r30, 0xFF	; 255
    2bf8:	f5 e1       	ldi	r31, 0x15	; 21
    2bfa:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
    2bfe:	69 83       	std	Y+1, r22	; 0x01
    2c00:	7a 83       	std	Y+2, r23	; 0x02
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	2d 83       	std	Y+5, r18	; 0x05
    2c08:	3e 83       	std	Y+6, r19	; 0x06
    2c0a:	4f 83       	std	Y+7, r20	; 0x07
    2c0c:	58 87       	std	Y+8, r21	; 0x08
    2c0e:	89 e0       	ldi	r24, 0x09	; 9
    2c10:	e8 2e       	mov	r14, r24
    2c12:	f1 2c       	mov	r15, r1
    2c14:	ec 0e       	add	r14, r28
    2c16:	fd 1e       	adc	r15, r29
    2c18:	ce 01       	movw	r24, r28
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	b7 01       	movw	r22, r14
    2c1e:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2c22:	8e 01       	movw	r16, r28
    2c24:	0f 5e       	subi	r16, 0xEF	; 239
    2c26:	1f 4f       	sbci	r17, 0xFF	; 255
    2c28:	ce 01       	movw	r24, r28
    2c2a:	05 96       	adiw	r24, 0x05	; 5
    2c2c:	b8 01       	movw	r22, r16
    2c2e:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2c32:	c7 01       	movw	r24, r14
    2c34:	b8 01       	movw	r22, r16
    2c36:	ae 01       	movw	r20, r28
    2c38:	47 5e       	subi	r20, 0xE7	; 231
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3c:	0e 94 af 14 	call	0x295e	; 0x295e <_fpadd_parts>
    2c40:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__pack_f>
    2c44:	a0 96       	adiw	r28, 0x20	; 32
    2c46:	e6 e0       	ldi	r30, 0x06	; 6
    2c48:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

00002c4c <__subsf3>:
    2c4c:	a0 e2       	ldi	r26, 0x20	; 32
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	ec e2       	ldi	r30, 0x2C	; 44
    2c52:	f6 e1       	ldi	r31, 0x16	; 22
    2c54:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
    2c58:	69 83       	std	Y+1, r22	; 0x01
    2c5a:	7a 83       	std	Y+2, r23	; 0x02
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	2d 83       	std	Y+5, r18	; 0x05
    2c62:	3e 83       	std	Y+6, r19	; 0x06
    2c64:	4f 83       	std	Y+7, r20	; 0x07
    2c66:	58 87       	std	Y+8, r21	; 0x08
    2c68:	8e 01       	movw	r16, r28
    2c6a:	07 5f       	subi	r16, 0xF7	; 247
    2c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6e:	ce 01       	movw	r24, r28
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	b8 01       	movw	r22, r16
    2c74:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2c78:	91 e1       	ldi	r25, 0x11	; 17
    2c7a:	e9 2e       	mov	r14, r25
    2c7c:	f1 2c       	mov	r15, r1
    2c7e:	ec 0e       	add	r14, r28
    2c80:	fd 1e       	adc	r15, r29
    2c82:	ce 01       	movw	r24, r28
    2c84:	05 96       	adiw	r24, 0x05	; 5
    2c86:	b7 01       	movw	r22, r14
    2c88:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2c8c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	89 27       	eor	r24, r25
    2c92:	8a 8b       	std	Y+18, r24	; 0x12
    2c94:	c8 01       	movw	r24, r16
    2c96:	b7 01       	movw	r22, r14
    2c98:	ae 01       	movw	r20, r28
    2c9a:	47 5e       	subi	r20, 0xE7	; 231
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	0e 94 af 14 	call	0x295e	; 0x295e <_fpadd_parts>
    2ca2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__pack_f>
    2ca6:	a0 96       	adiw	r28, 0x20	; 32
    2ca8:	e6 e0       	ldi	r30, 0x06	; 6
    2caa:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

00002cae <__mulsf3>:
    2cae:	a0 e2       	ldi	r26, 0x20	; 32
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	ed e5       	ldi	r30, 0x5D	; 93
    2cb4:	f6 e1       	ldi	r31, 0x16	; 22
    2cb6:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <__prologue_saves__>
    2cba:	69 83       	std	Y+1, r22	; 0x01
    2cbc:	7a 83       	std	Y+2, r23	; 0x02
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	2d 83       	std	Y+5, r18	; 0x05
    2cc4:	3e 83       	std	Y+6, r19	; 0x06
    2cc6:	4f 83       	std	Y+7, r20	; 0x07
    2cc8:	58 87       	std	Y+8, r21	; 0x08
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	be 01       	movw	r22, r28
    2cd0:	67 5f       	subi	r22, 0xF7	; 247
    2cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd4:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2cd8:	ce 01       	movw	r24, r28
    2cda:	05 96       	adiw	r24, 0x05	; 5
    2cdc:	be 01       	movw	r22, r28
    2cde:	6f 5e       	subi	r22, 0xEF	; 239
    2ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce2:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2ce6:	99 85       	ldd	r25, Y+9	; 0x09
    2ce8:	92 30       	cpi	r25, 0x02	; 2
    2cea:	78 f0       	brcs	.+30     	; 0x2d0a <__mulsf3+0x5c>
    2cec:	89 89       	ldd	r24, Y+17	; 0x11
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	c0 f0       	brcs	.+48     	; 0x2d22 <__mulsf3+0x74>
    2cf2:	94 30       	cpi	r25, 0x04	; 4
    2cf4:	19 f4       	brne	.+6      	; 0x2cfc <__mulsf3+0x4e>
    2cf6:	82 30       	cpi	r24, 0x02	; 2
    2cf8:	41 f4       	brne	.+16     	; 0x2d0a <__mulsf3+0x5c>
    2cfa:	cb c0       	rjmp	.+406    	; 0x2e92 <__mulsf3+0x1e4>
    2cfc:	84 30       	cpi	r24, 0x04	; 4
    2cfe:	19 f4       	brne	.+6      	; 0x2d06 <__mulsf3+0x58>
    2d00:	92 30       	cpi	r25, 0x02	; 2
    2d02:	79 f4       	brne	.+30     	; 0x2d22 <__mulsf3+0x74>
    2d04:	c6 c0       	rjmp	.+396    	; 0x2e92 <__mulsf3+0x1e4>
    2d06:	92 30       	cpi	r25, 0x02	; 2
    2d08:	51 f4       	brne	.+20     	; 0x2d1e <__mulsf3+0x70>
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d10:	29 17       	cp	r18, r25
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <__mulsf3+0x68>
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	8a 87       	std	Y+10, r24	; 0x0a
    2d18:	ce 01       	movw	r24, r28
    2d1a:	09 96       	adiw	r24, 0x09	; 9
    2d1c:	bc c0       	rjmp	.+376    	; 0x2e96 <__mulsf3+0x1e8>
    2d1e:	82 30       	cpi	r24, 0x02	; 2
    2d20:	51 f4       	brne	.+20     	; 0x2d36 <__mulsf3+0x88>
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d26:	9a 89       	ldd	r25, Y+18	; 0x12
    2d28:	29 17       	cp	r18, r25
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <__mulsf3+0x80>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	8a 8b       	std	Y+18, r24	; 0x12
    2d30:	ce 01       	movw	r24, r28
    2d32:	41 96       	adiw	r24, 0x11	; 17
    2d34:	b0 c0       	rjmp	.+352    	; 0x2e96 <__mulsf3+0x1e8>
    2d36:	6d 84       	ldd	r6, Y+13	; 0x0d
    2d38:	7e 84       	ldd	r7, Y+14	; 0x0e
    2d3a:	8f 84       	ldd	r8, Y+15	; 0x0f
    2d3c:	98 88       	ldd	r9, Y+16	; 0x10
    2d3e:	ed 88       	ldd	r14, Y+21	; 0x15
    2d40:	fe 88       	ldd	r15, Y+22	; 0x16
    2d42:	0f 89       	ldd	r16, Y+23	; 0x17
    2d44:	18 8d       	ldd	r17, Y+24	; 0x18
    2d46:	e0 e2       	ldi	r30, 0x20	; 32
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	dc 01       	movw	r26, r24
    2d50:	aa 24       	eor	r10, r10
    2d52:	bb 24       	eor	r11, r11
    2d54:	65 01       	movw	r12, r10
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	a9 01       	movw	r20, r18
    2d5c:	b3 01       	movw	r22, r6
    2d5e:	61 70       	andi	r22, 0x01	; 1
    2d60:	70 70       	andi	r23, 0x00	; 0
    2d62:	61 15       	cp	r22, r1
    2d64:	71 05       	cpc	r23, r1
    2d66:	d1 f0       	breq	.+52     	; 0x2d9c <__mulsf3+0xee>
    2d68:	2e 0d       	add	r18, r14
    2d6a:	3f 1d       	adc	r19, r15
    2d6c:	40 1f       	adc	r20, r16
    2d6e:	51 1f       	adc	r21, r17
    2d70:	15 01       	movw	r2, r10
    2d72:	26 01       	movw	r4, r12
    2d74:	28 0e       	add	r2, r24
    2d76:	39 1e       	adc	r3, r25
    2d78:	4a 1e       	adc	r4, r26
    2d7a:	5b 1e       	adc	r5, r27
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	2e 15       	cp	r18, r14
    2d86:	3f 05       	cpc	r19, r15
    2d88:	40 07       	cpc	r20, r16
    2d8a:	51 07       	cpc	r21, r17
    2d8c:	18 f0       	brcs	.+6      	; 0x2d94 <__mulsf3+0xe6>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	dc 01       	movw	r26, r24
    2d94:	82 0d       	add	r24, r2
    2d96:	93 1d       	adc	r25, r3
    2d98:	a4 1d       	adc	r26, r4
    2d9a:	b5 1d       	adc	r27, r5
    2d9c:	aa 0c       	add	r10, r10
    2d9e:	bb 1c       	adc	r11, r11
    2da0:	cc 1c       	adc	r12, r12
    2da2:	dd 1c       	adc	r13, r13
    2da4:	17 ff       	sbrs	r17, 7
    2da6:	09 c0       	rjmp	.+18     	; 0x2dba <__mulsf3+0x10c>
    2da8:	61 e0       	ldi	r22, 0x01	; 1
    2daa:	26 2e       	mov	r2, r22
    2dac:	31 2c       	mov	r3, r1
    2dae:	41 2c       	mov	r4, r1
    2db0:	51 2c       	mov	r5, r1
    2db2:	a2 28       	or	r10, r2
    2db4:	b3 28       	or	r11, r3
    2db6:	c4 28       	or	r12, r4
    2db8:	d5 28       	or	r13, r5
    2dba:	31 97       	sbiw	r30, 0x01	; 1
    2dbc:	49 f0       	breq	.+18     	; 0x2dd0 <__mulsf3+0x122>
    2dbe:	ee 0c       	add	r14, r14
    2dc0:	ff 1c       	adc	r15, r15
    2dc2:	00 1f       	adc	r16, r16
    2dc4:	11 1f       	adc	r17, r17
    2dc6:	96 94       	lsr	r9
    2dc8:	87 94       	ror	r8
    2dca:	77 94       	ror	r7
    2dcc:	67 94       	ror	r6
    2dce:	c6 cf       	rjmp	.-116    	; 0x2d5c <__mulsf3+0xae>
    2dd0:	6b 89       	ldd	r22, Y+19	; 0x13
    2dd2:	7c 89       	ldd	r23, Y+20	; 0x14
    2dd4:	eb 85       	ldd	r30, Y+11	; 0x0b
    2dd6:	fc 85       	ldd	r31, Y+12	; 0x0c
    2dd8:	6e 0f       	add	r22, r30
    2dda:	7f 1f       	adc	r23, r31
    2ddc:	6e 5f       	subi	r22, 0xFE	; 254
    2dde:	7f 4f       	sbci	r23, 0xFF	; 255
    2de0:	7c 8f       	std	Y+28, r23	; 0x1c
    2de2:	6b 8f       	std	Y+27, r22	; 0x1b
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	ea 85       	ldd	r30, Y+10	; 0x0a
    2de8:	7a 89       	ldd	r23, Y+18	; 0x12
    2dea:	e7 17       	cp	r30, r23
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <__mulsf3+0x142>
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	6a 8f       	std	Y+26, r22	; 0x1a
    2df2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2df4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2df6:	10 c0       	rjmp	.+32     	; 0x2e18 <__mulsf3+0x16a>
    2df8:	fc 01       	movw	r30, r24
    2dfa:	e1 70       	andi	r30, 0x01	; 1
    2dfc:	f0 70       	andi	r31, 0x00	; 0
    2dfe:	30 97       	sbiw	r30, 0x00	; 0
    2e00:	29 f0       	breq	.+10     	; 0x2e0c <__mulsf3+0x15e>
    2e02:	56 95       	lsr	r21
    2e04:	47 95       	ror	r20
    2e06:	37 95       	ror	r19
    2e08:	27 95       	ror	r18
    2e0a:	50 68       	ori	r21, 0x80	; 128
    2e0c:	b6 95       	lsr	r27
    2e0e:	a7 95       	ror	r26
    2e10:	97 95       	ror	r25
    2e12:	87 95       	ror	r24
    2e14:	6f 5f       	subi	r22, 0xFF	; 255
    2e16:	7f 4f       	sbci	r23, 0xFF	; 255
    2e18:	b7 fd       	sbrc	r27, 7
    2e1a:	ee cf       	rjmp	.-36     	; 0x2df8 <__mulsf3+0x14a>
    2e1c:	0c c0       	rjmp	.+24     	; 0x2e36 <__mulsf3+0x188>
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	aa 1f       	adc	r26, r26
    2e24:	bb 1f       	adc	r27, r27
    2e26:	57 fd       	sbrc	r21, 7
    2e28:	81 60       	ori	r24, 0x01	; 1
    2e2a:	22 0f       	add	r18, r18
    2e2c:	33 1f       	adc	r19, r19
    2e2e:	44 1f       	adc	r20, r20
    2e30:	55 1f       	adc	r21, r21
    2e32:	61 50       	subi	r22, 0x01	; 1
    2e34:	70 40       	sbci	r23, 0x00	; 0
    2e36:	80 30       	cpi	r24, 0x00	; 0
    2e38:	e0 e0       	ldi	r30, 0x00	; 0
    2e3a:	9e 07       	cpc	r25, r30
    2e3c:	e0 e0       	ldi	r30, 0x00	; 0
    2e3e:	ae 07       	cpc	r26, r30
    2e40:	e0 e4       	ldi	r30, 0x40	; 64
    2e42:	be 07       	cpc	r27, r30
    2e44:	60 f3       	brcs	.-40     	; 0x2e1e <__mulsf3+0x170>
    2e46:	6b 8f       	std	Y+27, r22	; 0x1b
    2e48:	7c 8f       	std	Y+28, r23	; 0x1c
    2e4a:	6f e7       	ldi	r22, 0x7F	; 127
    2e4c:	e6 2e       	mov	r14, r22
    2e4e:	f1 2c       	mov	r15, r1
    2e50:	01 2d       	mov	r16, r1
    2e52:	11 2d       	mov	r17, r1
    2e54:	e8 22       	and	r14, r24
    2e56:	f9 22       	and	r15, r25
    2e58:	0a 23       	and	r16, r26
    2e5a:	1b 23       	and	r17, r27
    2e5c:	60 e4       	ldi	r22, 0x40	; 64
    2e5e:	e6 16       	cp	r14, r22
    2e60:	f1 04       	cpc	r15, r1
    2e62:	01 05       	cpc	r16, r1
    2e64:	11 05       	cpc	r17, r1
    2e66:	61 f4       	brne	.+24     	; 0x2e80 <__mulsf3+0x1d2>
    2e68:	87 fd       	sbrc	r24, 7
    2e6a:	0a c0       	rjmp	.+20     	; 0x2e80 <__mulsf3+0x1d2>
    2e6c:	21 15       	cp	r18, r1
    2e6e:	31 05       	cpc	r19, r1
    2e70:	41 05       	cpc	r20, r1
    2e72:	51 05       	cpc	r21, r1
    2e74:	29 f0       	breq	.+10     	; 0x2e80 <__mulsf3+0x1d2>
    2e76:	80 5c       	subi	r24, 0xC0	; 192
    2e78:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7a:	af 4f       	sbci	r26, 0xFF	; 255
    2e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7e:	80 78       	andi	r24, 0x80	; 128
    2e80:	8d 8f       	std	Y+29, r24	; 0x1d
    2e82:	9e 8f       	std	Y+30, r25	; 0x1e
    2e84:	af 8f       	std	Y+31, r26	; 0x1f
    2e86:	b8 a3       	std	Y+32, r27	; 0x20
    2e88:	83 e0       	ldi	r24, 0x03	; 3
    2e8a:	89 8f       	std	Y+25, r24	; 0x19
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	49 96       	adiw	r24, 0x19	; 25
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <__mulsf3+0x1e8>
    2e92:	87 ea       	ldi	r24, 0xA7	; 167
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__pack_f>
    2e9a:	a0 96       	adiw	r28, 0x20	; 32
    2e9c:	e2 e1       	ldi	r30, 0x12	; 18
    2e9e:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__epilogue_restores__>

00002ea2 <__divsf3>:
    2ea2:	a8 e1       	ldi	r26, 0x18	; 24
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e7 e5       	ldi	r30, 0x57	; 87
    2ea8:	f7 e1       	ldi	r31, 0x17	; 23
    2eaa:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__prologue_saves__+0x10>
    2eae:	69 83       	std	Y+1, r22	; 0x01
    2eb0:	7a 83       	std	Y+2, r23	; 0x02
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
    2eb4:	9c 83       	std	Y+4, r25	; 0x04
    2eb6:	2d 83       	std	Y+5, r18	; 0x05
    2eb8:	3e 83       	std	Y+6, r19	; 0x06
    2eba:	4f 83       	std	Y+7, r20	; 0x07
    2ebc:	58 87       	std	Y+8, r21	; 0x08
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	07 5f       	subi	r16, 0xF7	; 247
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	b8 01       	movw	r22, r16
    2eca:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2ece:	81 e1       	ldi	r24, 0x11	; 17
    2ed0:	e8 2e       	mov	r14, r24
    2ed2:	f1 2c       	mov	r15, r1
    2ed4:	ec 0e       	add	r14, r28
    2ed6:	fd 1e       	adc	r15, r29
    2ed8:	ce 01       	movw	r24, r28
    2eda:	05 96       	adiw	r24, 0x05	; 5
    2edc:	b7 01       	movw	r22, r14
    2ede:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    2ee2:	99 85       	ldd	r25, Y+9	; 0x09
    2ee4:	92 30       	cpi	r25, 0x02	; 2
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <__divsf3+0x48>
    2ee8:	83 c0       	rjmp	.+262    	; 0x2ff0 <__divsf3+0x14e>
    2eea:	89 89       	ldd	r24, Y+17	; 0x11
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	08 f4       	brcc	.+2      	; 0x2ef2 <__divsf3+0x50>
    2ef0:	7b c0       	rjmp	.+246    	; 0x2fe8 <__divsf3+0x146>
    2ef2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ef4:	3a 89       	ldd	r19, Y+18	; 0x12
    2ef6:	23 27       	eor	r18, r19
    2ef8:	2a 87       	std	Y+10, r18	; 0x0a
    2efa:	94 30       	cpi	r25, 0x04	; 4
    2efc:	11 f0       	breq	.+4      	; 0x2f02 <__divsf3+0x60>
    2efe:	92 30       	cpi	r25, 0x02	; 2
    2f00:	21 f4       	brne	.+8      	; 0x2f0a <__divsf3+0x68>
    2f02:	98 17       	cp	r25, r24
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <__divsf3+0x66>
    2f06:	6c c0       	rjmp	.+216    	; 0x2fe0 <__divsf3+0x13e>
    2f08:	71 c0       	rjmp	.+226    	; 0x2fec <__divsf3+0x14a>
    2f0a:	84 30       	cpi	r24, 0x04	; 4
    2f0c:	39 f4       	brne	.+14     	; 0x2f1c <__divsf3+0x7a>
    2f0e:	1d 86       	std	Y+13, r1	; 0x0d
    2f10:	1e 86       	std	Y+14, r1	; 0x0e
    2f12:	1f 86       	std	Y+15, r1	; 0x0f
    2f14:	18 8a       	std	Y+16, r1	; 0x10
    2f16:	1c 86       	std	Y+12, r1	; 0x0c
    2f18:	1b 86       	std	Y+11, r1	; 0x0b
    2f1a:	6a c0       	rjmp	.+212    	; 0x2ff0 <__divsf3+0x14e>
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	19 f4       	brne	.+6      	; 0x2f26 <__divsf3+0x84>
    2f20:	84 e0       	ldi	r24, 0x04	; 4
    2f22:	89 87       	std	Y+9, r24	; 0x09
    2f24:	65 c0       	rjmp	.+202    	; 0x2ff0 <__divsf3+0x14e>
    2f26:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f28:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f2a:	2b 89       	ldd	r18, Y+19	; 0x13
    2f2c:	3c 89       	ldd	r19, Y+20	; 0x14
    2f2e:	82 1b       	sub	r24, r18
    2f30:	93 0b       	sbc	r25, r19
    2f32:	9c 87       	std	Y+12, r25	; 0x0c
    2f34:	8b 87       	std	Y+11, r24	; 0x0b
    2f36:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f38:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f3a:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f3c:	58 89       	ldd	r21, Y+16	; 0x10
    2f3e:	ed 88       	ldd	r14, Y+21	; 0x15
    2f40:	fe 88       	ldd	r15, Y+22	; 0x16
    2f42:	0f 89       	ldd	r16, Y+23	; 0x17
    2f44:	18 8d       	ldd	r17, Y+24	; 0x18
    2f46:	2e 15       	cp	r18, r14
    2f48:	3f 05       	cpc	r19, r15
    2f4a:	40 07       	cpc	r20, r16
    2f4c:	51 07       	cpc	r21, r17
    2f4e:	38 f4       	brcc	.+14     	; 0x2f5e <__divsf3+0xbc>
    2f50:	22 0f       	add	r18, r18
    2f52:	33 1f       	adc	r19, r19
    2f54:	44 1f       	adc	r20, r20
    2f56:	55 1f       	adc	r21, r21
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9c 87       	std	Y+12, r25	; 0x0c
    2f5c:	8b 87       	std	Y+11, r24	; 0x0b
    2f5e:	6f e1       	ldi	r22, 0x1F	; 31
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	a1 2c       	mov	r10, r1
    2f64:	b1 2c       	mov	r11, r1
    2f66:	c1 2c       	mov	r12, r1
    2f68:	a0 e4       	ldi	r26, 0x40	; 64
    2f6a:	da 2e       	mov	r13, r26
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	dc 01       	movw	r26, r24
    2f72:	2e 15       	cp	r18, r14
    2f74:	3f 05       	cpc	r19, r15
    2f76:	40 07       	cpc	r20, r16
    2f78:	51 07       	cpc	r21, r17
    2f7a:	40 f0       	brcs	.+16     	; 0x2f8c <__divsf3+0xea>
    2f7c:	8a 29       	or	r24, r10
    2f7e:	9b 29       	or	r25, r11
    2f80:	ac 29       	or	r26, r12
    2f82:	bd 29       	or	r27, r13
    2f84:	2e 19       	sub	r18, r14
    2f86:	3f 09       	sbc	r19, r15
    2f88:	40 0b       	sbc	r20, r16
    2f8a:	51 0b       	sbc	r21, r17
    2f8c:	d6 94       	lsr	r13
    2f8e:	c7 94       	ror	r12
    2f90:	b7 94       	ror	r11
    2f92:	a7 94       	ror	r10
    2f94:	22 0f       	add	r18, r18
    2f96:	33 1f       	adc	r19, r19
    2f98:	44 1f       	adc	r20, r20
    2f9a:	55 1f       	adc	r21, r21
    2f9c:	61 50       	subi	r22, 0x01	; 1
    2f9e:	70 40       	sbci	r23, 0x00	; 0
    2fa0:	41 f7       	brne	.-48     	; 0x2f72 <__divsf3+0xd0>
    2fa2:	6f e7       	ldi	r22, 0x7F	; 127
    2fa4:	e6 2e       	mov	r14, r22
    2fa6:	f1 2c       	mov	r15, r1
    2fa8:	01 2d       	mov	r16, r1
    2faa:	11 2d       	mov	r17, r1
    2fac:	e8 22       	and	r14, r24
    2fae:	f9 22       	and	r15, r25
    2fb0:	0a 23       	and	r16, r26
    2fb2:	1b 23       	and	r17, r27
    2fb4:	60 e4       	ldi	r22, 0x40	; 64
    2fb6:	e6 16       	cp	r14, r22
    2fb8:	f1 04       	cpc	r15, r1
    2fba:	01 05       	cpc	r16, r1
    2fbc:	11 05       	cpc	r17, r1
    2fbe:	61 f4       	brne	.+24     	; 0x2fd8 <__divsf3+0x136>
    2fc0:	87 fd       	sbrc	r24, 7
    2fc2:	0a c0       	rjmp	.+20     	; 0x2fd8 <__divsf3+0x136>
    2fc4:	21 15       	cp	r18, r1
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	41 05       	cpc	r20, r1
    2fca:	51 05       	cpc	r21, r1
    2fcc:	29 f0       	breq	.+10     	; 0x2fd8 <__divsf3+0x136>
    2fce:	80 5c       	subi	r24, 0xC0	; 192
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd2:	af 4f       	sbci	r26, 0xFF	; 255
    2fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd6:	80 78       	andi	r24, 0x80	; 128
    2fd8:	8d 87       	std	Y+13, r24	; 0x0d
    2fda:	9e 87       	std	Y+14, r25	; 0x0e
    2fdc:	af 87       	std	Y+15, r26	; 0x0f
    2fde:	b8 8b       	std	Y+16, r27	; 0x10
    2fe0:	8e 01       	movw	r16, r28
    2fe2:	07 5f       	subi	r16, 0xF7	; 247
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	04 c0       	rjmp	.+8      	; 0x2ff0 <__divsf3+0x14e>
    2fe8:	87 01       	movw	r16, r14
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <__divsf3+0x14e>
    2fec:	07 ea       	ldi	r16, 0xA7	; 167
    2fee:	10 e0       	ldi	r17, 0x00	; 0
    2ff0:	c8 01       	movw	r24, r16
    2ff2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__pack_f>
    2ff6:	68 96       	adiw	r28, 0x18	; 24
    2ff8:	ea e0       	ldi	r30, 0x0A	; 10
    2ffa:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__epilogue_restores__+0x10>

00002ffe <__gtsf2>:
    2ffe:	a8 e1       	ldi	r26, 0x18	; 24
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e5 e0       	ldi	r30, 0x05	; 5
    3004:	f8 e1       	ldi	r31, 0x18	; 24
    3006:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
    300a:	69 83       	std	Y+1, r22	; 0x01
    300c:	7a 83       	std	Y+2, r23	; 0x02
    300e:	8b 83       	std	Y+3, r24	; 0x03
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	2d 83       	std	Y+5, r18	; 0x05
    3014:	3e 83       	std	Y+6, r19	; 0x06
    3016:	4f 83       	std	Y+7, r20	; 0x07
    3018:	58 87       	std	Y+8, r21	; 0x08
    301a:	8e 01       	movw	r16, r28
    301c:	07 5f       	subi	r16, 0xF7	; 247
    301e:	1f 4f       	sbci	r17, 0xFF	; 255
    3020:	ce 01       	movw	r24, r28
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	b8 01       	movw	r22, r16
    3026:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    302a:	81 e1       	ldi	r24, 0x11	; 17
    302c:	e8 2e       	mov	r14, r24
    302e:	f1 2c       	mov	r15, r1
    3030:	ec 0e       	add	r14, r28
    3032:	fd 1e       	adc	r15, r29
    3034:	ce 01       	movw	r24, r28
    3036:	05 96       	adiw	r24, 0x05	; 5
    3038:	b7 01       	movw	r22, r14
    303a:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	82 30       	cpi	r24, 0x02	; 2
    3042:	40 f0       	brcs	.+16     	; 0x3054 <__gtsf2+0x56>
    3044:	89 89       	ldd	r24, Y+17	; 0x11
    3046:	82 30       	cpi	r24, 0x02	; 2
    3048:	28 f0       	brcs	.+10     	; 0x3054 <__gtsf2+0x56>
    304a:	c8 01       	movw	r24, r16
    304c:	b7 01       	movw	r22, r14
    304e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fpcmp_parts_f>
    3052:	01 c0       	rjmp	.+2      	; 0x3056 <__gtsf2+0x58>
    3054:	8f ef       	ldi	r24, 0xFF	; 255
    3056:	68 96       	adiw	r28, 0x18	; 24
    3058:	e6 e0       	ldi	r30, 0x06	; 6
    305a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

0000305e <__gesf2>:
    305e:	a8 e1       	ldi	r26, 0x18	; 24
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e5 e3       	ldi	r30, 0x35	; 53
    3064:	f8 e1       	ldi	r31, 0x18	; 24
    3066:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
    306a:	69 83       	std	Y+1, r22	; 0x01
    306c:	7a 83       	std	Y+2, r23	; 0x02
    306e:	8b 83       	std	Y+3, r24	; 0x03
    3070:	9c 83       	std	Y+4, r25	; 0x04
    3072:	2d 83       	std	Y+5, r18	; 0x05
    3074:	3e 83       	std	Y+6, r19	; 0x06
    3076:	4f 83       	std	Y+7, r20	; 0x07
    3078:	58 87       	std	Y+8, r21	; 0x08
    307a:	8e 01       	movw	r16, r28
    307c:	07 5f       	subi	r16, 0xF7	; 247
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	ce 01       	movw	r24, r28
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	b8 01       	movw	r22, r16
    3086:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    308a:	81 e1       	ldi	r24, 0x11	; 17
    308c:	e8 2e       	mov	r14, r24
    308e:	f1 2c       	mov	r15, r1
    3090:	ec 0e       	add	r14, r28
    3092:	fd 1e       	adc	r15, r29
    3094:	ce 01       	movw	r24, r28
    3096:	05 96       	adiw	r24, 0x05	; 5
    3098:	b7 01       	movw	r22, r14
    309a:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    309e:	89 85       	ldd	r24, Y+9	; 0x09
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	40 f0       	brcs	.+16     	; 0x30b4 <__gesf2+0x56>
    30a4:	89 89       	ldd	r24, Y+17	; 0x11
    30a6:	82 30       	cpi	r24, 0x02	; 2
    30a8:	28 f0       	brcs	.+10     	; 0x30b4 <__gesf2+0x56>
    30aa:	c8 01       	movw	r24, r16
    30ac:	b7 01       	movw	r22, r14
    30ae:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fpcmp_parts_f>
    30b2:	01 c0       	rjmp	.+2      	; 0x30b6 <__gesf2+0x58>
    30b4:	8f ef       	ldi	r24, 0xFF	; 255
    30b6:	68 96       	adiw	r28, 0x18	; 24
    30b8:	e6 e0       	ldi	r30, 0x06	; 6
    30ba:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

000030be <__ltsf2>:
    30be:	a8 e1       	ldi	r26, 0x18	; 24
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e5 e6       	ldi	r30, 0x65	; 101
    30c4:	f8 e1       	ldi	r31, 0x18	; 24
    30c6:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
    30ca:	69 83       	std	Y+1, r22	; 0x01
    30cc:	7a 83       	std	Y+2, r23	; 0x02
    30ce:	8b 83       	std	Y+3, r24	; 0x03
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	2d 83       	std	Y+5, r18	; 0x05
    30d4:	3e 83       	std	Y+6, r19	; 0x06
    30d6:	4f 83       	std	Y+7, r20	; 0x07
    30d8:	58 87       	std	Y+8, r21	; 0x08
    30da:	8e 01       	movw	r16, r28
    30dc:	07 5f       	subi	r16, 0xF7	; 247
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	ce 01       	movw	r24, r28
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	b8 01       	movw	r22, r16
    30e6:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    30ea:	81 e1       	ldi	r24, 0x11	; 17
    30ec:	e8 2e       	mov	r14, r24
    30ee:	f1 2c       	mov	r15, r1
    30f0:	ec 0e       	add	r14, r28
    30f2:	fd 1e       	adc	r15, r29
    30f4:	ce 01       	movw	r24, r28
    30f6:	05 96       	adiw	r24, 0x05	; 5
    30f8:	b7 01       	movw	r22, r14
    30fa:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    30fe:	89 85       	ldd	r24, Y+9	; 0x09
    3100:	82 30       	cpi	r24, 0x02	; 2
    3102:	40 f0       	brcs	.+16     	; 0x3114 <__ltsf2+0x56>
    3104:	89 89       	ldd	r24, Y+17	; 0x11
    3106:	82 30       	cpi	r24, 0x02	; 2
    3108:	28 f0       	brcs	.+10     	; 0x3114 <__ltsf2+0x56>
    310a:	c8 01       	movw	r24, r16
    310c:	b7 01       	movw	r22, r14
    310e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fpcmp_parts_f>
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <__ltsf2+0x58>
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	68 96       	adiw	r28, 0x18	; 24
    3118:	e6 e0       	ldi	r30, 0x06	; 6
    311a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

0000311e <__fixsfsi>:
    311e:	ac e0       	ldi	r26, 0x0C	; 12
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e5 e9       	ldi	r30, 0x95	; 149
    3124:	f8 e1       	ldi	r31, 0x18	; 24
    3126:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <__prologue_saves__+0x20>
    312a:	69 83       	std	Y+1, r22	; 0x01
    312c:	7a 83       	std	Y+2, r23	; 0x02
    312e:	8b 83       	std	Y+3, r24	; 0x03
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	ce 01       	movw	r24, r28
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	be 01       	movw	r22, r28
    3138:	6b 5f       	subi	r22, 0xFB	; 251
    313a:	7f 4f       	sbci	r23, 0xFF	; 255
    313c:	0e 94 af 19 	call	0x335e	; 0x335e <__unpack_f>
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	81 f1       	breq	.+96     	; 0x31a6 <__fixsfsi+0x88>
    3146:	82 30       	cpi	r24, 0x02	; 2
    3148:	70 f1       	brcs	.+92     	; 0x31a6 <__fixsfsi+0x88>
    314a:	84 30       	cpi	r24, 0x04	; 4
    314c:	21 f4       	brne	.+8      	; 0x3156 <__fixsfsi+0x38>
    314e:	8e 81       	ldd	r24, Y+6	; 0x06
    3150:	88 23       	and	r24, r24
    3152:	69 f1       	breq	.+90     	; 0x31ae <__fixsfsi+0x90>
    3154:	0a c0       	rjmp	.+20     	; 0x316a <__fixsfsi+0x4c>
    3156:	2f 81       	ldd	r18, Y+7	; 0x07
    3158:	38 85       	ldd	r19, Y+8	; 0x08
    315a:	37 fd       	sbrc	r19, 7
    315c:	24 c0       	rjmp	.+72     	; 0x31a6 <__fixsfsi+0x88>
    315e:	6e 81       	ldd	r22, Y+6	; 0x06
    3160:	2f 31       	cpi	r18, 0x1F	; 31
    3162:	31 05       	cpc	r19, r1
    3164:	3c f0       	brlt	.+14     	; 0x3174 <__fixsfsi+0x56>
    3166:	66 23       	and	r22, r22
    3168:	11 f1       	breq	.+68     	; 0x31ae <__fixsfsi+0x90>
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	50 e8       	ldi	r21, 0x80	; 128
    3172:	21 c0       	rjmp	.+66     	; 0x31b6 <__fixsfsi+0x98>
    3174:	8e e1       	ldi	r24, 0x1E	; 30
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	82 1b       	sub	r24, r18
    317a:	93 0b       	sbc	r25, r19
    317c:	29 85       	ldd	r18, Y+9	; 0x09
    317e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3180:	4b 85       	ldd	r20, Y+11	; 0x0b
    3182:	5c 85       	ldd	r21, Y+12	; 0x0c
    3184:	04 c0       	rjmp	.+8      	; 0x318e <__fixsfsi+0x70>
    3186:	56 95       	lsr	r21
    3188:	47 95       	ror	r20
    318a:	37 95       	ror	r19
    318c:	27 95       	ror	r18
    318e:	8a 95       	dec	r24
    3190:	d2 f7       	brpl	.-12     	; 0x3186 <__fixsfsi+0x68>
    3192:	66 23       	and	r22, r22
    3194:	81 f0       	breq	.+32     	; 0x31b6 <__fixsfsi+0x98>
    3196:	50 95       	com	r21
    3198:	40 95       	com	r20
    319a:	30 95       	com	r19
    319c:	21 95       	neg	r18
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	4f 4f       	sbci	r20, 0xFF	; 255
    31a2:	5f 4f       	sbci	r21, 0xFF	; 255
    31a4:	08 c0       	rjmp	.+16     	; 0x31b6 <__fixsfsi+0x98>
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	a9 01       	movw	r20, r18
    31ac:	04 c0       	rjmp	.+8      	; 0x31b6 <__fixsfsi+0x98>
    31ae:	2f ef       	ldi	r18, 0xFF	; 255
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f ef       	ldi	r20, 0xFF	; 255
    31b4:	5f e7       	ldi	r21, 0x7F	; 127
    31b6:	b9 01       	movw	r22, r18
    31b8:	ca 01       	movw	r24, r20
    31ba:	2c 96       	adiw	r28, 0x0c	; 12
    31bc:	e2 e0       	ldi	r30, 0x02	; 2
    31be:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__epilogue_restores__+0x20>

000031c2 <__pack_f>:
    31c2:	ef 92       	push	r14
    31c4:	ff 92       	push	r15
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	fc 01       	movw	r30, r24
    31d0:	24 81       	ldd	r18, Z+4	; 0x04
    31d2:	35 81       	ldd	r19, Z+5	; 0x05
    31d4:	46 81       	ldd	r20, Z+6	; 0x06
    31d6:	57 81       	ldd	r21, Z+7	; 0x07
    31d8:	61 81       	ldd	r22, Z+1	; 0x01
    31da:	80 81       	ld	r24, Z
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	20 f4       	brcc	.+8      	; 0x31e8 <__pack_f+0x26>
    31e0:	40 61       	ori	r20, 0x10	; 16
    31e2:	ef ef       	ldi	r30, 0xFF	; 255
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	a3 c0       	rjmp	.+326    	; 0x332e <__pack_f+0x16c>
    31e8:	84 30       	cpi	r24, 0x04	; 4
    31ea:	09 f4       	brne	.+2      	; 0x31ee <__pack_f+0x2c>
    31ec:	9b c0       	rjmp	.+310    	; 0x3324 <__pack_f+0x162>
    31ee:	82 30       	cpi	r24, 0x02	; 2
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <__pack_f+0x32>
    31f2:	92 c0       	rjmp	.+292    	; 0x3318 <__pack_f+0x156>
    31f4:	21 15       	cp	r18, r1
    31f6:	31 05       	cpc	r19, r1
    31f8:	41 05       	cpc	r20, r1
    31fa:	51 05       	cpc	r21, r1
    31fc:	09 f4       	brne	.+2      	; 0x3200 <__pack_f+0x3e>
    31fe:	8f c0       	rjmp	.+286    	; 0x331e <__pack_f+0x15c>
    3200:	02 80       	ldd	r0, Z+2	; 0x02
    3202:	f3 81       	ldd	r31, Z+3	; 0x03
    3204:	e0 2d       	mov	r30, r0
    3206:	8f ef       	ldi	r24, 0xFF	; 255
    3208:	e2 38       	cpi	r30, 0x82	; 130
    320a:	f8 07       	cpc	r31, r24
    320c:	0c f0       	brlt	.+2      	; 0x3210 <__pack_f+0x4e>
    320e:	5a c0       	rjmp	.+180    	; 0x32c4 <__pack_f+0x102>
    3210:	c2 e8       	ldi	r28, 0x82	; 130
    3212:	df ef       	ldi	r29, 0xFF	; 255
    3214:	ce 1b       	sub	r28, r30
    3216:	df 0b       	sbc	r29, r31
    3218:	ca 31       	cpi	r28, 0x1A	; 26
    321a:	d1 05       	cpc	r29, r1
    321c:	6c f5       	brge	.+90     	; 0x3278 <__pack_f+0xb6>
    321e:	79 01       	movw	r14, r18
    3220:	8a 01       	movw	r16, r20
    3222:	0c 2e       	mov	r0, r28
    3224:	04 c0       	rjmp	.+8      	; 0x322e <__pack_f+0x6c>
    3226:	16 95       	lsr	r17
    3228:	07 95       	ror	r16
    322a:	f7 94       	ror	r15
    322c:	e7 94       	ror	r14
    322e:	0a 94       	dec	r0
    3230:	d2 f7       	brpl	.-12     	; 0x3226 <__pack_f+0x64>
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	a0 e0       	ldi	r26, 0x00	; 0
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	0c 2e       	mov	r0, r28
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <__pack_f+0x84>
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	aa 1f       	adc	r26, r26
    3244:	bb 1f       	adc	r27, r27
    3246:	0a 94       	dec	r0
    3248:	d2 f7       	brpl	.-12     	; 0x323e <__pack_f+0x7c>
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	a1 09       	sbc	r26, r1
    324e:	b1 09       	sbc	r27, r1
    3250:	82 23       	and	r24, r18
    3252:	93 23       	and	r25, r19
    3254:	a4 23       	and	r26, r20
    3256:	b5 23       	and	r27, r21
    3258:	21 e0       	ldi	r18, 0x01	; 1
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	a1 05       	cpc	r26, r1
    3264:	b1 05       	cpc	r27, r1
    3266:	19 f4       	brne	.+6      	; 0x326e <__pack_f+0xac>
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	a9 01       	movw	r20, r18
    326e:	2e 29       	or	r18, r14
    3270:	3f 29       	or	r19, r15
    3272:	40 2b       	or	r20, r16
    3274:	51 2b       	or	r21, r17
    3276:	03 c0       	rjmp	.+6      	; 0x327e <__pack_f+0xbc>
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	a9 01       	movw	r20, r18
    327e:	da 01       	movw	r26, r20
    3280:	c9 01       	movw	r24, r18
    3282:	8f 77       	andi	r24, 0x7F	; 127
    3284:	90 70       	andi	r25, 0x00	; 0
    3286:	a0 70       	andi	r26, 0x00	; 0
    3288:	b0 70       	andi	r27, 0x00	; 0
    328a:	80 34       	cpi	r24, 0x40	; 64
    328c:	91 05       	cpc	r25, r1
    328e:	a1 05       	cpc	r26, r1
    3290:	b1 05       	cpc	r27, r1
    3292:	39 f4       	brne	.+14     	; 0x32a2 <__pack_f+0xe0>
    3294:	27 ff       	sbrs	r18, 7
    3296:	09 c0       	rjmp	.+18     	; 0x32aa <__pack_f+0xe8>
    3298:	20 5c       	subi	r18, 0xC0	; 192
    329a:	3f 4f       	sbci	r19, 0xFF	; 255
    329c:	4f 4f       	sbci	r20, 0xFF	; 255
    329e:	5f 4f       	sbci	r21, 0xFF	; 255
    32a0:	04 c0       	rjmp	.+8      	; 0x32aa <__pack_f+0xe8>
    32a2:	21 5c       	subi	r18, 0xC1	; 193
    32a4:	3f 4f       	sbci	r19, 0xFF	; 255
    32a6:	4f 4f       	sbci	r20, 0xFF	; 255
    32a8:	5f 4f       	sbci	r21, 0xFF	; 255
    32aa:	e1 e0       	ldi	r30, 0x01	; 1
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	20 30       	cpi	r18, 0x00	; 0
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	38 07       	cpc	r19, r24
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	48 07       	cpc	r20, r24
    32b8:	80 e4       	ldi	r24, 0x40	; 64
    32ba:	58 07       	cpc	r21, r24
    32bc:	28 f5       	brcc	.+74     	; 0x3308 <__pack_f+0x146>
    32be:	e0 e0       	ldi	r30, 0x00	; 0
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	22 c0       	rjmp	.+68     	; 0x3308 <__pack_f+0x146>
    32c4:	e0 38       	cpi	r30, 0x80	; 128
    32c6:	f1 05       	cpc	r31, r1
    32c8:	6c f5       	brge	.+90     	; 0x3324 <__pack_f+0x162>
    32ca:	e1 58       	subi	r30, 0x81	; 129
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	da 01       	movw	r26, r20
    32d0:	c9 01       	movw	r24, r18
    32d2:	8f 77       	andi	r24, 0x7F	; 127
    32d4:	90 70       	andi	r25, 0x00	; 0
    32d6:	a0 70       	andi	r26, 0x00	; 0
    32d8:	b0 70       	andi	r27, 0x00	; 0
    32da:	80 34       	cpi	r24, 0x40	; 64
    32dc:	91 05       	cpc	r25, r1
    32de:	a1 05       	cpc	r26, r1
    32e0:	b1 05       	cpc	r27, r1
    32e2:	39 f4       	brne	.+14     	; 0x32f2 <__pack_f+0x130>
    32e4:	27 ff       	sbrs	r18, 7
    32e6:	09 c0       	rjmp	.+18     	; 0x32fa <__pack_f+0x138>
    32e8:	20 5c       	subi	r18, 0xC0	; 192
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	4f 4f       	sbci	r20, 0xFF	; 255
    32ee:	5f 4f       	sbci	r21, 0xFF	; 255
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <__pack_f+0x138>
    32f2:	21 5c       	subi	r18, 0xC1	; 193
    32f4:	3f 4f       	sbci	r19, 0xFF	; 255
    32f6:	4f 4f       	sbci	r20, 0xFF	; 255
    32f8:	5f 4f       	sbci	r21, 0xFF	; 255
    32fa:	57 ff       	sbrs	r21, 7
    32fc:	05 c0       	rjmp	.+10     	; 0x3308 <__pack_f+0x146>
    32fe:	56 95       	lsr	r21
    3300:	47 95       	ror	r20
    3302:	37 95       	ror	r19
    3304:	27 95       	ror	r18
    3306:	31 96       	adiw	r30, 0x01	; 1
    3308:	87 e0       	ldi	r24, 0x07	; 7
    330a:	56 95       	lsr	r21
    330c:	47 95       	ror	r20
    330e:	37 95       	ror	r19
    3310:	27 95       	ror	r18
    3312:	8a 95       	dec	r24
    3314:	d1 f7       	brne	.-12     	; 0x330a <__pack_f+0x148>
    3316:	0b c0       	rjmp	.+22     	; 0x332e <__pack_f+0x16c>
    3318:	e0 e0       	ldi	r30, 0x00	; 0
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	05 c0       	rjmp	.+10     	; 0x3328 <__pack_f+0x166>
    331e:	e0 e0       	ldi	r30, 0x00	; 0
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	05 c0       	rjmp	.+10     	; 0x332e <__pack_f+0x16c>
    3324:	ef ef       	ldi	r30, 0xFF	; 255
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	a9 01       	movw	r20, r18
    332e:	8e 2f       	mov	r24, r30
    3330:	87 95       	ror	r24
    3332:	88 27       	eor	r24, r24
    3334:	87 95       	ror	r24
    3336:	94 2f       	mov	r25, r20
    3338:	9f 77       	andi	r25, 0x7F	; 127
    333a:	67 95       	ror	r22
    333c:	66 27       	eor	r22, r22
    333e:	67 95       	ror	r22
    3340:	e6 95       	lsr	r30
    3342:	e2 2e       	mov	r14, r18
    3344:	a9 2f       	mov	r26, r25
    3346:	a8 2b       	or	r26, r24
    3348:	fe 2f       	mov	r31, r30
    334a:	f6 2b       	or	r31, r22
    334c:	62 2f       	mov	r22, r18
    334e:	73 2f       	mov	r23, r19
    3350:	8a 2f       	mov	r24, r26
    3352:	9f 2f       	mov	r25, r31
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	e6 e0       	ldi	r30, 0x06	; 6
    335a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

0000335e <__unpack_f>:
    335e:	dc 01       	movw	r26, r24
    3360:	fb 01       	movw	r30, r22
    3362:	2c 91       	ld	r18, X
    3364:	11 96       	adiw	r26, 0x01	; 1
    3366:	3c 91       	ld	r19, X
    3368:	11 97       	sbiw	r26, 0x01	; 1
    336a:	12 96       	adiw	r26, 0x02	; 2
    336c:	8c 91       	ld	r24, X
    336e:	12 97       	sbiw	r26, 0x02	; 2
    3370:	48 2f       	mov	r20, r24
    3372:	4f 77       	andi	r20, 0x7F	; 127
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	98 2f       	mov	r25, r24
    3378:	99 1f       	adc	r25, r25
    337a:	99 27       	eor	r25, r25
    337c:	99 1f       	adc	r25, r25
    337e:	13 96       	adiw	r26, 0x03	; 3
    3380:	6c 91       	ld	r22, X
    3382:	13 97       	sbiw	r26, 0x03	; 3
    3384:	86 2f       	mov	r24, r22
    3386:	88 0f       	add	r24, r24
    3388:	89 2b       	or	r24, r25
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	66 1f       	adc	r22, r22
    338e:	66 27       	eor	r22, r22
    3390:	66 1f       	adc	r22, r22
    3392:	61 83       	std	Z+1, r22	; 0x01
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	39 f5       	brne	.+78     	; 0x33e6 <__unpack_f+0x88>
    3398:	21 15       	cp	r18, r1
    339a:	31 05       	cpc	r19, r1
    339c:	41 05       	cpc	r20, r1
    339e:	51 05       	cpc	r21, r1
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <__unpack_f+0x48>
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	29 c0       	rjmp	.+82     	; 0x33f8 <__unpack_f+0x9a>
    33a6:	82 e8       	ldi	r24, 0x82	; 130
    33a8:	9f ef       	ldi	r25, 0xFF	; 255
    33aa:	93 83       	std	Z+3, r25	; 0x03
    33ac:	82 83       	std	Z+2, r24	; 0x02
    33ae:	67 e0       	ldi	r22, 0x07	; 7
    33b0:	22 0f       	add	r18, r18
    33b2:	33 1f       	adc	r19, r19
    33b4:	44 1f       	adc	r20, r20
    33b6:	55 1f       	adc	r21, r21
    33b8:	6a 95       	dec	r22
    33ba:	d1 f7       	brne	.-12     	; 0x33b0 <__unpack_f+0x52>
    33bc:	83 e0       	ldi	r24, 0x03	; 3
    33be:	80 83       	st	Z, r24
    33c0:	09 c0       	rjmp	.+18     	; 0x33d4 <__unpack_f+0x76>
    33c2:	22 0f       	add	r18, r18
    33c4:	33 1f       	adc	r19, r19
    33c6:	44 1f       	adc	r20, r20
    33c8:	55 1f       	adc	r21, r21
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	93 83       	std	Z+3, r25	; 0x03
    33d2:	82 83       	std	Z+2, r24	; 0x02
    33d4:	20 30       	cpi	r18, 0x00	; 0
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	38 07       	cpc	r19, r24
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	48 07       	cpc	r20, r24
    33de:	80 e4       	ldi	r24, 0x40	; 64
    33e0:	58 07       	cpc	r21, r24
    33e2:	78 f3       	brcs	.-34     	; 0x33c2 <__unpack_f+0x64>
    33e4:	20 c0       	rjmp	.+64     	; 0x3426 <__unpack_f+0xc8>
    33e6:	8f 3f       	cpi	r24, 0xFF	; 255
    33e8:	91 05       	cpc	r25, r1
    33ea:	79 f4       	brne	.+30     	; 0x340a <__unpack_f+0xac>
    33ec:	21 15       	cp	r18, r1
    33ee:	31 05       	cpc	r19, r1
    33f0:	41 05       	cpc	r20, r1
    33f2:	51 05       	cpc	r21, r1
    33f4:	19 f4       	brne	.+6      	; 0x33fc <__unpack_f+0x9e>
    33f6:	84 e0       	ldi	r24, 0x04	; 4
    33f8:	80 83       	st	Z, r24
    33fa:	08 95       	ret
    33fc:	44 ff       	sbrs	r20, 4
    33fe:	03 c0       	rjmp	.+6      	; 0x3406 <__unpack_f+0xa8>
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	80 83       	st	Z, r24
    3404:	10 c0       	rjmp	.+32     	; 0x3426 <__unpack_f+0xc8>
    3406:	10 82       	st	Z, r1
    3408:	0e c0       	rjmp	.+28     	; 0x3426 <__unpack_f+0xc8>
    340a:	8f 57       	subi	r24, 0x7F	; 127
    340c:	90 40       	sbci	r25, 0x00	; 0
    340e:	93 83       	std	Z+3, r25	; 0x03
    3410:	82 83       	std	Z+2, r24	; 0x02
    3412:	83 e0       	ldi	r24, 0x03	; 3
    3414:	80 83       	st	Z, r24
    3416:	87 e0       	ldi	r24, 0x07	; 7
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	44 1f       	adc	r20, r20
    341e:	55 1f       	adc	r21, r21
    3420:	8a 95       	dec	r24
    3422:	d1 f7       	brne	.-12     	; 0x3418 <__unpack_f+0xba>
    3424:	50 64       	ori	r21, 0x40	; 64
    3426:	24 83       	std	Z+4, r18	; 0x04
    3428:	35 83       	std	Z+5, r19	; 0x05
    342a:	46 83       	std	Z+6, r20	; 0x06
    342c:	57 83       	std	Z+7, r21	; 0x07
    342e:	08 95       	ret

00003430 <__fpcmp_parts_f>:
    3430:	fc 01       	movw	r30, r24
    3432:	db 01       	movw	r26, r22
    3434:	90 81       	ld	r25, Z
    3436:	92 30       	cpi	r25, 0x02	; 2
    3438:	08 f4       	brcc	.+2      	; 0x343c <__fpcmp_parts_f+0xc>
    343a:	49 c0       	rjmp	.+146    	; 0x34ce <__fpcmp_parts_f+0x9e>
    343c:	8c 91       	ld	r24, X
    343e:	82 30       	cpi	r24, 0x02	; 2
    3440:	08 f4       	brcc	.+2      	; 0x3444 <__fpcmp_parts_f+0x14>
    3442:	45 c0       	rjmp	.+138    	; 0x34ce <__fpcmp_parts_f+0x9e>
    3444:	94 30       	cpi	r25, 0x04	; 4
    3446:	51 f4       	brne	.+20     	; 0x345c <__fpcmp_parts_f+0x2c>
    3448:	61 81       	ldd	r22, Z+1	; 0x01
    344a:	84 30       	cpi	r24, 0x04	; 4
    344c:	b1 f5       	brne	.+108    	; 0x34ba <__fpcmp_parts_f+0x8a>
    344e:	11 96       	adiw	r26, 0x01	; 1
    3450:	2c 91       	ld	r18, X
    3452:	11 97       	sbiw	r26, 0x01	; 1
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	26 1b       	sub	r18, r22
    3458:	31 09       	sbc	r19, r1
    345a:	41 c0       	rjmp	.+130    	; 0x34de <__fpcmp_parts_f+0xae>
    345c:	84 30       	cpi	r24, 0x04	; 4
    345e:	21 f0       	breq	.+8      	; 0x3468 <__fpcmp_parts_f+0x38>
    3460:	92 30       	cpi	r25, 0x02	; 2
    3462:	41 f4       	brne	.+16     	; 0x3474 <__fpcmp_parts_f+0x44>
    3464:	82 30       	cpi	r24, 0x02	; 2
    3466:	b1 f1       	breq	.+108    	; 0x34d4 <__fpcmp_parts_f+0xa4>
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	8c 91       	ld	r24, X
    346c:	11 97       	sbiw	r26, 0x01	; 1
    346e:	88 23       	and	r24, r24
    3470:	a1 f1       	breq	.+104    	; 0x34da <__fpcmp_parts_f+0xaa>
    3472:	2d c0       	rjmp	.+90     	; 0x34ce <__fpcmp_parts_f+0x9e>
    3474:	61 81       	ldd	r22, Z+1	; 0x01
    3476:	82 30       	cpi	r24, 0x02	; 2
    3478:	01 f1       	breq	.+64     	; 0x34ba <__fpcmp_parts_f+0x8a>
    347a:	11 96       	adiw	r26, 0x01	; 1
    347c:	8c 91       	ld	r24, X
    347e:	11 97       	sbiw	r26, 0x01	; 1
    3480:	68 17       	cp	r22, r24
    3482:	d9 f4       	brne	.+54     	; 0x34ba <__fpcmp_parts_f+0x8a>
    3484:	22 81       	ldd	r18, Z+2	; 0x02
    3486:	33 81       	ldd	r19, Z+3	; 0x03
    3488:	12 96       	adiw	r26, 0x02	; 2
    348a:	8d 91       	ld	r24, X+
    348c:	9c 91       	ld	r25, X
    348e:	13 97       	sbiw	r26, 0x03	; 3
    3490:	82 17       	cp	r24, r18
    3492:	93 07       	cpc	r25, r19
    3494:	94 f0       	brlt	.+36     	; 0x34ba <__fpcmp_parts_f+0x8a>
    3496:	28 17       	cp	r18, r24
    3498:	39 07       	cpc	r19, r25
    349a:	bc f0       	brlt	.+46     	; 0x34ca <__fpcmp_parts_f+0x9a>
    349c:	24 81       	ldd	r18, Z+4	; 0x04
    349e:	35 81       	ldd	r19, Z+5	; 0x05
    34a0:	46 81       	ldd	r20, Z+6	; 0x06
    34a2:	57 81       	ldd	r21, Z+7	; 0x07
    34a4:	14 96       	adiw	r26, 0x04	; 4
    34a6:	8d 91       	ld	r24, X+
    34a8:	9d 91       	ld	r25, X+
    34aa:	0d 90       	ld	r0, X+
    34ac:	bc 91       	ld	r27, X
    34ae:	a0 2d       	mov	r26, r0
    34b0:	82 17       	cp	r24, r18
    34b2:	93 07       	cpc	r25, r19
    34b4:	a4 07       	cpc	r26, r20
    34b6:	b5 07       	cpc	r27, r21
    34b8:	18 f4       	brcc	.+6      	; 0x34c0 <__fpcmp_parts_f+0x90>
    34ba:	66 23       	and	r22, r22
    34bc:	41 f0       	breq	.+16     	; 0x34ce <__fpcmp_parts_f+0x9e>
    34be:	0d c0       	rjmp	.+26     	; 0x34da <__fpcmp_parts_f+0xaa>
    34c0:	28 17       	cp	r18, r24
    34c2:	39 07       	cpc	r19, r25
    34c4:	4a 07       	cpc	r20, r26
    34c6:	5b 07       	cpc	r21, r27
    34c8:	28 f4       	brcc	.+10     	; 0x34d4 <__fpcmp_parts_f+0xa4>
    34ca:	66 23       	and	r22, r22
    34cc:	31 f0       	breq	.+12     	; 0x34da <__fpcmp_parts_f+0xaa>
    34ce:	21 e0       	ldi	r18, 0x01	; 1
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	05 c0       	rjmp	.+10     	; 0x34de <__fpcmp_parts_f+0xae>
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <__fpcmp_parts_f+0xae>
    34da:	2f ef       	ldi	r18, 0xFF	; 255
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	c9 01       	movw	r24, r18
    34e0:	08 95       	ret

000034e2 <__divmodhi4>:
    34e2:	97 fb       	bst	r25, 7
    34e4:	09 2e       	mov	r0, r25
    34e6:	07 26       	eor	r0, r23
    34e8:	0a d0       	rcall	.+20     	; 0x34fe <__divmodhi4_neg1>
    34ea:	77 fd       	sbrc	r23, 7
    34ec:	04 d0       	rcall	.+8      	; 0x34f6 <__divmodhi4_neg2>
    34ee:	0c d0       	rcall	.+24     	; 0x3508 <__udivmodhi4>
    34f0:	06 d0       	rcall	.+12     	; 0x34fe <__divmodhi4_neg1>
    34f2:	00 20       	and	r0, r0
    34f4:	1a f4       	brpl	.+6      	; 0x34fc <__divmodhi4_exit>

000034f6 <__divmodhi4_neg2>:
    34f6:	70 95       	com	r23
    34f8:	61 95       	neg	r22
    34fa:	7f 4f       	sbci	r23, 0xFF	; 255

000034fc <__divmodhi4_exit>:
    34fc:	08 95       	ret

000034fe <__divmodhi4_neg1>:
    34fe:	f6 f7       	brtc	.-4      	; 0x34fc <__divmodhi4_exit>
    3500:	90 95       	com	r25
    3502:	81 95       	neg	r24
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	08 95       	ret

00003508 <__udivmodhi4>:
    3508:	aa 1b       	sub	r26, r26
    350a:	bb 1b       	sub	r27, r27
    350c:	51 e1       	ldi	r21, 0x11	; 17
    350e:	07 c0       	rjmp	.+14     	; 0x351e <__udivmodhi4_ep>

00003510 <__udivmodhi4_loop>:
    3510:	aa 1f       	adc	r26, r26
    3512:	bb 1f       	adc	r27, r27
    3514:	a6 17       	cp	r26, r22
    3516:	b7 07       	cpc	r27, r23
    3518:	10 f0       	brcs	.+4      	; 0x351e <__udivmodhi4_ep>
    351a:	a6 1b       	sub	r26, r22
    351c:	b7 0b       	sbc	r27, r23

0000351e <__udivmodhi4_ep>:
    351e:	88 1f       	adc	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	5a 95       	dec	r21
    3524:	a9 f7       	brne	.-22     	; 0x3510 <__udivmodhi4_loop>
    3526:	80 95       	com	r24
    3528:	90 95       	com	r25
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	08 95       	ret

00003530 <__prologue_saves__>:
    3530:	2f 92       	push	r2
    3532:	3f 92       	push	r3
    3534:	4f 92       	push	r4
    3536:	5f 92       	push	r5
    3538:	6f 92       	push	r6
    353a:	7f 92       	push	r7
    353c:	8f 92       	push	r8
    353e:	9f 92       	push	r9
    3540:	af 92       	push	r10
    3542:	bf 92       	push	r11
    3544:	cf 92       	push	r12
    3546:	df 92       	push	r13
    3548:	ef 92       	push	r14
    354a:	ff 92       	push	r15
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	ca 1b       	sub	r28, r26
    355a:	db 0b       	sbc	r29, r27
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	09 94       	ijmp

00003568 <__epilogue_restores__>:
    3568:	2a 88       	ldd	r2, Y+18	; 0x12
    356a:	39 88       	ldd	r3, Y+17	; 0x11
    356c:	48 88       	ldd	r4, Y+16	; 0x10
    356e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3570:	6e 84       	ldd	r6, Y+14	; 0x0e
    3572:	7d 84       	ldd	r7, Y+13	; 0x0d
    3574:	8c 84       	ldd	r8, Y+12	; 0x0c
    3576:	9b 84       	ldd	r9, Y+11	; 0x0b
    3578:	aa 84       	ldd	r10, Y+10	; 0x0a
    357a:	b9 84       	ldd	r11, Y+9	; 0x09
    357c:	c8 84       	ldd	r12, Y+8	; 0x08
    357e:	df 80       	ldd	r13, Y+7	; 0x07
    3580:	ee 80       	ldd	r14, Y+6	; 0x06
    3582:	fd 80       	ldd	r15, Y+5	; 0x05
    3584:	0c 81       	ldd	r16, Y+4	; 0x04
    3586:	1b 81       	ldd	r17, Y+3	; 0x03
    3588:	aa 81       	ldd	r26, Y+2	; 0x02
    358a:	b9 81       	ldd	r27, Y+1	; 0x01
    358c:	ce 0f       	add	r28, r30
    358e:	d1 1d       	adc	r29, r1
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	ed 01       	movw	r28, r26
    359c:	08 95       	ret

0000359e <_exit>:
    359e:	f8 94       	cli

000035a0 <__stop_program>:
    35a0:	ff cf       	rjmp	.-2      	; 0x35a0 <__stop_program>
